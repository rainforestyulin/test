!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#MSearchBox{	margin: 20px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	margin: 20px;$/;"	i
#MSearchField{	width: 121px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	width: 121px;$/;"	i
#MSearchResultsWindow{	left: 45px 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	left: 45px !important;$/;"	i
#doc-content 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^#doc-content {$/;"	i
#github{	position: fixed	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	position: fixed;$/;"	i
#nav-path{	display: none	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	display: none;$/;"	i
#nav-sync{	display: none	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	display: none;$/;"	i
#nav-tree .label{	font-family: Helvetica	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	i
#nav-tree .selected 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^#nav-tree .selected {$/;"	i
#nav-tree a{	color: #b3b3b3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	color: #b3b3b3;$/;"	i
#nav-tree{	background-color: transparent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	background-color: transparent;$/;"	i
#nav-tree{	color: #b3b3b3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	color: #b3b3b3;$/;"	i
#projectbrief{	font-family: Helvetica	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	i
#projectname{	font-family: Helvetica	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	i
#side-nav{	padding: 10px 0px 20px 20px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	padding: 10px 0px 20px 20px;$/;"	i
#topbanner 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^#topbanner {$/;"	i
.githublogo 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^.githublogo {$/;"	c
.summary 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^.summary {$/;"	c
.summary + .headertitle .title 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^.summary + .headertitle .title {$/;"	c
.title 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^.title {$/;"	c
.ui-resizable .ui-resizable-handle{	width: 0px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	width: 0px;$/;"	c
A	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_class_decl.cc	/^  A,$/;"	m	class:Foo	file:
A	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_decl.cc	/^  A,$/;"	e	enum:Foo	file:
A	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_usage.cc	/^  A,$/;"	m	class:Foo	file:
A	/home/yl/vim/vim/ccls/ccls/index_tests/foobar.cc	/^enum A {};$/;"	g	file:
A	/home/yl/vim/vim/ccls/ccls/index_tests/macros/foo.cc	1;"	d	file:
A	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^enum Foo3 { A, B, C };$/;"	e	enum:Foo3
A	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_type_usage_folded_into_one.cc	/^enum A {};$/;"	g	file:
A	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_var_usage_folded_into_one.cc	/^enum A {};$/;"	g	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	447;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	453;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	456;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	460;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	462;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	464;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	468;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	471;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	474;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	479;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	482;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	485;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	490;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	493;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	496;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	499;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	502;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	505;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	508;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	511;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	516;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	519;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	522;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	525;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	528;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	531;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	534;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	432;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	435;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	441;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	447;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	453;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	456;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	459;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	470;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	475;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	478;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	481;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	484;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	487;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	490;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	493;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	496;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	501;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	504;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	507;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	510;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	513;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	516;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	519;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	447;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	450;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	453;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	456;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	460;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	462;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	464;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	468;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	471;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	474;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	479;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	482;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	485;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	490;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	493;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	496;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	499;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	502;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	505;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	508;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	511;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	514;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	517;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	522;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	525;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	528;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	531;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	534;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	537;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	540;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	432;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	435;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	441;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	445;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	447;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	453;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	456;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	459;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	464;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	467;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	470;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	475;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	478;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	481;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	484;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	487;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	490;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	493;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	496;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	499;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	502;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	507;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	510;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	513;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	516;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	519;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	522;"	d	file:
ARCHITECTURE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	525;"	d	file:
ARCHIVER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	2;"	d
ARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1029;"	d	file:
ARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	805;"	d	file:
ARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	852;"	d	file:
ARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	919;"	d	file:
ARRAY_SIZE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	10;"	d	file:
ASCII	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct ASCII {$/;"	s
AboveMaximum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AboveMaximum(double actual, const SValue& expected, bool exclusive) {$/;"	f	class:GenericSchemaValidator
AboveMaximum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AboveMaximum(int64_t actual, const SValue& expected, bool exclusive) {$/;"	f	class:GenericSchemaValidator
AboveMaximum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AboveMaximum(uint64_t actual, const SValue& expected, bool exclusive) {$/;"	f	class:GenericSchemaValidator
Accept	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_reference.cc	/^  void Accept(int a) {}$/;"	f	namespace:ns
Accept	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Accept(Handler& handler) const {$/;"	f	class:GenericValue
AddChunk	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    bool AddChunk(size_t capacity) {$/;"	f	class:MemoryPoolAllocator
AddConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct AddConst { typedef const T Type; };$/;"	s	namespace:internal
AddCurrentError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddCurrentError(const ValidateErrorCode code, bool parent = false) {$/;"	f	class:GenericSchemaValidator
AddDependencySchemaError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddDependencySchemaError(const SValue& sourceName, ISchemaValidator* subvalidator) {$/;"	f	class:GenericSchemaValidator
AddDependent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    void AddDependent(const Dependent& dependent) {$/;"	f	class:Employee
AddError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddError(ValueType& keyword, ValueType& error) {$/;"	f	class:GenericSchemaValidator
AddErrorArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddErrorArray(const ValidateErrorCode code,$/;"	f	class:GenericSchemaValidator
AddErrorCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddErrorCode(ValueType& result, const ValidateErrorCode code) {$/;"	f	class:GenericSchemaValidator
AddErrorInstanceLocation	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddErrorInstanceLocation(ValueType& result, bool parent) {$/;"	f	class:GenericSchemaValidator
AddErrorSchemaLocation	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddErrorSchemaLocation(ValueType& result, PointerType schema = PointerType()) {$/;"	f	class:GenericSchemaValidator
AddExpectedType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddExpectedType(const typename SchemaType::ValueType& expectedType) {$/;"	f	class:GenericSchemaValidator
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    AddMember(GenericValue& name, T value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    AddMember(StringRefType name, T value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(StringRefType name, StringRefType value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(StringRefType name, ValueType& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(StringRefType name, ValueType&& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, StringRefType value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, ValueType& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, ValueType&& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(ValueType& name, std::basic_string<Ch>& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(ValueType&& name, ValueType& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject AddMember(ValueType&& name, ValueType&& value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, StringRefType value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(GenericValue& name, std::basic_string<Ch>& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(GenericValue&& name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(GenericValue&& name, GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(StringRefType name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(StringRefType name, GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& AddMember(StringRefType name, StringRefType value, Allocator& allocator) {$/;"	f	class:GenericValue
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (GenericObject)) AddMember(StringRefType name, T value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (ValueType&)) AddMember(ValueType& name, T value, AllocatorType& allocator) const { value_.AddMember(name, value, allocator); return *this; }$/;"	f	class:GenericObject
AddMissingDependentProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddMissingDependentProperty(const SValue& targetName) {$/;"	f	class:GenericSchemaValidator
AddMissingProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddMissingProperty(const SValue& name) {$/;"	f	class:GenericSchemaValidator
AddNumberError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddNumberError(const ValidateErrorCode code, ValueType& actual, const SValue& expected,$/;"	f	class:GenericSchemaValidator
AddSchemaRefs	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddSchemaRefs(SchemaType* schema) {$/;"	f	class:GenericSchemaDocument
AddShape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    void AddShape(Shape* shape) { shapes_.push_back(shape); }$/;"	f	class:Canvas
AddState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool AddState(Stack<Allocator>& l, SizeType index) {$/;"	f	class:internal::GenericRegexSearch
AddType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddType(const ValueType& type) {$/;"	f	class:internal::Schema
AddUniqueElement	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AddUniqueElement(V1& a, const V2& v) {$/;"	f	class:internal::Schema
Address	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Address = 1 << 7,$/;"	m	class:ccls::Role
AlignBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static inline void* AlignBuffer(void* buf, size_t &size)$/;"	f	class:MemoryPoolAllocator
All	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  All = (1 << 9) - 1,$/;"	m	class:ccls::Role
All	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  All = 1 | 2$/;"	m	class:ccls::__anon9::CallType	file:
Allocate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    std::size_t Allocate(std::size_t len) {$/;"	f	class:GenericUri
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef Allocator AllocatorType;                        \/\/!< Allocator type from template parameter.$/;"	t	class:GenericDocument
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef Allocator AllocatorType;                \/\/!< Allocator type from template parameter.$/;"	t	class:GenericValue
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::AllocatorType AllocatorType;$/;"	t	class:GenericArray
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::AllocatorType AllocatorType;$/;"	t	class:GenericObject
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef Allocator AllocatorType;$/;"	t	class:GenericSchemaDocument
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::AllocatorType AllocatorType;$/;"	t	class:IGenericRemoteSchemaDocumentProvider
AllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::AllocatorType AllocatorType;$/;"	t	class:internal::Schema
AndExpr	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename C1, typename C2> struct AndExpr : AndExprCond<C1::Value, C2::Value>::Type {};$/;"	s	namespace:internal
AndExprCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <> struct AndExprCond<true, true> : TrueType {};$/;"	s	namespace:internal
AndExprCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Cond1, bool Cond2> struct AndExprCond : FalseType {};$/;"	s	namespace:internal
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SizeType Append(SizeType l1, SizeType l2) {$/;"	f	class:internal::GenericRegex
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Append(T* name, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer Append(SizeType index, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer Append(const Ch* name, SizeType length, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer Append(const Token& token, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer Append(const ValueType& token, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
Append	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer Append(const std::basic_string<Ch>& name, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
AppendDecimal64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    void AppendDecimal64(const Ch* begin, const Ch* end) {$/;"	f	class:internal::BigInteger
AppendIndexToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE static void AppendIndexToken(Stack& documentStack, SizeType index) {$/;"	f	struct:internal::TokenHelper
AppendToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AppendToken(const Ch* str, SizeType len) {$/;"	f	class:GenericSchemaValidator
Apply	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <> struct SelectIfImpl<false> { template <typename T1, typename T2> struct Apply { typedef T2 Type; }; };$/;"	s	struct:internal::SelectIfImpl
Apply	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool C> struct SelectIfImpl { template <typename T1, typename T2> struct Apply { typedef T1 Type; }; };$/;"	s	struct:internal::SelectIfImpl
Array	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Array = 18,$/;"	m	class:ccls::SymbolKind
Array	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericArray<false, ValueT> Array;$/;"	t	class:GenericArray
Array	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericArray<false, ValueType> Array;$/;"	t	class:GenericValue
ArrayData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct ArrayData {$/;"	s	class:GenericValue
ArrayType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::Array ArrayType;$/;"	t	struct:internal::TypeHelper
ArrayType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::ConstArray ArrayType;$/;"	t	struct:internal::TypeHelper
AssertException	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^    AssertException(const AssertException& rhs) : std::logic_error(rhs) {}$/;"	f	class:AssertException
AssertException	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^    AssertException(const char* w) : std::logic_error(w) {}$/;"	f	class:AssertException
AssertException	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^class AssertException : public std::logic_error {$/;"	c
AssignIfExist	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static void AssignIfExist(SizeType& out, const ValueType& value, const ValueType& name) {$/;"	f	class:internal::Schema
AssignIfExist	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static void AssignIfExist(bool& out, const ValueType& value, const ValueType& name) {$/;"	f	class:internal::Schema
AssignIfExist	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void AssignIfExist(SchemaArray& out, SchemaDocumentType& schemaDocument, const PointerType& p, const ValueType& value, const ValueType& name, const ValueType& document) {$/;"	f	class:internal::Schema
AsyncDocumentParser	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    AsyncDocumentParser(Document& d)$/;"	f	class:AsyncDocumentParser
AsyncDocumentParser	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^class AsyncDocumentParser {$/;"	c	file:
AsyncStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        AsyncStringStream(AsyncDocumentParser& parser) : parser_(parser), src_(), end_(), count_() {}$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
AsyncStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    struct AsyncStringStream {$/;"	s	class:AsyncDocumentParser	file:
AutoUTF	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct AutoUTF {$/;"	s
AutoUTFInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    AutoUTFInputStream(InputByteStream& is, UTFType type = kUTF8) : is_(&is), type_(type), hasBOM_(false) {$/;"	f	class:AutoUTFInputStream
AutoUTFInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^class AutoUTFInputStream {$/;"	c
AutoUTFOutputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    AutoUTFOutputStream(OutputByteStream& os, UTFType type, bool putBOM) : os_(&os), type_(type) {$/;"	f	class:AutoUTFOutputStream
AutoUTFOutputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^class AutoUTFOutputStream {$/;"	c
B	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_class_decl.cc	/^  B = 20$/;"	m	class:Foo	file:
B	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_decl.cc	/^  B = 20$/;"	e	enum:Foo	file:
B	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_usage.cc	/^  B = 20$/;"	m	class:Foo	file:
B	/home/yl/vim/vim/ccls/ccls/index_tests/foobar.cc	/^enum B {};$/;"	g	file:
B	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^enum Foo3 { A, B, C };$/;"	e	enum:Foo3
B	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_type_usage_folded_into_one.cc	/^enum B {};$/;"	g	file:
B	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_var_usage_folded_into_one.cc	/^enum B {};$/;"	g	file:
BIGINTEGER_LITERAL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	21;"	d	file:
BIGINTEGER_LITERAL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/strtodtest.cpp	24;"	d	file:
Background	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  Background,$/;"	m	class:ccls::IndexMode
Bar	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.h	/^struct Bar {};$/;"	s
Bar	/home/yl/vim/vim/ccls/ccls/index_tests/templates/func_specialized_template_param.cc	/^void Foo::Bar(Template<double>&) {}$/;"	f	class:Foo
Base	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^struct Base {};$/;"	s
Base	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  Base = 1,$/;"	m	class:ccls::__anon9::CallType	file:
Base	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    typedef Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags> Base;$/;"	t	class:PrettyWriter
Base	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        typedef NumberStream<InputStream, StackCharacter, false, false> Base;$/;"	t	class:GenericReader::NumberStream
Base	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        typedef NumberStream<InputStream, StackCharacter, true, false> Base;$/;"	t	class:GenericReader::NumberStream
Base0	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/multiple_base_functions.cc	/^struct Base0 {$/;"	s	file:
Base1	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit_templated_parent.cc	/^class Base1 {};$/;"	c	file:
Base1	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/multiple_base_functions.cc	/^struct Base1 {$/;"	s	file:
Base2	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit_templated_parent.cc	/^class Base2 {};$/;"	c	file:
BaseAllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef BaseAllocator BaseAllocatorType;$/;"	t	class:StdAllocator
BaseReaderHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^struct BaseReaderHandler {$/;"	s
BaseReaderHandlerUtf8Void	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^typedef BaseReaderHandler<UTF8<>, void> BaseReaderHandlerUtf8Void;$/;"	t	file:
BaseThreadQueue	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^struct BaseThreadQueue {$/;"	s	namespace:ccls
BasicIStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    BasicIStreamWrapper(StreamType &stream) : stream_(stream), buffer_(peekBuffer_), bufferSize_(4), bufferLast_(0), current_(buffer_), readCount_(0), count_(0), eof_(false) { $/;"	f	class:BasicIStreamWrapper
BasicIStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    BasicIStreamWrapper(StreamType &stream, char* buffer, size_t bufferSize) : stream_(stream), buffer_(buffer), bufferSize_(bufferSize), bufferLast_(0), current_(buffer_), readCount_(0), count_(0), eof_(false) { $/;"	f	class:BasicIStreamWrapper
BasicIStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^class BasicIStreamWrapper {$/;"	c
BasicOStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    BasicOStreamWrapper(StreamType& stream) : stream_(stream) {}$/;"	f	class:BasicOStreamWrapper
BasicOStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^class BasicOStreamWrapper {$/;"	c
BeforeStart	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^        BeforeStart,    \/\/!< An object\/array is in the stack but it is not yet called by StartObject()\/StartArray().$/;"	e	enum:JsonReaderStackItem::State	file:
Begin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstValueIterator Begin() const { return const_cast<GenericValue&>(*this).Begin(); }$/;"	f	class:GenericValue
Begin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator Begin() const { return value_.Begin(); }$/;"	f	class:GenericArray
Begin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator Begin() { RAPIDJSON_ASSERT(IsArray()); return GetElementsPointer(); }$/;"	f	class:GenericValue
BeginValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool BeginValue() {$/;"	f	class:GenericSchemaValidator
BeginValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool BeginValue(Context& context) const {$/;"	f	class:internal::Schema
BelowMinimum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void BelowMinimum(double actual, const SValue& expected, bool exclusive) {$/;"	f	class:GenericSchemaValidator
BelowMinimum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void BelowMinimum(int64_t actual, const SValue& expected, bool exclusive) {$/;"	f	class:GenericSchemaValidator
BelowMinimum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void BelowMinimum(uint64_t actual, const SValue& expected, bool exclusive) {$/;"	f	class:GenericSchemaValidator
BigInteger	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger(const BigInteger& rhs) : count_(rhs.count_) {$/;"	f	class:internal::BigInteger
BigInteger	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger(const Ch* decimals, size_t length) : count_(1) {$/;"	f	class:internal::BigInteger
BigInteger	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    explicit BigInteger(uint64_t u) : count_(1) {$/;"	f	class:internal::BigInteger
BigInteger	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^class BigInteger {$/;"	c	namespace:internal
Binary	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^enum class SerializeFormat { Binary, Json };$/;"	m	class:ccls::SerializeFormat
BinaryReader	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  BinaryReader(std::string_view buf) : p_(buf.data()) {}$/;"	f	struct:ccls::BinaryReader
BinaryReader	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^struct BinaryReader {$/;"	s	namespace:ccls
BinaryWriter	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^struct BinaryWriter {$/;"	s	namespace:ccls
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Bool(bool b) { return out_.Bool(b); }$/;"	f	struct:CapitalizeFilter
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Bool(bool b)       { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Bool(b)   && EndValue(); }$/;"	f	class:FilterKeyHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Bool(bool b)       { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Bool(b)   && EndValue(); }$/;"	f	class:FilterKeyHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Bool(bool b) {$/;"	f	class:JsonxWriter
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Bool(bool b) { st_ = kHasBool; v_.SetBool(b); return true; }$/;"	f	class:LookaheadParserHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Bool(bool b) { type = "Bool:"; data = b? "true": "false"; return true; }$/;"	f	struct:MyHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Bool(bool b) { cout << "Bool(" << boolalpha << b << ")" << endl; return true; }$/;"	f	struct:MyHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Bool(bool b) { new (stack_.template Push<ValueType>()) ValueType(b); return true; }$/;"	f	class:GenericDocument
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Bool(bool b)           { PrettyPrefix(b ? kTrueType : kFalseType); return Base::EndValue(Base::WriteBool(b)); }$/;"	f	class:PrettyWriter
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Bool(bool) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Bool(Context& context, bool) const {$/;"	f	class:internal::Schema
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Bool(bool b)       { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Bool,   (CurrentContext(), b), (b)); }$/;"	f	class:GenericSchemaValidator
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Bool(bool b) { return WriteType(b ? kTrueType : kFalseType); }$/;"	f	class:internal::Hasher
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Bool(bool b)           { Prefix(b ? kTrueType : kFalseType); return EndValue(WriteBool(b)); }$/;"	f	class:Writer
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Bool(bool) { return true; }$/;"	f	struct:NoOpHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Bool(bool b) { \/*EXPECT_EQ(expect, b); *\/EXPECT_TRUE(expect == b);  ++step_; return true; }$/;"	f	struct:ParseBoolHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Bool(bool b) {$/;"	f	struct:ParseObjectHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Bool(bool) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_BOOL; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Bool(bool) { return e != 1; }$/;"	f	struct:TerminateHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Bool(bool) { return true; }$/;"	f	struct:NumbersAsStringsHandler
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Bool(bool) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Bool(bool) { return e != 1; }$/;"	f	struct:TerminateHandler
BoolExpr	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename C> struct BoolExpr : SelectIf<C,TrueType,FalseType>::Type {};$/;"	s	namespace:internal
BoolType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Cond> struct BoolType {$/;"	s	namespace:internal
Boolean	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Boolean = 17,$/;"	m	class:ccls::SymbolKind
Bottom	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    T* Bottom() { return reinterpret_cast<T*>(stack_); }$/;"	f	class:internal::Stack
Bottom	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    const T* Bottom() const { return reinterpret_cast<T*>(stack_); }$/;"	f	class:internal::Stack
Box	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Box() : width_(), height_() {}$/;"	f	class:Box
Box	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Box(double x, double y, double width, double height) : Shape(x, y), width_(width), height_(height) {}$/;"	f	class:Box
Box	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^class Box : public Shape {$/;"	c	file:
Buffer	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/static.h	/^struct Buffer {$/;"	s
C	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^enum Foo3 { A, B, C };$/;"	e	enum:Foo3
C	/home/yl/vim/vim/ccls/ccls/index_tests/templates/member_ref_in_template.cc	/^struct C {$/;"	s	file:
C	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  C = 0,$/;"	m	class:ccls::MessageType::LanguageId
C16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	350;"	d
C16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	352;"	d
C16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	386;"	d
C16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	388;"	d
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	151;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	189;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	271;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	280;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	294;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	70;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	296;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	151;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	189;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	271;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	280;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	294;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	70;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	151;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	171;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	296;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	290;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	290;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_INTERNAL	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	160;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	211;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	274;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	301;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	72;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	102;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	189;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	272;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	285;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	72;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	160;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	211;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	274;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	301;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	72;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	102;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	189;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	272;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	285;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	72;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	234;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	283;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	153;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	286;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	234;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	283;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	153;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	286;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	28;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	263;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	303;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	81;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	263;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	289;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	303;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	207;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	81;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	213;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	219;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	213;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	d	file:
COMPILER_VERSION_TWEAK	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
CURRENT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	208;"	d	file:
CURRENT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	29;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	600;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	602;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	608;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	610;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	613;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	616;"	d	file:
CXX_STD	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	618;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	617;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	619;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	622;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	624;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	626;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	623;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	625;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	628;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	630;"	d	file:
C_DIALECT	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	632;"	d	file:
Cache	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Cache {$/;"	s	struct:ccls::Config
Call	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Call = 1 << 5,$/;"	m	class:ccls::Role
CallType	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^enum class CallType : uint8_t {$/;"	c	namespace:ccls::__anon9	file:
Canvas	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Canvas() : shapes_() {}$/;"	f	class:Canvas
Canvas	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^class Canvas {$/;"	c	file:
Capacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType Capacity() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.capacity; }$/;"	f	class:GenericValue
Capacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType Capacity() const { return value_.Capacity(); }$/;"	f	class:GenericArray
CapitalizeFilter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    CapitalizeFilter(OutputHandler& out) : out_(out), buffer_() {}$/;"	f	struct:CapitalizeFilter
CapitalizeFilter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^struct CapitalizeFilter {$/;"	s	file:
CclsPreambleCallbacks	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^class CclsPreambleCallbacks : public PreambleCallbacks {$/;"	c	namespace:clang::ccls::__anon36	file:
CclsSemanticHighlight	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^struct CclsSemanticHighlight {$/;"	s	namespace:ccls::__anon7	file:
CclsSemanticHighlightSymbol	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^struct CclsSemanticHighlightSymbol {$/;"	s	namespace:ccls::__anon7	file:
CclsSetSkippedRanges	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^struct CclsSetSkippedRanges {$/;"	s	namespace:ccls::__anon7	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    typedef char Ch;$/;"	t	class:FilterKeyHandler	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    typedef char Ch;$/;"	t	class:FilterKeyHandler	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    typedef char Ch;$/;"	t	class:FilterKeyReader	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        typedef char Ch;$/;"	t	struct:AsyncDocumentParser::AsyncStringStream	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:CursorStreamWrapper
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef CharType Ch; \/\/!< character type of the string$/;"	t	struct:GenericStringRef
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename Encoding::Ch Ch;                       \/\/!< Character type derived from Encoding.$/;"	t	class:GenericDocument
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename Encoding::Ch Ch;               \/\/!< Character type derived from Encoding.$/;"	t	class:GenericValue
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::Ch Ch;$/;"	t	class:GenericObject
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef CharType Ch;$/;"	t	class:AutoUTFInputStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef CharType Ch;$/;"	t	class:AutoUTFOutputStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef UTF8<>::Ch Ch;$/;"	t	class:EncodedInputStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:EncodedInputStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:EncodedOutputStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:ASCII
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:AutoUTF
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:UTF16
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:UTF32
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    typedef CharType Ch;$/;"	t	struct:UTF8
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    typedef char Ch;    \/\/!< Character type (byte).$/;"	t	class:FileReadStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    typedef char Ch;    \/\/!< Character type. Only support char.$/;"	t	class:FileWriteStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:internal::GenericRegex
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:internal::GenericRegexSearch
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    typedef typename StreamType::char_type Ch;$/;"	t	class:BasicIStreamWrapper
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    typedef char Ch; \/\/ byte$/;"	t	struct:GenericMemoryBuffer
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    typedef char Ch; \/\/ byte$/;"	t	struct:MemoryStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    typedef typename StreamType::char_type Ch;$/;"	t	class:BasicOStreamWrapper
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        typedef typename ValueType::Ch Ch;$/;"	t	class:GenericPointer::PercentDecodeStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    typedef typename ValueType::Ch Ch;                      \/\/!< Character type from Value$/;"	t	class:GenericPointer
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    typedef typename Base::Ch Ch;$/;"	t	class:PrettyWriter
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        typedef CharType Ch;$/;"	t	class:GenericReader::StackStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        typedef typename InputStream::Ch Ch;$/;"	t	class:GenericReader::NumberStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:BaseReaderHandler
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    typedef typename SourceEncoding::Ch Ch; \/\/!< SourceEncoding character type$/;"	t	class:GenericReader
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:internal::Hasher
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename EncodingType::Ch Ch;$/;"	t	class:GenericSchemaDocument
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename EncodingType::Ch Ch;$/;"	t	class:GenericSchemaValidator
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename EncodingType::Ch Ch;$/;"	t	class:internal::Schema
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename InputStream::Ch Ch;$/;"	t	class:SchemaValidatingReader
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::Ch Ch;$/;"	t	class:IGenericRemoteSchemaDocumentProvider
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaType::Ch Ch;$/;"	t	class:internal::IValidationErrorHandler
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename ValueType::Ch Ch;$/;"	t	struct:internal::SchemaValidationContext
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:GenericStreamWrapper
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:GenericInsituStringStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:GenericStringStream
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:GenericStringBuffer
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    typedef typename ValueType::Ch Ch;$/;"	t	class:GenericUri
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    typedef typename SourceEncoding::Ch Ch;$/;"	t	class:Writer
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    typedef char Ch;$/;"	t	struct:NullStream	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^    typedef char Ch;$/;"	t	struct:OutputStringStream	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    typedef char Ch;$/;"	t	class:OStreamWrapper	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    typedef char Ch;$/;"	t	class:IStreamWrapper	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    typedef typename Encoding::Ch Ch;$/;"	t	class:CustomStringStream	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    typedef typename Encoding::Ch Ch;$/;"	t	struct:IterativeParsingReaderHandler	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  typedef wchar_t Ch;$/;"	t	class:WIStreamWrapper	file:
Ch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    typedef char Ch;$/;"	t	class:OStreamWrapper	file:
Changed	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Changed = 2,$/;"	m	class:ccls::InsertTextFormat::FileChangeType
CharClass	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharClass { Other, Lower, Upper };$/;"	g	namespace:ccls::__anon3	file:
CharRole	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharRole { None, Tail, Head };$/;"	g	namespace:ccls::__anon3	file:
CharType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericStringRef(CharType (&str)[N]) \/* = delete *\/;$/;"	m	struct:GenericStringRef
CharacterEscape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool CharacterEscape(DecodedStream<InputStream, Encoding>& ds, unsigned* escapedCodepoint) {$/;"	f	class:internal::GenericRegex
CheckDoubleMaximum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool CheckDoubleMaximum(Context& context, double d) const {$/;"	f	class:internal::Schema
CheckDoubleMinimum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool CheckDoubleMinimum(Context& context, double d) const {$/;"	f	class:internal::Schema
CheckDoubleMultipleOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool CheckDoubleMultipleOf(Context& context, double d) const {$/;"	f	class:internal::Schema
CheckInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool CheckInt(Context& context, int64_t i) const {$/;"	f	class:internal::Schema
CheckSum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^    char CheckSum() {$/;"	f	class:Platform
CheckUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool CheckUint(Context& context, uint64_t i) const {$/;"	f	class:internal::Schema
CheckWithinHalfULP	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline int CheckWithinHalfULP(double b, const BigInteger& d, int dExp) {$/;"	f	namespace:internal
ChunkHeader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    struct ChunkHeader {$/;"	s	class:MemoryPoolAllocator
Circle	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Circle() : radius_() {}$/;"	f	class:Circle
Circle	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Circle(double x, double y, double radius) : Shape(x, y), radius_(radius) {}$/;"	f	class:Circle
Circle	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^class Circle : public Shape {$/;"	c	file:
Clang	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Clang {$/;"	s	struct:ccls::Config
Class	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Class = 5,$/;"	m	class:ccls::SymbolKind
Class	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Class = 7,$/;"	m	class:ccls::CompletionItemKind
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    void Clear() {$/;"	f	class:Canvas
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void Clear() const { value_.Clear(); }$/;"	f	class:GenericArray
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void Clear() {$/;"	f	class:GenericValue
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    void Clear() { Set(kParseErrorNone); }$/;"	f	struct:ParseResult
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    void Clear() { stackTop_ = stack_; }$/;"	f	class:internal::Stack
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    void Clear() { stack_.Clear(); }$/;"	f	struct:GenericMemoryBuffer
Clear	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void Clear() { stack_.Clear(); }$/;"	f	class:GenericStringBuffer
ClearStack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void ClearStack() {$/;"	f	class:GenericDocument
ClearStack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ClearStack() { stack_.Clear(); }$/;"	f	class:GenericReader
ClearStackOnExit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        explicit ClearStackOnExit(GenericDocument& d) : d_(d) {}$/;"	f	struct:GenericDocument::ClearStackOnExit
ClearStackOnExit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct ClearStackOnExit {$/;"	s	class:GenericDocument
ClearStackOnExit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        explicit ClearStackOnExit(GenericReader& r) : r_(r) {}$/;"	f	struct:GenericReader::ClearStackOnExit
ClearStackOnExit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    struct ClearStackOnExit {$/;"	s	class:GenericReader
ClientCap	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct ClientCap {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
ClientCapability	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct ClientCapability {$/;"	s	struct:ccls::Config
CloneTopOperand	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    void CloneTopOperand(Stack<Allocator>& operandStack) {$/;"	f	class:internal::GenericRegex
Closed	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^        Closed          \/\/!< An array is closed after read all element, but before EndArray().$/;"	e	enum:JsonReaderStackItem::State	file:
Cmd_xref	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^struct Cmd_xref {$/;"	s	namespace:ccls::__anon19	file:
Code	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    ParseErrorCode Code() const { return code_; }$/;"	f	struct:ParseResult
CodeAction	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^struct CodeAction {$/;"	s	namespace:ccls::__anon18	file:
CodeActionOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct CodeActionOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
CodeActionParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct CodeActionParam {$/;"	s	namespace:ccls
CodeLens	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct CodeLens {$/;"	s	struct:ccls::Config
CodeLens	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^struct CodeLens {$/;"	s	namespace:ccls::__anon19	file:
CodeLensOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct CodeLensOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
ColonToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        ColonToken,$/;"	e	enum:GenericReader::Token
Color	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Color = 16,$/;"	m	class:ccls::CompletionItemKind
CommaToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        CommaToken,$/;"	e	enum:GenericReader::Token
Command	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^struct Command {$/;"	s	namespace:ccls::__anon19	file:
CommonCodeLensParams	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^struct CommonCodeLensParams {$/;"	s	namespace:ccls::__anon19	file:
CompTask	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    CompTask(const RequestId &id, const std::string &path,$/;"	f	struct:ccls::SemaManager::CompTask
CompTask	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  struct CompTask {$/;"	s	struct:ccls::SemaManager
Compare	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    int Compare(const BigInteger& rhs) const {$/;"	f	class:internal::BigInteger
CompareBufferFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    bool CompareBufferFile(const char* actualBuffer, size_t actualLength, const char* expectedFilename) {$/;"	f	class:EncodedStreamTest
CompareFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    bool CompareFile(const char* filename, const char* expectedFilename) {$/;"	f	class:EncodedStreamTest
CompleteConsumerCache	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^template <typename T> struct CompleteConsumerCache {$/;"	s	namespace:ccls
Completion	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Completion {$/;"	s	struct:ccls::Config
Completion	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct Completion {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	file:
CompletionCandidate	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^struct CompletionCandidate {$/;"	s	namespace:ccls::__anon4	file:
CompletionConsumer	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  CompletionConsumer(const CodeCompleteOptions &opts, bool from_cache)$/;"	f	class:ccls::__anon20::CompletionConsumer
CompletionConsumer	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^class CompletionConsumer : public CodeCompleteConsumer {$/;"	c	namespace:ccls::__anon20	file:
CompletionContext	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct CompletionContext {$/;"	s	namespace:ccls
CompletionItem	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct CompletionItem {$/;"	s	class:ccls::InsertTextFormat
CompletionItem	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    struct CompletionItem {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::Completion	file:
CompletionItemKind	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^enum class CompletionItemKind {$/;"	c	namespace:ccls
CompletionList	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^struct CompletionList {$/;"	s	namespace:ccls::__anon20	file:
CompletionOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct CompletionOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
CompletionParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct CompletionParam : TextDocumentPositionParam {$/;"	s	namespace:ccls
CompletionTriggerKind	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^enum class CompletionTriggerKind {$/;"	c	namespace:ccls
Config	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^struct Config {$/;"	s	namespace:ccls
ConstArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericArray<true, ValueT> ConstArray;$/;"	t	class:GenericArray
ConstArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericArray<true, ValueType> ConstArray;$/;"	t	class:GenericValue
ConstIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMemberIterator<true,Encoding,Allocator>  ConstIterator;$/;"	t	class:GenericMemberIterator
ConstMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMemberIterator<true, typename ValueT::EncodingType, typename ValueT::AllocatorType> ConstMemberIterator;$/;"	t	class:GenericObject
ConstMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename GenericMemberIterator<true,Encoding,Allocator>::Iterator ConstMemberIterator;  \/\/!< Constant member iterator for iterating in object.$/;"	t	class:GenericValue
ConstObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericObject<true, ValueT> ConstObject;$/;"	t	class:GenericObject
ConstObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericObject<true, ValueType> ConstObject;$/;"	t	class:GenericValue
ConstValueIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef const GenericValue* ConstValueIterator; \/\/!< Constant value iterator for iterating in array.$/;"	t	class:GenericValue
ConstValueIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef const ValueT* ConstValueIterator;$/;"	t	class:GenericArray
Constant	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Constant = 14,$/;"	m	class:ccls::SymbolKind
Constant	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Constant = 21,$/;"	m	class:ccls::CompletionItemKind
Constructor	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Constructor = 9,$/;"	m	class:ccls::SymbolKind
Constructor	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Constructor = 4,$/;"	m	class:ccls::CompletionItemKind
Consume	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE static bool Consume(InputStream& is, typename InputStream::Ch expect) {$/;"	f	class:GenericReader
Context	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  struct Context {$/;"	s	struct:ccls::CodeActionParam
Context	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^  struct Context {$/;"	s	struct:ccls::__anon27::ReferenceParam	file:
Context	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef SchemaValidationContext<SchemaDocumentType> Context;$/;"	t	class:internal::Schema
Context	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaType::Context Context;$/;"	t	class:GenericSchemaValidator
CopyFrom	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& CopyFrom(const GenericValue<Encoding, SourceAllocator>& rhs, Allocator& allocator, bool copyConstStrings = false) {$/;"	f	class:GenericValue
CopyFromRaw	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Ch* CopyFromRaw(const GenericPointer& rhs, size_t extraToken = 0, size_t extraNameBufferSize = 0) {$/;"	f	class:GenericPointer
CopyPart	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* CopyPart(Ch* to, Ch* from, std::size_t len) {$/;"	f	class:GenericUri
CountDecimalDigit32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline int CountDecimalDigit32(uint32_t n) {$/;"	f	namespace:internal
CountDecimalDigit64_enroll4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline unsigned CountDecimalDigit64_enroll4(uint64_t n) {$/;"	f
CountDecimalDigit64_fast	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline unsigned CountDecimalDigit64_fast(uint64_t n) {$/;"	f
CountDecimalDigit_enroll4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline unsigned CountDecimalDigit_enroll4(unsigned n) {$/;"	f
CountDecimalDigit_fast	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline unsigned CountDecimalDigit_fast(unsigned n) {$/;"	f
CountDecimalDigit_naive	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline unsigned CountDecimalDigit_naive(unsigned n) {$/;"	f
CountStringCodePoint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	/^bool CountStringCodePoint(const typename Encoding::Ch* s, SizeType length, SizeType* outCount) {$/;"	f	namespace:internal
Cpp	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Cpp = 1,$/;"	m	class:ccls::MessageType::LanguageId
Create	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Create(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, bool* alreadyExist = 0) const {$/;"	f	class:GenericPointer
Create	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Create(ValueType& root, typename ValueType::AllocatorType& allocator, bool* alreadyExist = 0) const {$/;"	f	class:GenericPointer
CreateErrorMessages	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/schemavalidator/schemavalidator.cpp	/^static void CreateErrorMessages(const ValueType& errors, size_t depth = 0, const char* context = 0) {$/;"	f	file:
CreateHasher	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual void* CreateHasher() {$/;"	f	class:GenericSchemaValidator
CreateParallelValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool CreateParallelValidator(Context& context) const {$/;"	f	class:internal::Schema
CreatePattern	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RegexType* CreatePattern(const ValueType& value) {$/;"	f	class:internal::Schema
CreatePattern	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RegexType* CreatePattern(const ValueType&) { return 0; }$/;"	f	class:internal::Schema
CreateSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const UriType& CreateSchema(const SchemaType** schema, const PointerType& pointer, const ValueType& v, const ValueType& document, const UriType& id) {$/;"	f	class:GenericSchemaDocument
CreateSchemaRecursive	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void CreateSchemaRecursive(const SchemaType** schema, const PointerType& pointer, const ValueType& v, const ValueType& document, const UriType& id) {$/;"	f	class:GenericSchemaDocument
CreateSchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual ISchemaValidator* CreateSchemaValidator(const SchemaType& root, const bool inheritContinueOnErrors) {$/;"	f	class:GenericSchemaValidator
CreateSchemaValidators	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void CreateSchemaValidators(Context& context, const SchemaArray& schemas, const bool inheritContinueOnErrors) const {$/;"	f	class:internal::Schema
CreateSharedBuffer	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/static.cc	/^void Buffer::CreateSharedBuffer() {}$/;"	f	class:Buffer
CreateValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& CreateValueByPointer(DocumentType& document, const CharType(&source)[N]) {$/;"	f
CreateValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& CreateValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer) {$/;"	f
CreateValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& CreateValueByPointer(T& root, const CharType(&source)[N], typename T::AllocatorType& a) {$/;"	f
CreateValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& CreateValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::AllocatorType& a) {$/;"	f
Created	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Created = 1,$/;"	m	class:ccls::InsertTextFormat::FileChangeType
CrtAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^class CrtAllocator {$/;"	c
Cuda	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Cuda = 4,$/;"	m	class:ccls::MessageType::LanguageId
CurrentContext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Context& CurrentContext() { return *schemaStack_.template Top<Context>(); }$/;"	f	class:GenericSchemaValidator
CurrentContext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const Context& CurrentContext() const { return *schemaStack_.template Top<Context>(); }$/;"	f	class:GenericSchemaValidator
CurrentSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType& CurrentSchema() const { return *schemaStack_.template Top<Context>()->schema; }$/;"	f	class:GenericSchemaValidator
CursorStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    CursorStreamWrapper(InputStream& is):$/;"	f	class:CursorStreamWrapper
CursorStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^class CursorStreamWrapper : public GenericStreamWrapper<InputStream, Encoding> {$/;"	c
CustomStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    CustomStringStream(const Ch *src) : src_(src), head_(src) {}$/;"	f	class:CustomStringStream
CustomStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^class CustomStringStream {$/;"	c	file:
DB	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  struct DB {$/;"	s	struct:ccls::__anon10::Out_cclsInfo	file:
DB	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct DB {$/;"	s	namespace:ccls
DEC	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	538;"	d	file:
DEC	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	523;"	d	file:
DEC	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	544;"	d	file:
DEC	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	529;"	d	file:
DISALLOW	/home/yl/vim/vim/ccls/ccls/index_tests/macros/foo.cc	2;"	d	file:
DOCUMENT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	205;"	d	file:
DOCUMENT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	26;"	d	file:
DOTFILES	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/diagram/makefile	/^DOTFILES = $(basename $(wildcard *.dot))$/;"	m
Data	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    union Data {$/;"	u	class:GenericValue
DataString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE const Ch* DataString(const Data& data) {$/;"	f	class:GenericValue
DataStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE SizeType DataStringLength(const Data& data) {$/;"	f	class:GenericValue
DeclInfo	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  struct DeclInfo {$/;"	s	struct:ccls::__anon5::IndexParam	file:
DeclRef	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct DeclRef : Use {$/;"	s	namespace:ccls
Declaration	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Declaration = 1 << 0,$/;"	m	class:ccls::Role
Decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:AutoUTF
Decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:ASCII
Decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:UTF16
Decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:UTF32
Decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Decode(InputStream& is, unsigned* codepoint) {$/;"	f	struct:UTF8
Decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    void Decode() {$/;"	f	class:internal::DecodedStream
DecodedStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    DecodedStream(SourceStream& ss) : ss_(ss), codepoint_() { Decode(); }$/;"	f	class:internal::DecodedStream
DecodedStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^class DecodedStream {$/;"	c	namespace:internal
Def	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  struct Def {$/;"	s	struct:ccls::QueryFile
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    bool Default() { return false; } \/\/ All other events are invalid.$/;"	f	struct:MessageHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Default() { return true; }$/;"	f	struct:BaseReaderHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseArrayHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseBoolHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseDoubleHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseEmptyObjectHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseInt64Handler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseIntHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseMultipleRootHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseObjectHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseStringHandler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseUint64Handler
Default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Default() { ADD_FAILURE(); return false; }$/;"	f	struct:ParseUintHandler
Definition	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Definition = 1 << 1,$/;"	m	class:ccls::Role
Delete	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  Delete,$/;"	m	class:ccls::IndexMode
Deleted	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Deleted = 3,$/;"	m	class:ccls::InsertTextFormat::FileChangeType
DenseMapInfo	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^template <> struct DenseMapInfo<ccls::ExtentRef> {$/;"	s	namespace:llvm
DenseMapInfoForUsr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct DenseMapInfoForUsr {$/;"	s	namespace:ccls
Dependent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Dependent(const Dependent& rhs) : Person(rhs), education_(0) { education_ = (rhs.education_ == 0) ? 0 : new Education(*rhs.education_); }$/;"	f	class:Dependent
Dependent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Dependent(const std::string& name, unsigned age, Education* education = 0) : Person(name, age), education_(education) {}$/;"	f	class:Dependent
Dependent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^class Dependent : public Person {$/;"	c	file:
Derived	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit.cc	/^class Derived : public Parent {};$/;"	c	file:
Derived	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit_templated_parent.cc	/^class Derived : Base1<3>, Base2<Derived>, Derived1<4>, Derived2<Derived> {};$/;"	c	file:
Derived	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_multiple_inherit.cc	/^class Derived : public MiddleA, public MiddleB {};$/;"	c	file:
Derived	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/function_override.cc	/^class Derived : public Root {$/;"	c	file:
Derived	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/multiple_base_functions.cc	/^struct Derived : Base0, Base1 {$/;"	s	file:
Derived	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  Derived = 2,$/;"	m	class:ccls::__anon9::CallType	file:
Derived1	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit_templated_parent.cc	/^class Derived1 : Base1<T> {};$/;"	c	file:
Derived2	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit_templated_parent.cc	/^class Derived2 : Base2<T> {};$/;"	c	file:
DestroryHasher	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual void DestroryHasher(void* hasher) {$/;"	f	class:GenericSchemaValidator
Destroy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void Destroy() {$/;"	f	class:GenericDocument
Destroy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    void Destroy() {$/;"	f	class:internal::Stack
DestroySchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual void DestroySchemaValidator(ISchemaValidator* validator) {$/;"	f	class:GenericSchemaValidator
DetectType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void DetectType() {$/;"	f	class:AutoUTFInputStream
Diag	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^struct Diag : DiagBase {$/;"	s	namespace:ccls
DiagBase	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^struct DiagBase {$/;"	s	namespace:ccls
DiagTask	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  struct DiagTask {$/;"	s	struct:ccls::SemaManager
Diagnostic	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct Diagnostic {$/;"	s	class:ccls::MessageType
DiagnosticRelatedInformation	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct DiagnosticRelatedInformation {$/;"	s	class:ccls::MessageType
Diagnostics	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Diagnostics {$/;"	s	struct:ccls::Config
DidChangeWatchedFilesParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct DidChangeWatchedFilesParam {$/;"	s	class:ccls::InsertTextFormat
DidChangeWatchedFilesRegistration	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct DidChangeWatchedFilesRegistration {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
DidChangeWorkspaceFoldersParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct DidChangeWorkspaceFoldersParam {$/;"	s	class:ccls::InsertTextFormat
DidOpenTextDocumentParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct DidOpenTextDocumentParam {$/;"	s	namespace:ccls
Difference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    bool Difference(const BigInteger& rhs, BigInteger* out) const {$/;"	f	class:internal::BigInteger
DifferenceType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef difference_type DifferenceType;$/;"	t	class:GenericMemberIterator
DigitGen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline void DigitGen(const DiyFp& W, const DiyFp& Mp, uint64_t delta, char* buffer, int* len, int* K) {$/;"	f	namespace:internal
Direct	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  Direct = 0,$/;"	m	class:ccls::__anon9::CallType	file:
DisableIf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^struct DisableIf : DisableIfCond<Condition::Value, T> {};$/;"	s	namespace:internal
DisableIfCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct DisableIfCond { typedef T Type; };$/;"	s	namespace:internal
DisableIfCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct DisableIfCond<true, T> { \/* empty *\/ };$/;"	s	namespace:internal
Disallowed	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void Disallowed() {$/;"	f	class:GenericSchemaValidator
DisallowedItem	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void DisallowedItem(SizeType index) {$/;"	f	class:GenericSchemaValidator
DisallowedProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void DisallowedProperty(const Ch* name, SizeType length) {$/;"	f	class:GenericSchemaValidator
DisallowedType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void DisallowedType(Context& context, const ValueType& actualType) const {$/;"	f	class:internal::Schema
DisallowedValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void DisallowedValue(const ValidateErrorCode code = kValidateErrorEnum) {$/;"	f	class:GenericSchemaValidator
DiyFp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    DiyFp() : f(), e() {}$/;"	f	struct:internal::DiyFp
DiyFp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    DiyFp(uint64_t fp, int exp) : f(fp), e(exp) {}$/;"	f	struct:internal::DiyFp
DiyFp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    explicit DiyFp(double d) {$/;"	f	struct:internal::DiyFp
DiyFp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^struct DiyFp {$/;"	s	namespace:internal
DoAddMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void DoAddMember(GenericValue& name, GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
DoAllocMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE Member* DoAllocMembers(SizeType capacity, Allocator& allocator) {$/;"	f	class:GenericValue
DoClearMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void DoClearMembers() {$/;"	f	class:GenericValue
DoCopyMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void DoCopyMembers(const GenericValue<Encoding,SourceAllocator>& rhs, Allocator& allocator, bool copyConstStrings) {$/;"	f	class:GenericValue
DoEraseMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator DoEraseMembers(ConstMemberIterator first, ConstMemberIterator last) {$/;"	f	class:GenericValue
DoFindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator DoFindMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
DoFreeMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void DoFreeMembers() {$/;"	f	class:GenericValue
DoReallocMap	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Map* &DoReallocMap(Map** oldMap, SizeType newCapacity, Allocator& allocator) {$/;"	f	class:GenericValue
DoRemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator DoRemoveMember(MemberIterator m) {$/;"	f	class:GenericValue
DoReserveMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void DoReserveMembers(SizeType newCapacity, Allocator& allocator) {$/;"	f	class:GenericValue
Document	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^typedef GenericDocument<UTF8<> > Document;$/;"	t
Document	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericDocument<UTF8<char>, MemoryPoolAllocator<CrtAllocator>, CrtAllocator> Document;$/;"	t
Document	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^        > Document;$/;"	t	namespace:myjson	file:
DocumentFormattingParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct DocumentFormattingParam {$/;"	s	class:ccls::InsertTextFormat
DocumentHighlight	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^struct DocumentHighlight {$/;"	s	namespace:ccls::__anon21	file:
DocumentLink	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^struct DocumentLink {$/;"	s	namespace:ccls::__anon22	file:
DocumentLinkOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct DocumentLinkOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
DocumentList	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    typedef std::vector<Document*> DocumentList;$/;"	t	class:Schema	file:
DocumentMove	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^struct DocumentMove: public ::testing::Test {$/;"	s	file:
DocumentOnTypeFormattingOptions	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    struct DocumentOnTypeFormattingOptions {$/;"	s	struct:ccls::Config::ServerCap
DocumentOnTypeFormattingParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct DocumentOnTypeFormattingParam {$/;"	s	class:ccls::InsertTextFormat
DocumentRangeFormattingParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct DocumentRangeFormattingParam {$/;"	s	class:ccls::InsertTextFormat
DocumentSymbol	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct DocumentSymbol {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	file:
DocumentSymbol	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^struct DocumentSymbol {$/;"	s	namespace:ccls::__anon23	file:
DocumentSymbolParam	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^struct DocumentSymbolParam : TextDocumentParam {$/;"	s	namespace:ccls::__anon23	file:
DocumentType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    typedef GenericDocument<typename SchemaDocumentType::EncodingType, MemoryPoolAllocator<>, MemoryPoolAllocator<> > DocumentType;$/;"	t	class:RemoteSchemaDocumentProvider	file:
DocumentUri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct DocumentUri {$/;"	s	namespace:ccls
DoesNotMatch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void DoesNotMatch(const Ch* str, SizeType length) {$/;"	f	class:GenericSchemaValidator
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Double(double d) { return out_.Double(d); }$/;"	f	struct:CapitalizeFilter
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Double(double d)   { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Double(d) && EndValue(); }$/;"	f	class:FilterKeyHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Double(double d)   { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Double(d) && EndValue(); }$/;"	f	class:FilterKeyHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Double(double d) {$/;"	f	class:JsonxWriter
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Double(double d) { st_ = kHasNumber; v_.SetDouble(d); return true; }$/;"	f	class:LookaheadParserHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Double(double d) { type = "Double:"; data = stringify(d); return true; }$/;"	f	struct:MyHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Double(double d) { cout << "Double(" << d << ")" << endl; return true; }$/;"	f	struct:MyHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Double(double d) { new (stack_.template Push<ValueType>()) ValueType(d); return true; }$/;"	f	class:GenericDocument
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    Double() {}$/;"	f	class:internal::Double
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    Double(double d) : d_(d) {}$/;"	f	class:internal::Double
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    Double(uint64_t u) : u_(u) {}$/;"	f	class:internal::Double
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^class Double {$/;"	c	namespace:internal
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Double(double d)       { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteDouble(d)); }$/;"	f	class:PrettyWriter
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Double(double) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Double(Context& context, double d) const {$/;"	f	class:internal::Schema
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Double(double d)   { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Double, (CurrentContext(), d), (d)); }$/;"	f	class:GenericSchemaValidator
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Double(double d) { $/;"	f	class:internal::Hasher
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Double(double d)       { Prefix(kNumberType); return EndValue(WriteDouble(d)); }$/;"	f	class:Writer
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Double(double) { return true; }$/;"	f	struct:NoOpHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Double(double d) { EXPECT_EQ(12u, step_); EXPECT_DOUBLE_EQ(3.1416, d); step_++; return true; }$/;"	f	struct:ParseObjectHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Double(double d) { actual_ = d; step_++; return true; }$/;"	f	struct:ParseDoubleHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Double(double) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_DOUBLE; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Double(double) { return e != 6; }$/;"	f	struct:TerminateHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Double(double) { return true; }$/;"	f	struct:NumbersAsStringsHandler
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Double(double) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Double	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Double(double) { return e != 6; }$/;"	f	struct:TerminateHandler
DropMapIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE MapIterator DropMapIterator(MapIterator& rhs) {$/;"	f	class:GenericValue
DuplicateItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void DuplicateItems(SizeType index1, SizeType index2) {$/;"	f	class:GenericSchemaValidator
Dynamic	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Dynamic = 1 << 6,$/;"	m	class:ccls::Role
DynamicReg	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct DynamicReg {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
E	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_inherit.cc	/^enum class E : int32_t {$/;"	c	file:
E0	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_inherit.cc	/^  E0,$/;"	m	class:E	file:
E20	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_inherit.cc	/^  E20 = 20$/;"	m	class:E	file:
EURO	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	404;"	d	file:
EURO	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	639;"	d	file:
Education	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Education(const Education& rhs) : school_(rhs.school_), GPA_(rhs.GPA_) {}$/;"	f	class:Education
Education	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Education(const std::string& school, double GPA) : school_(school), GPA_(GPA) {}$/;"	f	class:Education
Education	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^class Education {$/;"	c	file:
EffectiveSignificandSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static int EffectiveSignificandSize(int order) {$/;"	f	class:internal::Double
Employee	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Employee(const Employee& rhs) : Person(rhs), dependents_(rhs.dependents_), married_(rhs.married_) {}$/;"	f	class:Employee
Employee	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Employee(const std::string& name, unsigned age, bool married) : Person(name, age), dependents_(), married_(married) {}$/;"	f	class:Employee
Employee	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^class Employee : public Person {$/;"	c	file:
Empty	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_on_return_type.cc	/^void Foo::Empty() {}$/;"	f	class:Foo
Empty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        bool Empty() const { return src_ == end_; }$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
Empty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Empty() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.size == 0; }$/;"	f	class:GenericValue
Empty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Empty() const { return value_.Empty(); }$/;"	f	class:GenericArray
Empty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    bool Empty() const { return stackTop_ == stack_; }$/;"	f	class:internal::Stack
EmptyParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct EmptyParam {};$/;"	s	namespace:ccls
EnableIf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^struct EnableIf : EnableIfCond<Condition::Value, T> {};$/;"	s	namespace:internal
EnableIfCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct EnableIfCond  { typedef T Type; };$/;"	s	namespace:internal
EnableIfCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct EnableIfCond<false, T> { \/* empty *\/ };$/;"	s	namespace:internal
Encode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:AutoUTF
Encode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:ASCII
Encode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF16
Encode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF32
Encode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Encode(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF8
EncodeUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:AutoUTF
EncodeUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:ASCII
EncodeUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF16
EncodeUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF32
EncodeUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void EncodeUnsafe(OutputStream& os, unsigned codepoint) {$/;"	f	struct:UTF8
EncodedInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    EncodedInputStream(InputByteStream& is) : is_(is) { $/;"	f	class:EncodedInputStream
EncodedInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    EncodedInputStream(MemoryStream& is) : is_(is) {$/;"	f	class:EncodedInputStream
EncodedInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^class EncodedInputStream {$/;"	c
EncodedInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^class EncodedInputStream<UTF8<>, MemoryStream> {$/;"	c
EncodedOutputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    EncodedOutputStream(OutputByteStream& os, bool putBOM = true) : os_(os) { $/;"	f	class:EncodedOutputStream
EncodedOutputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^class EncodedOutputStream {$/;"	c
EncodedStreamTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    EncodedStreamTest() : json_(), length_() {}$/;"	f	class:EncodedStreamTest
EncodedStreamTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^class EncodedStreamTest : public ::testing::Test {$/;"	c	file:
Encoding	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    typedef typename RegexType::EncodingType Encoding;$/;"	t	class:internal::GenericRegexSearch
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef Encoding EncodingType;                  \/\/!< Encoding type from template parameter.$/;"	t	class:GenericValue
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::EncodingType EncodingType;$/;"	t	class:GenericObject
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    typedef Encoding EncodingType;$/;"	t	class:internal::GenericRegex
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    typedef typename ValueType::EncodingType EncodingType;  \/\/!< Encoding type from Value$/;"	t	class:GenericPointer
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaType::EncodingType EncodingType;$/;"	t	class:GenericSchemaValidator
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename ValueType::EncodingType EncodingType;$/;"	t	class:GenericSchemaDocument
EncodingType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename ValueType::EncodingType EncodingType;$/;"	t	class:internal::Schema
End	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstValueIterator End() const { return const_cast<GenericValue&>(*this).End(); }$/;"	f	class:GenericValue
End	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator End() const { return value_.End(); }$/;"	f	class:GenericArray
End	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator End() { RAPIDJSON_ASSERT(IsArray()); return GetElementsPointer() + data_.a.size; }$/;"	f	class:GenericValue
End	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    T* End() { return reinterpret_cast<T*>(stackTop_); }$/;"	f	class:internal::Stack
End	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    const T* End() const { return reinterpret_cast<T*>(stackTop_); }$/;"	f	class:internal::Stack
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::EndArray() {$/;"	f	class:JsonReader
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::EndArray() {$/;"	f	class:JsonWriter
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool EndArray(SizeType elementCount) { return out_.EndArray(elementCount); }$/;"	f	struct:CapitalizeFilter
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool EndArray(SizeType elementCount) {$/;"	f	class:FilterKeyHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool EndArray(SizeType elementCount) {$/;"	f	class:FilterKeyHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool EndArray(SizeType) {$/;"	f	class:JsonxWriter
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool EndArray(SizeType) { st_ = kExitingArray; return true; }$/;"	f	class:LookaheadParserHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool EndArray(SizeType elementCount) { type = "EndArray:"; data = stringify(elementCount); return true; }$/;"	f	struct:MyHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool EndArray(SizeType elementCount) { cout << "EndArray(" << elementCount << ")" << endl; return true; }$/;"	f	struct:MyHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EndArray(SizeType elementCount) {$/;"	f	class:GenericDocument
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool EndArray(SizeType memberCount = 0) {$/;"	f	class:PrettyWriter
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool EndArray(SizeType) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndArray(Context& context, SizeType elementCount) const {$/;"	f	class:internal::Schema
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndArray(SizeType elementCount) { $/;"	f	class:internal::Hasher
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndArray(SizeType elementCount) {$/;"	f	class:GenericSchemaValidator
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool EndArray(SizeType elementCount = 0) {$/;"	f	class:Writer
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    bool EndArray(SizeType elementCount) { count_ += elementCount; return true; }$/;"	f	struct:ValueCounter
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool EndArray(SizeType) { return true; }$/;"	f	struct:NoOpHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType c) {$/;"	f	struct:IterativeParsingReaderHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType elementCount) { EXPECT_EQ(18u, step_); EXPECT_EQ(3u, elementCount); step_++; return true; }$/;"	f	struct:ParseObjectHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType) { EXPECT_EQ(3u, step_); step_++; return true; }$/;"	f	struct:ParseMultipleRootHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType) { return e != 13; }$/;"	f	struct:TerminateHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType) { return false; }$/;"	f	struct:HandlerTerminateAtEndArray
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType) { return true; }$/;"	f	struct:NumbersAsStringsHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndArray(SizeType) { step_++; return true; }$/;"	f	struct:ParseArrayHandler
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool EndArray(SizeType) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
EndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool EndArray(SizeType) { return e != 13; }$/;"	f	struct:TerminateHandler
EndDependencyErrors	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndDependencyErrors() {$/;"	f	class:GenericSchemaValidator
EndDisallowedType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void EndDisallowedType(const typename SchemaType::ValueType& actualType) {$/;"	f	class:GenericSchemaValidator
EndMissingDependentProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void EndMissingDependentProperties(const SValue& sourceName) {$/;"	f	class:GenericSchemaValidator
EndMissingProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndMissingProperties() {$/;"	f	class:GenericSchemaValidator
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::EndObject() {$/;"	f	class:JsonReader
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::EndObject() {$/;"	f	class:JsonWriter
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool EndObject(SizeType memberCount) { return out_.EndObject(memberCount); }$/;"	f	struct:CapitalizeFilter
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool EndObject(SizeType) {$/;"	f	class:FilterKeyHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool EndObject(SizeType) {$/;"	f	class:FilterKeyHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool EndObject(SizeType) {$/;"	f	class:JsonxWriter
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool EndObject(SizeType) { st_ = kExitingObject; return true; }$/;"	f	class:LookaheadParserHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    bool EndObject(SizeType) { return state_ == kExpectNameOrObjectEnd; }$/;"	f	struct:MessageHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool EndObject(SizeType memberCount) { type = "EndObject:"; data = stringify(memberCount); return true; }$/;"	f	struct:MyHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool EndObject(SizeType memberCount) { cout << "EndObject(" << memberCount << ")" << endl; return true; }$/;"	f	struct:MyHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EndObject(SizeType memberCount) {$/;"	f	class:GenericDocument
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool EndObject(SizeType memberCount = 0) {$/;"	f	class:PrettyWriter
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool EndObject(SizeType) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndObject(Context& context, SizeType memberCount) const {$/;"	f	class:internal::Schema
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndObject(SizeType memberCount) { $/;"	f	class:internal::Hasher
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndObject(SizeType memberCount) {$/;"	f	class:GenericSchemaValidator
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool EndObject(SizeType memberCount = 0) {$/;"	f	class:Writer
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    bool EndObject(SizeType memberCount) { count_ += memberCount * 2; return true; }$/;"	f	struct:ValueCounter
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool EndObject(SizeType) { return true; }$/;"	f	struct:NoOpHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType c) {$/;"	f	struct:IterativeParsingReaderHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType memberCount) { EXPECT_EQ(19u, step_); EXPECT_EQ(7u, memberCount); step_++; return true; }$/;"	f	struct:ParseObjectHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType) { EXPECT_EQ(1u, step_); step_++; return true; }$/;"	f	struct:ParseEmptyObjectHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType) { EXPECT_EQ(1u, step_); step_++; return true; }$/;"	f	struct:ParseMultipleRootHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType) { return e != 11; }$/;"	f	struct:TerminateHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType) { return false; }$/;"	f	struct:HandlerTerminateAtEndObject
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool EndObject(SizeType) { return true; }$/;"	f	struct:NumbersAsStringsHandler
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool EndObject(SizeType) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
EndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool EndObject(SizeType) { return e != 11; }$/;"	f	struct:TerminateHandler
EndValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool EndValue() {$/;"	f	class:FilterKeyHandler	file:
EndValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool EndValue() {$/;"	f	class:FilterKeyHandler	file:
EndValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE bool EndValue(Context& context) const {$/;"	f	class:internal::Schema
EndValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool EndValue() {$/;"	f	class:GenericSchemaValidator
EndValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool EndValue(bool ret) {$/;"	f	class:Writer
EnterArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^bool LookaheadParser::EnterArray() {$/;"	f	class:LookaheadParser
EnterObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^bool LookaheadParser::EnterObject() {$/;"	f	class:LookaheadParser
Entry	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^  struct Entry {$/;"	s	struct:ccls::Project
Enum	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^enum Enum {$/;"	g	file:
Enum	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Enum = 10,$/;"	m	class:ccls::SymbolKind
Enum	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Enum = 13,$/;"	m	class:ccls::CompletionItemKind
Enum0	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^  Enum0, Enum1$/;"	e	enum:Enum	file:
Enum1	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^  Enum0, Enum1$/;"	e	enum:Enum	file:
EnumMember	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  EnumMember = 22,$/;"	m	class:ccls::SymbolKind
EnumMember	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  EnumMember = 20,$/;"	m	class:ccls::CompletionItemKind
EqOrJoinOrSep	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  EqOrJoinOrSep,$/;"	e	enum:ccls::__anon33::OptionClass	file:
EqOrSep	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  EqOrSep,$/;"	e	enum:ccls::__anon33::OptionClass	file:
Erase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator first, ConstValueIterator last) const { return value_.Erase(first, last); }$/;"	f	class:GenericArray
Erase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator first, ConstValueIterator last) {$/;"	f	class:GenericValue
Erase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator pos) const { return value_.Erase(pos); }$/;"	f	class:GenericArray
Erase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator Erase(ConstValueIterator pos) {$/;"	f	class:GenericValue
Erase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool Erase(ValueType& root) const {$/;"	f	class:GenericPointer
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator first, ConstMemberIterator last) const { return value_.EraseMember(first, last); }$/;"	f	class:GenericObject
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator first, ConstMemberIterator last) {$/;"	f	class:GenericValue
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator pos) const { return value_.EraseMember(pos); }$/;"	f	class:GenericObject
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator EraseMember(ConstMemberIterator pos) {$/;"	f	class:GenericValue
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EraseMember(const Ch* name) const { return value_.EraseMember(name); }$/;"	f	class:GenericObject
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EraseMember(const Ch* name) {$/;"	f	class:GenericValue
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EraseMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EraseMember(const std::basic_string<Ch>& name) const { return EraseMember(ValueType(StringRef(name))); }$/;"	f	class:GenericObject
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool EraseMember(const std::basic_string<Ch>& name) { return EraseMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
EraseMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename SourceAllocator> bool EraseMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.EraseMember(name); }$/;"	f	class:GenericObject
EraseValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^bool EraseValueByPointer(T& root, const CharType(&source)[N]) {$/;"	f
EraseValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^bool EraseValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer) {$/;"	f
Error	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class MessageType : int { Error = 1, Warning = 2, Info = 3, Log = 4 };$/;"	m	class:ccls::MessageType
ErrorCode	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class ErrorCode {$/;"	c	namespace:ccls
ErrorHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef IValidationErrorHandler<Schema> ErrorHandler;$/;"	t	class:internal::Schema
ErrorHandlerType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef IValidationErrorHandler<SchemaType> ErrorHandlerType;$/;"	t	struct:internal::SchemaValidationContext
Eval	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool Eval(Stack<Allocator>& operandStack, Operator op) {$/;"	f	class:internal::GenericRegex
EvalQuantifier	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool EvalQuantifier(Stack<Allocator>& operandStack, unsigned n, unsigned m) {$/;"	f	class:internal::GenericRegex
Event	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Event = 24,$/;"	m	class:ccls::SymbolKind
Event	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Event = 23,$/;"	m	class:ccls::CompletionItemKind
Event	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  struct Event {$/;"	s	struct:ccls::InsertTextFormat::DidChangeWatchedFilesParam
Event	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  struct Event {$/;"	s	struct:ccls::InsertTextFormat::DidChangeWorkspaceFoldersParam
ExecuteCommandOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct ExecuteCommandOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
Expand	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    void Expand(size_t count) {$/;"	f	class:internal::Stack
Exponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    int Exponent() const { return static_cast<int>(((u_ & kExponentMask) >> kSignificandSize) - kExponentBias); }$/;"	f	class:internal::Double
ExtentRef	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct ExtentRef : SymbolRef {$/;"	s	namespace:ccls
FOO	/home/yl/vim/vim/ccls/ccls/index_tests/macros/complex.cc	1;"	d	file:
FOO	/home/yl/vim/vim/ccls/ccls/index_tests/preprocessor/include_guard.cc	2;"	d	file:
FS	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  IntrusiveRefCntPtr<FileSystem> FS;$/;"	m	struct:clang::vfs::ProxyFileSystem	file:
FalseToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        FalseToken,$/;"	e	enum:GenericReader::Token
FalseType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^typedef BoolType<false> FalseType;$/;"	t	namespace:internal
FastPath	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline double FastPath(double significand, int exp) {$/;"	f	namespace:internal
Field	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Field = 8,$/;"	m	class:ccls::SymbolKind
Field	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Field = 5,$/;"	m	class:ccls::CompletionItemKind
File	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^struct File {$/;"	s	namespace:ccls::__anon5	file:
File	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^enum class Kind : uint8_t { Invalid, File, Type, Func, Var };$/;"	m	class:ccls::Kind
File	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  File = 1,$/;"	m	class:ccls::SymbolKind
File	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  File = 17,$/;"	m	class:ccls::CompletionItemKind
FileChangeType	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^enum class FileChangeType {$/;"	c	class:ccls::InsertTextFormat
FileInfoParam	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^struct FileInfoParam : TextDocumentParam {$/;"	s	namespace:ccls	file:
FileReadStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    FileReadStream(std::FILE* fp, char* buffer, size_t bufferSize) : fp_(fp), buffer_(buffer), bufferSize_(bufferSize), bufferLast_(0), current_(buffer_), readCount_(0), count_(0), eof_(false) { $/;"	f	class:FileReadStream
FileReadStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^class FileReadStream {$/;"	c
FileStreamTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    FileStreamTest() : filename_(), json_(), length_(), abcde_() {}$/;"	f	class:FileStreamTest
FileStreamTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^class FileStreamTest : public ::testing::Test {$/;"	c	file:
FileSystemWatcher	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct FileSystemWatcher {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
FileWriteStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    FileWriteStream(std::FILE* fp, char* buffer, size_t bufferSize) : fp_(fp), buffer_(buffer), bufferEnd_(buffer + bufferSize), current_(buffer_) { $/;"	f	class:FileWriteStream
FileWriteStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^class FileWriteStream {$/;"	c
FilterKeyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    FilterKeyHandler(OutputHandler& outputHandler, const Ch* keyString, SizeType keyLength) : $/;"	f	class:FilterKeyHandler
FilterKeyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^class FilterKeyHandler {$/;"	c	file:
FilterKeyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    FilterKeyHandler(OutputHandler& outputHandler, const Ch* keyString, SizeType keyLength) : $/;"	f	class:FilterKeyHandler
FilterKeyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^class FilterKeyHandler {$/;"	c	file:
FilterKeyReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    FilterKeyReader(InputStream& is, const Ch* keyString, SizeType keyLength) : $/;"	f	class:FilterKeyReader
FilterKeyReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^class FilterKeyReader {$/;"	c	file:
FindId	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValueType* FindId(const ValueType& doc, const UriType& finduri, PointerType& resptr, const UriType& baseuri, bool full, const PointerType& here = PointerType()) const {$/;"	f	class:GenericSchemaDocument
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstMemberIterator FindMember(const Ch* name) const { return const_cast<GenericValue&>(*this).FindMember(name); }$/;"	f	class:GenericValue
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstMemberIterator FindMember(const std::basic_string<Ch>& name) const { return FindMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator FindMember(const Ch* name) const { return value_.FindMember(name); }$/;"	f	class:GenericObject
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator FindMember(const Ch* name) {$/;"	f	class:GenericValue
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator FindMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator FindMember(const std::basic_string<Ch>& name) const { return value_.FindMember(name); }$/;"	f	class:GenericObject
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator FindMember(const std::basic_string<Ch>& name) { return FindMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename SourceAllocator> ConstMemberIterator FindMember(const GenericValue<Encoding, SourceAllocator>& name) const { return const_cast<GenericValue&>(*this).FindMember(name); }$/;"	f	class:GenericValue
FindMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename SourceAllocator> MemberIterator FindMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.FindMember(name); }$/;"	f	class:GenericObject
FindPropertyIndex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool FindPropertyIndex(const ValueType& name, SizeType* outIndex) const {$/;"	f	class:internal::Schema
Flag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct Flag {$/;"	s	class:GenericValue
Flask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^            from flask import Flask, jsonify$/;"	i
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        void Flush() {}$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:AutoUTFInputStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:EncodedInputStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Flush() { os_->Flush(); } $/;"	f	class:AutoUTFOutputStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Flush() { os_.Flush(); }$/;"	f	class:EncodedOutputStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Flush() {} $/;"	f	class:EncodedInputStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:FileReadStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    void Flush() {$/;"	f	class:FileWriteStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    void Flush() { RAPIDJSON_ASSERT(false); } $/;"	f	class:BasicIStreamWrapper
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    void Flush() {}$/;"	f	struct:GenericMemoryBuffer
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); }$/;"	f	struct:MemoryStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    void Flush() {$/;"	f	class:BasicOStreamWrapper
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Flush() { RAPIDJSON_ASSERT(false); }$/;"	f	struct:GenericStringStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Flush() { is_.Flush(); }$/;"	f	class:GenericStreamWrapper
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Flush() {}$/;"	f	struct:GenericInsituStringStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void Flush() {}$/;"	f	class:GenericStringBuffer
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    void Flush() {$/;"	f	class:Writer
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    void Flush() {}$/;"	f	struct:NullStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^    void Flush() {}$/;"	f	struct:OutputStringStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    void Flush() { os_.flush(); }$/;"	f	class:OStreamWrapper
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    void Flush() { RAPIDJSON_ASSERT(false); }$/;"	f	class:CustomStringStream
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    void Flush() { assert(false); }$/;"	f	class:IStreamWrapper
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  void Flush() { assert(false); }$/;"	f	class:WIStreamWrapper
Flush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    void Flush() { os_.flush(); }$/;"	f	class:OStreamWrapper
Folder	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Folder = 19,$/;"	m	class:ccls::CompletionItemKind
Folder	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^  struct Folder {$/;"	s	struct:ccls::Project
FoldingRange	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^struct FoldingRange {$/;"	s	namespace:ccls::__anon24	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/class_forward_declaration.cc	/^class Foo {};$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/constructor.cc	/^  Foo() {}$/;"	f	class:Foo
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/constructor.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/destructor.cc	/^  Foo() {}$/;"	f	class:Foo
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/destructor.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/invalid_reference.cc	/^Foo::Foo() {}$/;"	f	class:Foo
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/invalid_reference.cc	/^struct Foo {};$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/class.cc	/^class Foo {};$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/class_member.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/class_member_static.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/method.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_class_decl.cc	/^enum class Foo : uint8_t {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_decl.cc	/^enum Foo {$/;"	g	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_usage.cc	/^enum class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/foobar.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/macros/foo.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/method_declaration.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/method_definition.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/method_inline_declaration.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/funky_enum.cc	/^enum Foo {$/;"	g	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_declaration.cc	/^class Foo {$/;"	c	namespace:hello	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_definition.cc	/^class Foo {$/;"	c	namespace:hello	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_inline_declaration.cc	/^class Foo {$/;"	c	namespace:hello	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_reference.cc	/^  int Foo;$/;"	m	namespace:ns	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/operators/operator.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/outline/static_function_in_type.h	/^struct Foo {$/;"	s	namespace:ns
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/func_specialized_template_param.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^  int Foo = Holder<int>::static_var;$/;"	m	namespace:ns	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_class_template_func_usage_folded_into_one.cc	/^  struct Foo {$/;"	s	namespace:ns	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_type_usage_folded_into_one.cc	/^  class Foo {};$/;"	c	namespace:ns	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialized_func_definition.cc	/^void Template<T>::Foo() {}$/;"	f	class:Template
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialized_func_definition.cc	/^void Template<void>::Foo() {}$/;"	f	class:Template
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_func_usage_folded_into_one.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_template_func_usage_folded_into_one.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_type_usage_folded_into_one.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_var_usage_folded_into_one.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_type_usage_folded_into_one.cc	/^class Foo {};$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/unions/union_decl.cc	/^union Foo {$/;"	u	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/unions/union_usage.cc	/^union Foo {$/;"	u	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_constructor.cc	/^Foo::Foo() {$/;"	f	class:Foo
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_constructor.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_addr_method.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_call_method.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_class_inline_var_def.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_forward_decl_method.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_complex.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_field.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_local.cc	/^void Foo() {$/;"	f
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_on_return_type.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_various.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member_static.cc	/^struct Foo {$/;"	s	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_member.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_static_member.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_static_member_decl_only.cc	/^class Foo {$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/deduce_auto_type.cc	/^class Foo {};$/;"	c	file:
Foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/type_instance_on_using_type.cc	/^void Foo() {$/;"	f
Foo	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^Foo::Foo() : $/;"	f	class:Foo
Foo	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^struct Foo {$/;"	s	file:
Foo1	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^void Foo1() {}$/;"	f
Foo2	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^struct Foo2 {};$/;"	s
Foo2	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^  int Foo2 = Holder<int>::static_var;$/;"	m	namespace:ns	file:
Foo2	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_typedef_and_using.cc	/^typedef Foo Foo2;$/;"	t	file:
Foo2	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_typedef_and_using_template.cc	/^typedef Foo<Foo1> Foo2;$/;"	t	file:
Foo3	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^enum Foo3 { A, B, C };$/;"	g
Foo4	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^int Foo4;$/;"	v
Foo5	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^static int Foo5;/;"	v
Foobar	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.h	/^  Foobar() {}$/;"	f	class:Foobar
Foobar	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.h	/^  Foobar(int&&, Bar*, bool*) {}$/;"	f	class:Foobar
Foobar	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.h	/^  Foobar(int) {}$/;"	f	class:Foobar
Foobar	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.h	/^  Foobar(int, Bar*, bool*) {}$/;"	f	class:Foobar
Foobar	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.h	/^class Foobar {$/;"	c
FormattingOptions	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct FormattingOptions {$/;"	s	class:ccls::InsertTextFormat
Frag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        Frag(SizeType s, SizeType o, SizeType m) : start(s), out(o), minIndex(m) {}$/;"	f	struct:internal::GenericRegex::Frag
Frag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    struct Frag {$/;"	s	class:internal::GenericRegex
Free	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^inline void Free(A& a, T *p, size_t n = 1)$/;"	f
Free	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    void Free() {$/;"	f	class:GenericUri
Free	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^    static void Free(void *_p) { return free(_p); }$/;"	f	class:myjson::MyAllocator
FreeState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual void FreeState(void* p) {$/;"	f	class:GenericSchemaValidator
Full	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^enum class TextDocumentSyncKind { None = 0, Full = 1, Incremental = 2 };$/;"	m	class:ccls::__anon17::TextDocumentSyncKind	file:
Func	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^enum class Kind : uint8_t { Invalid, File, Type, Func, Var };$/;"	m	class:ccls::Kind
FuncDef	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct FuncDef : NameMixin<FuncDef<V>> {$/;"	s	namespace:ccls
Function	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Function = 12,$/;"	m	class:ccls::SymbolKind
Function	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Function = 3,$/;"	m	class:ccls::CompletionItemKind
FuzzyMatcher	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^FuzzyMatcher::FuzzyMatcher(std::string_view pattern, int sensitivity) {$/;"	f	class:ccls::FuzzyMatcher
FuzzyMatcher	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^class FuzzyMatcher {$/;"	c	namespace:ccls
GPA_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    double GPA_;$/;"	m	class:Education	file:
GenericArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray(ValueType& value) : value_(value) {}$/;"	f	class:GenericArray
GenericArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray(const GenericArray& rhs) : value_(rhs.value_) {}$/;"	f	class:GenericArray
GenericArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericArray {$/;"	c
GenericDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity, StackAllocator* stackAllocator = 0) : $/;"	f	class:GenericDocument
GenericDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericDocument(Type type, Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity, StackAllocator* stackAllocator = 0) :$/;"	f	class:GenericDocument
GenericDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericDocument : public GenericValue<Encoding, Allocator> {$/;"	c
GenericInsituStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    GenericInsituStringStream(Ch *src) : src_(src), dst_(0), head_(src) {}$/;"	f	struct:GenericInsituStringStream
GenericInsituStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^struct GenericInsituStringStream {$/;"	s
GenericMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericMember {$/;"	c
GenericMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericMemberIterator() : ptr_() {}$/;"	f	class:GenericMemberIterator
GenericMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericMemberIterator(const NonConstIterator & it) : ptr_(it.ptr_) {}$/;"	f	class:GenericMemberIterator
GenericMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericMemberIterator(Pointer p) : ptr_(p) {}$/;"	f	class:GenericMemberIterator
GenericMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericMemberIterator {$/;"	c
GenericMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericMemberIterator<false,Encoding,Allocator> {$/;"	c
GenericMemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericMemberIterator<true,Encoding,Allocator> {$/;"	c
GenericMemoryBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    GenericMemoryBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity) {}$/;"	f	struct:GenericMemoryBuffer
GenericMemoryBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^struct GenericMemoryBuffer {$/;"	s
GenericObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject(ValueType& value) : value_(value) {}$/;"	f	class:GenericObject
GenericObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject(const GenericObject& rhs) : value_(rhs.value_) {}$/;"	f	class:GenericObject
GenericObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericObject {$/;"	c
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer(Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {}$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer(const Ch* source, size_t length, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer(const GenericPointer& rhs) : allocator_(), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer(const GenericPointer& rhs, Allocator* allocator) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer(const Token* tokens, size_t tokenCount) : allocator_(), ownAllocator_(), nameBuffer_(), tokens_(const_cast<Token*>(tokens)), tokenCount_(tokenCount), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {}$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    explicit GenericPointer(const Ch* source, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    explicit GenericPointer(const std::basic_string<Ch>& source, Allocator* allocator = 0) : allocator_(allocator), ownAllocator_(), nameBuffer_(), tokens_(), tokenCount_(), parseErrorOffset_(), parseErrorCode_(kPointerParseErrorNone) {$/;"	f	class:GenericPointer
GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^class GenericPointer {$/;"	c
GenericReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    GenericReader(StackAllocator* stackAllocator = 0, size_t stackCapacity = kDefaultStackCapacity) :$/;"	f	class:GenericReader
GenericReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^class GenericReader {$/;"	c
GenericRegex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    GenericRegex(const Ch* source, Allocator* allocator = 0) : $/;"	f	class:internal::GenericRegex
GenericRegex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^class GenericRegex {$/;"	c	namespace:internal
GenericRegexSearch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    GenericRegexSearch(const RegexType& regex, Allocator* allocator = 0) : $/;"	f	class:internal::GenericRegexSearch
GenericRegexSearch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^class GenericRegexSearch {$/;"	c	namespace:internal
GenericSchemaDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    explicit GenericSchemaDocument(const ValueType& document, const Ch* uri = 0, SizeType uriLength = 0,$/;"	f	class:GenericSchemaDocument
GenericSchemaDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class GenericSchemaDocument {$/;"	c
GenericSchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    GenericSchemaValidator( $/;"	f	class:GenericSchemaValidator
GenericSchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    GenericSchemaValidator($/;"	f	class:GenericSchemaValidator
GenericSchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class GenericSchemaValidator :$/;"	c
GenericStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    GenericStreamWrapper(InputStream& is): is_(is) {}$/;"	f	class:GenericStreamWrapper
GenericStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^class GenericStreamWrapper {$/;"	c
GenericStringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    GenericStringBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity) {}$/;"	f	class:GenericStringBuffer
GenericStringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    GenericStringBuffer(GenericStringBuffer&& rhs) : stack_(std::move(rhs.stack_)) {}$/;"	f	class:GenericStringBuffer
GenericStringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^class GenericStringBuffer {$/;"	c
GenericStringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericStringRef(const CharType* str, SizeType len)$/;"	f	struct:GenericStringRef
GenericStringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericStringRef(const GenericStringRef& rhs) : s(rhs.s), length(rhs.length) {}$/;"	f	struct:GenericStringRef
GenericStringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericStringRef(const CharType* str)$/;"	f	struct:GenericStringRef
GenericStringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct GenericStringRef {$/;"	s
GenericStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    GenericStringStream(const Ch *src) : src_(src), head_(src) {}$/;"	f	struct:GenericStringStream
GenericStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^struct GenericStringStream {$/;"	s
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri(Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri(const Ch* uri, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri(const Ch* uri, SizeType len, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri(const GenericUri& rhs) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri(const GenericUri& rhs, Allocator* allocator) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri(const String& uri, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    template<typename T> GenericUri(const T& uri, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_() {$/;"	f	class:GenericUri
GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^class GenericUri {$/;"	c
GenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(const Ch* s, SizeType length, Allocator& allocator) : data_() { SetStringRaw(StringRef(s, length), allocator); }$/;"	f	class:GenericValue
GenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(const Ch*s, Allocator& allocator) : data_() { SetStringRaw(StringRef(s), allocator); }$/;"	f	class:GenericValue
GenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(const GenericValue<Encoding,SourceAllocator>& rhs, Allocator& allocator, bool copyConstStrings = false) {$/;"	f	class:GenericValue
GenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(const std::basic_string<Ch>& s, Allocator& allocator) : data_() { SetStringRaw(StringRef(s), allocator); }$/;"	f	class:GenericValue
GenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^class GenericValue {$/;"	c
Get	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_on_return_type.cc	/^Type* Foo::Get(int) { return nullptr; }$/;"	f	class:Foo
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    T Get() const { return internal::TypeHelper<ValueType, T>::Get(*this); }$/;"	f	class:GenericValue
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    T Get() { return internal::TypeHelper<ValueType, T>::Get(*this); }$/;"	f	class:GenericValue
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ArrayType Get(ValueType& v) { return v.GetArray(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ArrayType Get(const ValueType& v) { return v.GetArray(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ObjectType Get(ValueType& v) { return v.GetObject(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ObjectType Get(const ValueType& v) { return v.GetObject(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static StringType Get(const ValueType& v) { return StringType(v.GetString(), v.GetStringLength()); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static StringType Get(const ValueType& v) { return v.GetString(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Get(const ValueType& v) { return v.GetBool(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static double Get(const ValueType& v) { return v.GetDouble(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static float Get(const ValueType& v) { return v.GetFloat(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static int Get(const ValueType& v) { return v.GetInt(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static int64_t Get(const ValueType& v) { return v.GetInt64(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static long Get(const ValueType& v) { return v.GetInt(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static uint64_t Get(const ValueType& v) { return v.GetUint64(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static unsigned Get(const ValueType& v) { return v.GetUint(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static unsigned long Get(const ValueType& v) { return v.GetUint(); }$/;"	f	struct:internal::TypeHelper
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType* Get(ValueType& root, size_t* unresolvedTokenIndex = 0) const {$/;"	f	class:GenericPointer
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    const ValueType* Get(const ValueType& root, size_t* unresolvedTokenIndex = 0) const { $/;"	f	class:GenericPointer
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String Get(const GenericUri& uri) { return String(uri.GetString(), uri.GetStringLength()); }$/;"	f	class:GenericUri
Get	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    template<typename T> void Get(T& uri, Allocator& allocator) {$/;"	f	class:GenericUri
GetAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Allocator& GetAllocator() {$/;"	f	class:GenericDocument
GetAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    Allocator& GetAllocator() {$/;"	f	class:internal::Stack
GetAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Allocator& GetAllocator() { return *allocator_; }$/;"	f	class:GenericPointer
GetAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Allocator& GetAllocator() { return *allocator_; }$/;"	f	class:GenericUri
GetArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Array GetArray() { RAPIDJSON_ASSERT(IsArray()); return Array(*this); }$/;"	f	class:GenericValue
GetArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstArray GetArray() const { RAPIDJSON_ASSERT(IsArray()); return ConstArray(*this); }$/;"	f	class:GenericValue
GetAuth	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String GetAuth(const GenericUri& uri) { return String(uri.GetAuthString(), uri.GetAuthStringLength()); }$/;"	f	class:GenericUri
GetAuthString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetAuthString() const { return auth_; }$/;"	f	class:GenericUri
GetAuthStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetAuthStringLength() const { return auth_ == 0 ? 0 : internal::StrLen<Ch>(auth_); }$/;"	f	class:GenericUri
GetBase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String GetBase(const GenericUri& uri) { return String(uri.GetBaseString(), uri.GetBaseStringLength()); }$/;"	f	class:GenericUri
GetBaseString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetBaseString() const { return base_; }$/;"	f	class:GenericUri
GetBaseStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetBaseStringLength() const { return base_ == 0 ? 0 : internal::StrLen<Ch>(base_); }$/;"	f	class:GenericUri
GetBool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^bool LookaheadParser::GetBool() {$/;"	f	class:LookaheadParser
GetBool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool GetBool() const { RAPIDJSON_ASSERT(IsBool()); return data_.f.flags == kTrueFlag; }$/;"	f	class:GenericValue
GetBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    const Ch* GetBuffer() const {$/;"	f	struct:GenericMemoryBuffer
GetCachedPower	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^inline DiyFp GetCachedPower(int e, int* K) {$/;"	f	namespace:internal
GetCachedPower10	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^inline DiyFp GetCachedPower10(int exp, int *outExp) {$/;"	f	namespace:internal
GetCachedPowerByIndex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^inline DiyFp GetCachedPowerByIndex(size_t index) {$/;"	f	namespace:internal
GetCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    size_t GetCapacity() const { return static_cast<size_t>(stackEnd_ - stack_); }$/;"	f	class:internal::Stack
GetChunkBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static inline uint8_t *GetChunkBuffer(SharedData *shared)$/;"	f	class:MemoryPoolAllocator
GetChunkHead	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static inline ChunkHeader *GetChunkHead(SharedData *shared)$/;"	f	class:MemoryPoolAllocator
GetColumn	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    size_t GetColumn() const { return col_; }$/;"	f	class:CursorStreamWrapper
GetContinueOnErrors	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool GetContinueOnErrors() const {$/;"	f	class:GenericSchemaValidator
GetCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    size_t GetCount() const { return count_; }$/;"	f	class:internal::BigInteger
GetDigit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    Type GetDigit(size_t index) const { RAPIDJSON_ASSERT(index < count_); return digits_[index]; }$/;"	f	class:internal::BigInteger
GetDigitsLut	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	/^inline const char* GetDigitsLut() {$/;"	f	namespace:internal
GetDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^double LookaheadParser::GetDouble() {$/;"	f	class:LookaheadParser
GetDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    double GetDouble() const {$/;"	f	class:GenericValue
GetElementsPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE GenericValue* GetElementsPointer() const { return RAPIDJSON_GETPOINTER(GenericValue, data_.a.elements); }$/;"	f	class:GenericValue
GetError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValueType& GetError() { return error_; }$/;"	f	class:GenericSchemaValidator
GetError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const ValueType& GetError() const { return error_; }$/;"	f	class:GenericSchemaValidator
GetError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const ValueType& GetError() const { return error_; }$/;"	f	class:SchemaValidatingReader
GetErrorOffset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    size_t GetErrorOffset() const { return parseResult_.Offset(); }$/;"	f	class:GenericDocument
GetErrorOffset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    size_t GetErrorOffset() const { return parseResult_.Offset(); }$/;"	f	class:GenericReader
GetFloat	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    float GetFloat() const {$/;"	f	class:GenericValue
GetFrag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String GetFrag(const GenericUri& uri) { return String(uri.GetFragString(), uri.GetFragStringLength()); }$/;"	f	class:GenericUri
GetFragString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetFragString() const { return frag_; }$/;"	f	class:GenericUri
GetFragStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetFragStringLength() const { return frag_ == 0 ? 0 : internal::StrLen<Ch>(frag_); }$/;"	f	class:GenericUri
GetHashCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    uint64_t GetHashCode() const {$/;"	f	class:internal::Hasher
GetHashCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual uint64_t GetHashCode(void* hasher) {$/;"	f	class:GenericSchemaValidator
GetId	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const UriType& GetId() const {$/;"	f	class:internal::Schema
GetInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^int LookaheadParser::GetInt() {$/;"	f	class:LookaheadParser
GetInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    int GetInt() const          { RAPIDJSON_ASSERT(data_.f.flags & kIntFlag);   return data_.n.i.i;   }$/;"	f	class:GenericValue
GetInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    int64_t GetInt64() const    { RAPIDJSON_ASSERT(data_.f.flags & kInt64Flag); return data_.n.i64; }$/;"	f	class:GenericValue
GetInvalidDocumentPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PointerType GetInvalidDocumentPointer() const {$/;"	f	class:GenericSchemaValidator
GetInvalidDocumentPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const PointerType& GetInvalidDocumentPointer() const { return invalidDocumentPointer_; }$/;"	f	class:SchemaValidatingReader
GetInvalidSchemaCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValidateErrorCode GetInvalidSchemaCode() const { return invalidSchemaCode_; }$/;"	f	class:SchemaValidatingReader
GetInvalidSchemaCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValidateErrorCode GetInvalidSchemaCode() const {$/;"	f	class:GenericSchemaValidator
GetInvalidSchemaKeyword	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const Ch* GetInvalidSchemaKeyword() const { return invalidSchemaKeyword_; }$/;"	f	class:SchemaValidatingReader
GetInvalidSchemaKeyword	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const Ch* GetInvalidSchemaKeyword() const {$/;"	f	class:GenericSchemaValidator
GetInvalidSchemaPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PointerType GetInvalidSchemaPointer() const {$/;"	f	class:GenericSchemaValidator
GetInvalidSchemaPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const PointerType& GetInvalidSchemaPointer() const { return invalidSchemaPointer_; }$/;"	f	class:SchemaValidatingReader
GetLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        inline SizeType GetLength() const       { return  static_cast<SizeType>(MaxSize -  str[LenPos]); }$/;"	f	struct:GenericValue::ShortString
GetLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    size_t GetLength() const { return stack_.GetSize() \/ sizeof(Ch); }$/;"	f	class:GenericStringBuffer
GetLine	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    size_t GetLine() const { return line_; }$/;"	f	class:CursorStreamWrapper
GetMap	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE Map* &GetMap(Member* members) {$/;"	f	class:GenericValue
GetMapCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE SizeType &GetMapCapacity(Map* &map) {$/;"	f	class:GenericValue
GetMapIterators	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE MapIterator* GetMapIterators(Map* &map) {$/;"	f	class:GenericValue
GetMapLayoutSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE size_t GetMapLayoutSize(SizeType capacity) {$/;"	f	class:GenericValue
GetMapMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static RAPIDJSON_FORCEINLINE Member* GetMapMembers(Map* &map) {$/;"	f	class:GenericValue
GetMaxDecimalPlaces	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    int GetMaxDecimalPlaces() const {$/;"	f	class:Writer
GetMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const ValueType* GetMember(const ValueType& value, const ValueType& name) {$/;"	f	class:internal::Schema
GetMembersPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE Member* GetMembersPointer() const { return RAPIDJSON_GETPOINTER(Member, data_.o.members); }$/;"	f	class:GenericValue
GetNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^void LookaheadParser::GetNull() {$/;"	f	class:LookaheadParser
GetObj	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstObject GetObj() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }$/;"	f	class:GenericValue
GetObj	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Object GetObj() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }$/;"	f	class:GenericValue
GetObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstObject GetObject() const { RAPIDJSON_ASSERT(IsObject()); return ConstObject(*this); }$/;"	f	class:GenericValue
GetObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Object GetObject() { RAPIDJSON_ASSERT(IsObject()); return Object(*this); }$/;"	f	class:GenericValue
GetObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	51;"	d
GetObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/platformtest.cpp	25;"	d	file:
GetParseError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ParseErrorCode GetParseError() const { return parseResult_.Code(); }$/;"	f	class:GenericDocument
GetParseErrorCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    PointerParseErrorCode GetParseErrorCode() const { return parseErrorCode_; }$/;"	f	class:GenericPointer
GetParseErrorCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    ParseErrorCode GetParseErrorCode() const { return parseResult_.Code(); }$/;"	f	class:GenericReader
GetParseErrorFunc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^typedef const RAPIDJSON_ERROR_CHARTYPE* (*GetParseErrorFunc)(ParseErrorCode);$/;"	t
GetParseErrorOffset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    size_t GetParseErrorOffset() const { return parseErrorOffset_; }$/;"	f	class:GenericPointer
GetParseError_En	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/en.h	/^inline const RAPIDJSON_ERROR_CHARTYPE* GetParseError_En(ParseErrorCode parseErrorCode) {$/;"	f
GetParseResult	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    const ParseResult& GetParseResult() const { return parseResult_; }$/;"	f	class:FilterKeyReader
GetParseResult	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const ParseResult& GetParseResult() const { return parseResult_; }$/;"	f	class:SchemaValidatingReader
GetPath	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String GetPath(const GenericUri& uri) { return String(uri.GetPathString(), uri.GetPathStringLength()); }$/;"	f	class:GenericUri
GetPathString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetPathString() const { return path_; }$/;"	f	class:GenericUri
GetPathStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetPathStringLength() const { return path_ == 0 ? 0 : internal::StrLen<Ch>(path_); }$/;"	f	class:GenericUri
GetPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PointerType GetPointer(const SchemaType* schema) const {$/;"	f	class:GenericSchemaDocument
GetPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const PointerType& GetPointer() const {$/;"	f	class:internal::Schema
GetQuery	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String GetQuery(const GenericUri& uri) { return String(uri.GetQueryString(), uri.GetQueryStringLength()); }$/;"	f	class:GenericUri
GetQueryString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetQueryString() const { return query_; }$/;"	f	class:GenericUri
GetQueryStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetQueryStringLength() const { return query_ == 0 ? 0 : internal::StrLen<Ch>(query_); }$/;"	f	class:GenericUri
GetRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static unsigned char GetRange(unsigned char c) {$/;"	f	struct:UTF8
GetRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Range& GetRange(SizeType index) {$/;"	f	class:internal::GenericRegex
GetRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    const Range& GetRange(SizeType index) const {$/;"	f	class:internal::GenericRegex
GetRemoteDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual const SchemaDocumentType* GetRemoteDocument(GenericUri<ValueType, AllocatorType> uri) { return GetRemoteDocument(uri.GetBaseString(), uri.GetBaseStringLength()); }$/;"	f	class:IGenericRemoteSchemaDocumentProvider
GetRemoteDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    virtual const SchemaDocumentType* GetRemoteDocument(const char* uri, SizeType length) {$/;"	f	class:RemoteSchemaDocumentProvider
GetRoot	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType& GetRoot() const { return *root_; }$/;"	f	class:GenericSchemaDocument
GetSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* GetSchema(const PointerType& pointer) const {$/;"	f	class:GenericSchemaDocument
GetScheme	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    static String GetScheme(const GenericUri& uri) { return String(uri.GetSchemeString(), uri.GetSchemeStringLength()); }$/;"	f	class:GenericUri
GetSchemeString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetSchemeString() const { return scheme_; }$/;"	f	class:GenericUri
GetSchemeStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetSchemeStringLength() const { return scheme_ == 0 ? 0 : internal::StrLen<Ch>(scheme_); }$/;"	f	class:GenericUri
GetSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    size_t GetSize() const { return static_cast<size_t>(stackTop_ - stack_); }$/;"	f	class:internal::Stack
GetSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    size_t GetSize() const { return stack_.GetSize(); }$/;"	f	struct:GenericMemoryBuffer
GetSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    size_t GetSize() const { return stack_.GetSize(); }$/;"	f	class:GenericStringBuffer
GetStackCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    size_t GetStackCapacity() const { return stack_.GetCapacity(); }$/;"	f	class:GenericDocument
GetState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    State& GetState(SizeType index) {$/;"	f	class:internal::GenericRegex
GetState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    const State& GetState(SizeType index) const {$/;"	f	class:internal::GenericRegex
GetStateAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    StateAllocator& GetStateAllocator() {$/;"	f	class:GenericSchemaValidator
GetStateSetSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    size_t GetStateSetSize() const {$/;"	f	class:internal::GenericRegexSearch
GetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^const char* JsonWriter::GetString() const {$/;"	f	class:JsonWriter
GetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^const char* LookaheadParser::GetString() {$/;"	f	class:LookaheadParser
GetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/schemavalidator/schemavalidator.cpp	/^static std::string GetString(const ValueType& val) {$/;"	f	file:
GetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    const Ch* GetString() const { RAPIDJSON_ASSERT(IsString()); return DataString(data_); }$/;"	f	class:GenericValue
GetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    const Ch* GetString() const {$/;"	f	class:GenericStringBuffer
GetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    const Ch* GetString() const { return uri_; }$/;"	f	class:GenericUri
GetStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType GetStringLength() const { RAPIDJSON_ASSERT(IsString()); return DataStringLength(data_); }$/;"	f	class:GenericValue
GetStringLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    SizeType GetStringLength() const { return uri_ == 0 ? 0 : internal::StrLen<Ch>(uri_); }$/;"	f	class:GenericUri
GetStringPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE const Ch* GetStringPointer() const { return RAPIDJSON_GETPOINTER(Ch, data_.s.str); }$/;"	f	class:GenericValue
GetTokenCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    size_t GetTokenCount() const { return tokenCount_; }$/;"	f	class:GenericPointer
GetTokens	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    const Token* GetTokens() const { return tokens_; }$/;"	f	class:GenericPointer
GetType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    const char* GetType() const { return "Box"; }$/;"	f	class:Box
GetType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    const char* GetType() const { return "Circle"; }$/;"	f	class:Circle
GetType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Type GetType()  const { return static_cast<Type>(data_.f.flags & kTypeMask); }$/;"	f	class:GenericValue
GetType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    UTFType GetType() const { return type_; }$/;"	f	class:AutoUTFInputStream
GetType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    UTFType GetType() const { return type_; }$/;"	f	class:AutoUTFOutputStream
GetType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    UTFType GetType() const { return is_.GetType(); }$/;"	f	class:GenericStreamWrapper
GetTypeless	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* GetTypeless() const { return typeless_; }$/;"	f	class:GenericSchemaDocument
GetURI	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SValue& GetURI() const { return uri_; }$/;"	f	class:GenericSchemaDocument
GetURI	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SValue& GetURI() const {$/;"	f	class:internal::Schema
GetUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    unsigned GetUint() const    { RAPIDJSON_ASSERT(data_.f.flags & kUintFlag);  return data_.n.u.u;   }$/;"	f	class:GenericValue
GetUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    uint64_t GetUint64() const  { RAPIDJSON_ASSERT(data_.f.flags & kUint64Flag); return data_.n.u64; }$/;"	f	class:GenericValue
GetUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    UriType GetUri(ValueType& root, const UriType& rootUri, size_t* unresolvedTokenIndex = 0, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
GetUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    UriType GetUri(const ValueType& root, const UriType& rootUri, size_t* unresolvedTokenIndex = 0, Allocator* allocator = 0) const {$/;"	f	class:GenericPointer
GetValidateErrorFunc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^typedef const RAPIDJSON_ERROR_CHARTYPE* (*GetValidateErrorFunc)(ValidateErrorCode);$/;"	t
GetValidateErrorKeyword	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const ValueType& GetValidateErrorKeyword(ValidateErrorCode validateErrorCode) {$/;"	f	class:internal::Schema
GetValidateError_En	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/en.h	/^inline const RAPIDJSON_ERROR_CHARTYPE* GetValidateError_En(ValidateErrorCode validateErrorCode) {$/;"	f
GetValidateFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual unsigned GetValidateFlags() const {$/;"	f	class:GenericSchemaValidator
GetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^const typename T::ValueType* GetValueByPointer(const T& root, const CharType(&source)[N], size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^const typename T::ValueType* GetValueByPointer(const T& root, const GenericPointer<typename T::ValueType>& pointer, size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType* GetValueByPointer(T& root, const CharType (&source)[N], size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType* GetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, size_t* unresolvedTokenIndex = 0) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], T2 defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, T2 defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^GetValueByPointerWithDefault(T& root, const CharType(&source)[N], T2 defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, T2 defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const std::basic_string<typename DocumentType::Ch>& defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const typename DocumentType::Ch* defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const CharType(&source)[N], const typename DocumentType::ValueType& defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const std::basic_string<typename DocumentType::Ch>& defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::Ch* defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& GetValueByPointerWithDefault(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::ValueType& defaultValue) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const std::basic_string<typename T::Ch>& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const typename T::Ch* defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const CharType(&source)[N], const typename T::ValueType& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const std::basic_string<typename T::Ch>& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::Ch* defaultValue, typename T::AllocatorType& a) {$/;"	f
GetValueByPointerWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& GetValueByPointerWithDefault(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::ValueType& defaultValue, typename T::AllocatorType& a) {$/;"	f
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, T defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GetWithDefault(ValueType& root, T defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const Ch* defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const ValueType& defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& GetWithDefault(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const std::basic_string<Ch>& defaultValue) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& GetWithDefault(ValueType& root, const Ch* defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& GetWithDefault(ValueType& root, const ValueType& defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
GetWithDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& GetWithDefault(ValueType& root, const std::basic_string<Ch>& defaultValue, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Grisu2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline void Grisu2(double value, char* buffer, int* length, int* K) {$/;"	f	namespace:internal
GrisuRound	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline void GrisuRound(char* buffer, int len, uint64_t delta, uint64_t rest, uint64_t ten_kappa, uint64_t wp_w) {$/;"	f	namespace:internal
Group	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Group() : groupName(), students() {}$/;"	f	struct:Group
Group	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^struct Group {$/;"	s	file:
GroupMatch	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^GroupMatch::GroupMatch(const std::vector<std::string> &whitelist,$/;"	f	class:ccls::GroupMatch
GroupMatch	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^struct GroupMatch {$/;"	s	namespace:ccls
HEX	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	549;"	d	file:
HEX	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	534;"	d	file:
HEX	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	555;"	d	file:
HEX	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	540;"	d	file:
HandleError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/schemavalidator/schemavalidator.cpp	/^static void HandleError(const char* errorName, const ValueType& error, size_t depth, const char* context) {$/;"	f	file:
HandleError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void HandleError(IterativeParsingState src, InputStream& is) {$/;"	f	class:GenericReader
HandleRefSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool HandleRefSchema(const PointerType& source, const SchemaType** schema, const ValueType& v, const ValueType& document, const UriType& id) {$/;"	f	class:GenericSchemaDocument
HandlerTerminateAtEndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct HandlerTerminateAtEndArray : public IterativeParsingReaderHandler<> {$/;"	s	file:
HandlerTerminateAtEndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct HandlerTerminateAtEndObject : public IterativeParsingReaderHandler<> {$/;"	s	file:
HandlerTerminateAtStartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct HandlerTerminateAtStartArray : public IterativeParsingReaderHandler<> {$/;"	s	file:
HandlerTerminateAtStartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct HandlerTerminateAtStartObject : public IterativeParsingReaderHandler<> {$/;"	s	file:
HasAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    bool HasAllocator() const {$/;"	f	class:internal::Stack
HasBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    bool HasBOM() const { return hasBOM_; }$/;"	f	class:AutoUTFInputStream
HasBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    bool HasBOM() const { return is_.HasBOM(); }$/;"	f	class:GenericStreamWrapper
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^bool JsonReader::HasMember(const char* name) const {$/;"	f	class:JsonReader
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^bool JsonWriter::HasMember(const char*) const {$/;"	f	class:JsonWriter
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool HasMember(const Ch* name) const { return FindMember(name) != MemberEnd(); }$/;"	f	class:GenericValue
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool HasMember(const Ch* name) const { return value_.HasMember(name); }$/;"	f	class:GenericObject
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool HasMember(const GenericValue<Encoding, SourceAllocator>& name) const { return FindMember(name) != MemberEnd(); }$/;"	f	class:GenericValue
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool HasMember(const std::basic_string<Ch>& name) const { return FindMember(name) != MemberEnd(); }$/;"	f	class:GenericValue
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool HasMember(const std::basic_string<Ch>& name) const { return value_.HasMember(name); }$/;"	f	class:GenericObject
HasMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename SourceAllocator> bool HasMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.HasMember(name); }$/;"	f	class:GenericObject
HasParseError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool HasParseError() const { return parseResult_.IsError(); }$/;"	f	class:GenericDocument
HasParseError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool HasParseError() const { return parseResult_.IsError(); }$/;"	f	class:GenericReader
Hash	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static uint64_t Hash(uint64_t h, uint64_t d) {$/;"	f	class:internal::Hasher
HashCodeArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericValue<UTF8<>, StateAllocator> HashCodeArray;$/;"	t	class:GenericSchemaValidator
Hasher	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Hasher(Allocator* allocator = 0, size_t stackCapacity = kDefaultSize) : stack_(allocator, stackCapacity) {}$/;"	f	class:internal::Hasher
Hasher	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class Hasher {$/;"	c	namespace:internal
HasherType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef internal::Hasher<EncodingType, StateAllocator> HasherType;$/;"	t	class:GenericSchemaValidator
Head	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharRole { None, Tail, Head };$/;"	e	enum:ccls::__anon3::CharRole	file:
Highlight	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Highlight {$/;"	s	struct:ccls::Config
Holder	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^  struct Holder {$/;"	s	namespace:ns	file:
Holder	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_cstyle_cast.cc	/^struct Holder {$/;"	s	file:
Host	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^    struct Host {$/;"	s	struct:internal::IsBaseOfImpl
Hover	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^struct Hover {$/;"	s	namespace:ccls::__anon26	file:
I	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        struct I {$/;"	s	union:GenericValue::Number
ID_VOID_MAIN	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
ID_VOID_MAIN	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IFoo	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/interface_pure_virtual.cc	/^class IFoo {$/;"	c	file:
IGenericRemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class IGenericRemoteSchemaDocumentProvider {$/;"	c
INDEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	448;"	d	file:
INDEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	453;"	d	file:
INT16_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	277;"	d
INT16_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	55;"	d
INT16_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	66;"	d
INT16_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	181;"	d
INT16_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	180;"	d
INT32_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	278;"	d
INT32_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	56;"	d
INT32_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	67;"	d
INT32_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	183;"	d
INT32_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	182;"	d
INT64_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	279;"	d
INT64_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	57;"	d
INT64_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	68;"	d
INT64_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	185;"	d
INT64_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	184;"	d
INT8_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	276;"	d
INT8_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	54;"	d
INT8_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	65;"	d
INT8_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	179;"	d
INT8_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	178;"	d
INTMAX_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	290;"	d
INTMAX_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	79;"	d
INTMAX_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	232;"	d
INTMAX_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	231;"	d
INTPTR_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	222;"	d
INTPTR_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	226;"	d
INTPTR_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	221;"	d
INTPTR_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	225;"	d
INT_FAST16_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	209;"	d
INT_FAST16_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	208;"	d
INT_FAST32_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	211;"	d
INT_FAST32_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	210;"	d
INT_FAST64_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	213;"	d
INT_FAST64_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	212;"	d
INT_FAST8_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	207;"	d
INT_FAST8_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	206;"	d
INT_LEAST16_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	195;"	d
INT_LEAST16_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	194;"	d
INT_LEAST32_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	197;"	d
INT_LEAST32_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	196;"	d
INT_LEAST64_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	199;"	d
INT_LEAST64_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	198;"	d
INT_LEAST8_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	193;"	d
INT_LEAST8_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	192;"	d
INVALIDATE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	144;"	d	file:
INVALIDATE_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	149;"	d	file:
IRemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef IGenericRemoteSchemaDocumentProvider<SchemaDocument> IRemoteSchemaDocumentProvider;$/;"	t
IRemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^typedef IGenericRemoteSchemaDocumentProvider<SchemaDocument> IRemoteSchemaDocumentProvider;$/;"	t
IRemoteSchemaDocumentProviderType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef IGenericRemoteSchemaDocumentProvider<GenericSchemaDocument> IRemoteSchemaDocumentProviderType;$/;"	t	class:GenericSchemaDocument
ISchemaStateFactory	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class ISchemaStateFactory {$/;"	c	namespace:internal
ISchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class ISchemaValidator {$/;"	c	namespace:internal
IStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^typedef BasicIStreamWrapper<std::istream> IStreamWrapper;$/;"	t
IStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    IStreamWrapper(std::istream& is) : is_(is) {}$/;"	f	class:IStreamWrapper
IStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^class IStreamWrapper {$/;"	c	file:
IValidationErrorHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class IValidationErrorHandler {$/;"	c	namespace:internal
Impl	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/impl.cc	/^void Impl() {$/;"	f
Impl	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^struct Matcher::Impl {$/;"	s	class:ccls::Matcher	file:
ImplementedType	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_field.cc	/^struct ImplementedType {};$/;"	s	file:
ImplementedType	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_local.cc	/^struct ImplementedType {};$/;"	s	file:
ImplementedType	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_param.cc	/^struct ImplementedType {};$/;"	s	file:
Implicit	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Implicit = 1 << 8,$/;"	m	class:ccls::Role
ImplicitConcatenation	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    void ImplicitConcatenation(Stack<Allocator>& atomCountStack, Stack<Allocator>& operatorStack) {$/;"	f	class:internal::GenericRegex
InMemoryIndexFile	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^struct InMemoryIndexFile {$/;"	s	namespace:ccls::pipeline::__anon32	file:
InMessage	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct InMessage {$/;"	s	namespace:ccls
Include	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    struct Include {$/;"	s	struct:ccls::Config::Completion
IncludeComplete	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^IncludeComplete::IncludeComplete(Project *project)$/;"	f	class:ccls::IncludeComplete
IncludeComplete	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^struct IncludeComplete {$/;"	s	namespace:ccls
Incremental	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^enum class TextDocumentSyncKind { None = 0, Full = 1, Incremental = 2 };$/;"	m	class:ccls::__anon17::TextDocumentSyncKind	file:
Index	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Index {$/;"	s	struct:ccls::Config
IndexDataConsumer	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexDataConsumer(IndexParam &param) : param(param) {}$/;"	f	class:ccls::__anon5::IndexDataConsumer
IndexDataConsumer	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^class IndexDataConsumer : public index::IndexDataConsumer {$/;"	c	namespace:ccls::__anon5	file:
IndexDiags	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^class IndexDiags : public DiagnosticConsumer {$/;"	c	namespace:ccls::__anon5	file:
IndexFile	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^IndexFile::IndexFile(const std::string &path, const std::string &contents,$/;"	f	class:ccls::IndexFile
IndexFile	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct IndexFile {$/;"	s	namespace:ccls
IndexFrontendAction	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexFrontendAction(std::shared_ptr<IndexDataConsumer> dataConsumer,$/;"	f	class:ccls::__anon5::IndexFrontendAction
IndexFrontendAction	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^class IndexFrontendAction : public ASTFrontendAction {$/;"	c	namespace:ccls::__anon5	file:
IndexFunc	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct IndexFunc : NameMixin<IndexFunc> {$/;"	s	namespace:ccls
IndexInclude	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct IndexInclude {$/;"	s	namespace:ccls
IndexMode	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^enum class IndexMode {$/;"	c	namespace:ccls
IndexPPCallbacks	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexPPCallbacks(SourceManager &sm, IndexParam &param)$/;"	f	class:ccls::__anon5::IndexPPCallbacks
IndexPPCallbacks	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^class IndexPPCallbacks : public PPCallbacks {$/;"	c	namespace:ccls::__anon5	file:
IndexParam	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexParam(VFS &vfs, bool no_linkage) : vfs(vfs), no_linkage(no_linkage) {}$/;"	f	struct:ccls::__anon5::IndexParam
IndexParam	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^struct IndexParam {$/;"	s	namespace:ccls::__anon5	file:
IndexRequest	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^struct IndexRequest {$/;"	s	namespace:ccls::pipeline::__anon32	file:
IndexResult	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct IndexResult {$/;"	s	namespace:ccls
IndexStats	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^struct IndexStats {$/;"	s	namespace:ccls
IndexType	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct IndexType {$/;"	s	namespace:ccls
IndexUpdate	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct IndexUpdate {$/;"	s	namespace:ccls
IndexVar	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct IndexVar {$/;"	s	namespace:ccls
Info	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class MessageType : int { Error = 1, Warning = 2, Info = 3, Log = 4 };$/;"	m	class:ccls::MessageType
InitializeParam	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct InitializeParam {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
InitializeResult	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct InitializeResult {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
Inner	/home/yl/vim/vim/ccls/ccls/index_tests/foobar.cc	/^  struct Inner {};$/;"	s	struct:Foo	file:
Inner	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_type_usage_folded_into_one.cc	/^  struct Inner {};$/;"	s	struct:Foo	file:
InsertTextFormat	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^enum class InsertTextFormat { PlainText = 1, Snippet = 2 };$/;"	c	namespace:ccls
InsituStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericInsituStringStream<UTF8<char> > InsituStringStream;$/;"	t
InsituStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^typedef GenericInsituStringStream<UTF8<> > InsituStringStream;$/;"	t
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Int(int i) { return out_.Int(i); }$/;"	f	struct:CapitalizeFilter
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Int(int i)         { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Int(i)    && EndValue(); }$/;"	f	class:FilterKeyHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Int(int i)         { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Int(i)    && EndValue(); }$/;"	f	class:FilterKeyHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Int(int i) {$/;"	f	class:JsonxWriter
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Int(int i) { st_ = kHasNumber; v_.SetInt(i); return true; }$/;"	f	class:LookaheadParserHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Int(int i) { type = "Int:"; data = stringify(i); return true; }$/;"	f	struct:MyHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Int(int i) { cout << "Int(" << i << ")" << endl; return true; }$/;"	f	struct:MyHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Int(int i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Int(int i)             { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteInt(i)); }$/;"	f	class:PrettyWriter
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Int(int) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Int(Context& context, int i) const {$/;"	f	class:internal::Schema
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Int(int i)         { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Int,    (CurrentContext(), i), (i)); }$/;"	f	class:GenericSchemaValidator
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Int(int i) { Number n; n.u.i = i; n.d = static_cast<double>(i); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Int(int i)             { Prefix(kNumberType); return EndValue(WriteInt(i)); }$/;"	f	class:Writer
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Int(int) { return true; }$/;"	f	struct:NoOpHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int(int i) { actual_ = i; step_++; return true; }$/;"	f	struct:ParseIntHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int(int i) {$/;"	f	struct:ParseObjectHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int(int) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_INT; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int(int) { return e != 2; }$/;"	f	struct:TerminateHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int(int) { return true; }$/;"	f	struct:NumbersAsStringsHandler
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Int(int) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Int	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Int(int) { return e != 2; }$/;"	f	struct:TerminateHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Int64(int64_t i) { return out_.Int64(i); }$/;"	f	struct:CapitalizeFilter
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Int64(int64_t i)   { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Int64(i)  && EndValue(); }$/;"	f	class:FilterKeyHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Int64(int64_t i)   { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Int64(i)  && EndValue(); }$/;"	f	class:FilterKeyHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Int64(int64_t i) {$/;"	f	class:JsonxWriter
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Int64(int64_t i) { st_ = kHasNumber; v_.SetInt64(i); return true; }$/;"	f	class:LookaheadParserHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Int64(int64_t i) { type = "Int64:"; data = stringify(i); return true; }$/;"	f	struct:MyHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Int64(int64_t i) { cout << "Int64(" << i << ")" << endl; return true; }$/;"	f	struct:MyHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Int64(int64_t i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Int64(int64_t i64)     { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteInt64(i64)); }$/;"	f	class:PrettyWriter
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Int64(int64_t) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Int64(Context& context, int64_t i) const {$/;"	f	class:internal::Schema
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Int64(int64_t i)   { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Int64,  (CurrentContext(), i), (i)); }$/;"	f	class:GenericSchemaValidator
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Int64(int64_t i) { Number n; n.u.i = i; n.d = static_cast<double>(i); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Int64(int64_t i64)     { Prefix(kNumberType); return EndValue(WriteInt64(i64)); }$/;"	f	class:Writer
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Int64(int64_t) { return true; }$/;"	f	struct:NoOpHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int64(int64_t i) { actual_ = i; step_++; return true; }$/;"	f	struct:ParseInt64Handler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int64(int64_t) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_INT64; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int64(int64_t) { return e != 4; }$/;"	f	struct:TerminateHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Int64(int64_t) { return true; }$/;"	f	struct:NumbersAsStringsHandler
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Int64(int64_t) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Int64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Int64(int64_t) { return e != 4; }$/;"	f	struct:TerminateHandler
IntegerExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    int IntegerExponent() const { return (IsNormal() ? Exponent() : kDenormalExponent) - kSignificandSize; }$/;"	f	class:internal::Double
IntegerSignificand	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    uint64_t IntegerSignificand() const { return IsNormal() ? Significand() | kHiddenBit : Significand(); }$/;"	f	class:internal::Double
Interface	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Interface = 11,$/;"	m	class:ccls::SymbolKind
Interface	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Interface = 8,$/;"	m	class:ccls::CompletionItemKind
InternalError	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  InternalError = -32603,$/;"	m	class:ccls::ErrorCode
Invalid	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^enum class Kind : uint8_t { Invalid, File, Type, Func, Var };$/;"	m	class:ccls::Kind
InvalidParams	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  InvalidParams = -32602,$/;"	m	class:ccls::ErrorCode
InvalidRequest	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  InvalidRequest = -32600,$/;"	m	class:ccls::ErrorCode
Invoked	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Invoked = 1,$/;"	m	class:ccls::CompletionTriggerKind
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Is() const { return internal::TypeHelper<ValueType, T>::Is(*this); }$/;"	f	class:GenericValue
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsArray(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsBool(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsDouble(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsFloat(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsInt(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsInt64(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsObject(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsString(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsUint(); }$/;"	f	struct:internal::TypeHelper
Is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static bool Is(const ValueType& v) { return v.IsUint64(); }$/;"	f	struct:internal::TypeHelper
IsArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsArray()  const { return data_.f.flags == kArrayFlag; }$/;"	f	class:GenericValue
IsBaseOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename B, typename D> struct IsBaseOf$/;"	s	namespace:internal
IsBaseOfImpl	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template<typename B, typename D> struct IsBaseOfImpl {$/;"	s	namespace:internal
IsBool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsBool()   const { return (data_.f.flags & kBoolFlag) != 0; }$/;"	f	class:GenericValue
IsComplete	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool IsComplete() const {$/;"	f	class:Writer
IsConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct IsConst : FalseType {};$/;"	s	namespace:internal
IsConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct IsConst<const T> : TrueType {};$/;"	s	namespace:internal
IsCyclicRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool IsCyclicRef(const PointerType& pointer) const {$/;"	f	class:GenericSchemaDocument
IsDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsDouble() const { return (data_.f.flags & kDoubleFlag) != 0; }$/;"	f	class:GenericValue
IsError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    bool IsError() const { return code_ != kParseErrorNone; }$/;"	f	struct:ParseResult
IsExcludeTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    static bool IsExcludeTest(const std::string& description) {$/;"	f	class:Schema	file:
IsExcludeTestSuite	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    static bool IsExcludeTestSuite(const std::string& description) {$/;"	f	class:Schema	file:
IsFalse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsFalse()  const { return data_.f.flags == kFalseFlag; }$/;"	f	class:GenericValue
IsFloat	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsFloat() const  {$/;"	f	class:GenericValue
IsGenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^template <typename T> struct IsGenericValue : IsGenericValueImpl<T>::Type {};$/;"	s	namespace:internal
IsGenericValueImpl	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct IsGenericValueImpl : FalseType {};$/;"	s	namespace:internal
IsGenericValueImpl	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^template <typename T> struct IsGenericValueImpl<T, typename Void<typename T::EncodingType>::Type, typename Void<typename T::AllocatorType>::Type>$/;"	s	namespace:internal
IsInf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    bool IsInf() const { return (u_ & kExponentMask) == kExponentMask && Significand() == 0; }$/;"	f	class:internal::Double
IsInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsInt()    const { return (data_.f.flags & kIntFlag) != 0; }$/;"	f	class:GenericValue
IsInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsInt64()  const { return (data_.f.flags & kInt64Flag) != 0; }$/;"	f	class:GenericValue
IsIterativeParsingCompleteState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE bool IsIterativeParsingCompleteState(IterativeParsingState s) const {$/;"	f	class:GenericReader
IsIterativeParsingDelimiterState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE bool IsIterativeParsingDelimiterState(IterativeParsingState s) const {$/;"	f	class:GenericReader
IsLosslessDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsLosslessDouble() const {$/;"	f	class:GenericValue
IsLosslessFloat	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsLosslessFloat() const {$/;"	f	class:GenericValue
IsMoreConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^struct IsMoreConst$/;"	s	namespace:internal
IsNan	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    bool IsNan() const { return (u_ & kExponentMask) == kExponentMask && Significand() != 0; }$/;"	f	class:internal::Double
IsNanOrInf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    bool IsNanOrInf() const { return (u_ & kExponentMask) == kExponentMask; }$/;"	f	class:internal::Double
IsNormal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    bool IsNormal() const { return (u_ & kExponentMask) != 0 || Significand() == 0; }$/;"	f	class:internal::Double
IsNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsNull()   const { return data_.f.flags == kNullFlag; }$/;"	f	class:GenericValue
IsNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsNumber() const { return (data_.f.flags & kNumberFlag) != 0; }$/;"	f	class:GenericValue
IsObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsObject() const { return data_.f.flags == kObjectFlag; }$/;"	f	class:GenericValue
IsPatternMatch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static bool IsPatternMatch(const RegexType* pattern, const Ch *str, SizeType length) {$/;"	f	class:internal::Schema
IsPatternMatch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static bool IsPatternMatch(const RegexType* pattern, const Ch *str, SizeType) {$/;"	f	class:internal::Schema
IsPatternMatch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static bool IsPatternMatch(const RegexType*, const Ch *, SizeType) { return true; }$/;"	f	class:internal::Schema
IsPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct IsPointer : FalseType {};$/;"	s	namespace:internal
IsPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct IsPointer<T*> : TrueType {};$/;"	s	namespace:internal
IsReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    static const bool IsReader = false;$/;"	m	class:JsonWriter
IsReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    static const bool IsReader = true;$/;"	m	class:JsonReader
IsRefCounted	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    struct IsRefCounted :$/;"	s	namespace:internal
IsRefCounted	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    struct IsRefCounted<T, typename internal::EnableIfCond<T::kRefCounted>::Type> :$/;"	s	namespace:internal
IsSame	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T, typename U> struct IsSame : FalseType {};$/;"	s	namespace:internal
IsSame	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct IsSame<T, T> : TrueType {};$/;"	s	namespace:internal
IsString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsString() const { return (data_.f.flags & kStringFlag) != 0; }$/;"	f	class:GenericValue
IsTrue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsTrue()   const { return data_.f.flags == kTrueFlag; }$/;"	f	class:GenericValue
IsUTF8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static bool IsUTF8(unsigned char* s) {$/;"	f	file:
IsUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsUint()   const { return (data_.f.flags & kUintFlag) != 0; }$/;"	f	class:GenericValue
IsUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool IsUint64() const { return (data_.f.flags & kUint64Flag) != 0; }$/;"	f	class:GenericValue
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool IsValid() { return st_ != kError; }$/;"	f	class:LookaheadParser
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool IsValid() const {$/;"	f	class:internal::GenericRegex
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        bool IsValid() const { return valid_; }$/;"	f	class:GenericPointer::PercentDecodeStream
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool IsValid() const { return parseErrorCode_ == kPointerParseErrorNone; }$/;"	f	class:GenericPointer
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool IsValid() const { return isValid_; }$/;"	f	class:SchemaValidatingReader
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool IsValid() const { return stack_.GetSize() == sizeof(uint64_t); }$/;"	f	class:internal::Hasher
IsValid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual bool IsValid() const {$/;"	f	class:GenericSchemaValidator
IsWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    static const bool IsWriter = !IsReader;$/;"	m	class:JsonReader
IsWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    static const bool IsWriter = !IsReader;$/;"	m	class:JsonWriter
IsZero	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    bool IsZero() const { return count_ == 1 && digits_[0] == 0; }$/;"	f	class:internal::BigInteger
IsZero	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    bool IsZero() const { return (u_ & (kExponentMask | kSignificandMask)) == 0; }$/;"	f	class:internal::Double
IterativeParse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    ParseResult IterativeParse(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
IterativeParseComplete	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE bool IterativeParseComplete() const {$/;"	f	class:GenericReader
IterativeParseInit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void IterativeParseInit() {$/;"	f	class:GenericReader
IterativeParseNext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool IterativeParseNext(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
IterativeParsingArrayFinishState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingArrayFinishState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingArrayInitialState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingArrayInitialState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingElementDelimiterState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingElementDelimiterState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingElementState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingElementState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingErrorState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingErrorState,      \/\/ sink states at top$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingFinishState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingFinishState = 0, \/\/ sink states at top$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingKeyValueDelimiterState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingKeyValueDelimiterState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingMemberDelimiterState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingMemberDelimiterState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingMemberKeyState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingMemberKeyState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingMemberValueState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingMemberValueState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingObjectFinishState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingObjectFinishState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingObjectInitialState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingObjectInitialState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingReaderHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    IterativeParsingReaderHandler() : LogCount(0) {$/;"	f	struct:IterativeParsingReaderHandler
IterativeParsingReaderHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct IterativeParsingReaderHandler {$/;"	s	file:
IterativeParsingStartState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingStartState,$/;"	e	enum:GenericReader::IterativeParsingState
IterativeParsingState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    enum IterativeParsingState {$/;"	g	class:GenericReader
IterativeParsingValueState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        IterativeParsingValueState,$/;"	e	enum:GenericReader::IterativeParsingState
Iterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        typedef typename Map::iterator Iterator;$/;"	t	struct:GenericValue::MapTraits
Iterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMember<Encoding,Allocator>* Iterator;$/;"	t	class:GenericMemberIterator
Iterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMemberIterator Iterator;$/;"	t	class:GenericMemberIterator
Iterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef const GenericMember<Encoding,Allocator>* Iterator;$/;"	t	class:GenericMemberIterator
JoinOrSep	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  JoinOrSep,$/;"	e	enum:ccls::__anon33::OptionClass	file:
JsonNull	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^struct JsonNull {};$/;"	s	namespace:ccls
JsonReader	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  JsonReader(rapidjson::Value *m) : m(m) {}$/;"	f	struct:ccls::JsonReader
JsonReader	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^struct JsonReader {$/;"	s	namespace:ccls
JsonReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader::JsonReader(const char* json) : mDocument(), mStack(), mError(false) {$/;"	f	class:JsonReader
JsonReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^class JsonReader {$/;"	c
JsonReaderStack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^typedef std::stack<JsonReaderStackItem> JsonReaderStack;$/;"	t	file:
JsonReaderStackItem	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^    JsonReaderStackItem(const Value* value, State state) : value(value), state(state), index() {}$/;"	f	struct:JsonReaderStackItem
JsonReaderStackItem	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^struct JsonReaderStackItem {$/;"	s	file:
JsonWriter	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  JsonWriter(W *m) : m(m) {}$/;"	f	struct:ccls::JsonWriter
JsonWriter	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^struct JsonWriter {$/;"	s	namespace:ccls
JsonWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter::JsonWriter() : mWriter(), mStream() {$/;"	f	class:JsonWriter
JsonWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^class JsonWriter {$/;"	c
JsonxWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    JsonxWriter(OutputStream& os) : os_(os), name_(), level_(0), hasName_(false) {$/;"	f	class:JsonxWriter
JsonxWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^class JsonxWriter {$/;"	c	file:
Key	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Key = 20,$/;"	m	class:ccls::SymbolKind
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Key(const char* str, SizeType length, bool copy) { return String(str, length, copy); }$/;"	f	struct:CapitalizeFilter
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Key(const Ch* str, SizeType len, bool copy) { $/;"	f	class:FilterKeyHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Key(const Ch* str, SizeType len, bool copy) { $/;"	f	class:FilterKeyHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Key(const char* str, SizeType length, bool) {$/;"	f	class:JsonxWriter
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Key(const char* str, SizeType length, bool) { st_ = kHasKey; v_.SetString(str, length); return true; }$/;"	f	class:LookaheadParserHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Key(const char* str, SizeType length, bool) { type = "Key:"; data = std::string(str, length); return true; }$/;"	f	struct:MyHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Key(const char* str, SizeType length, bool copy) {$/;"	f	struct:MyHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Key(const Ch* str, SizeType length, bool copy) { return String(str, length, copy); }$/;"	f	class:GenericDocument
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Key(const Ch* str) { return Key(str, internal::StrLen(str)); }$/;"	f	class:PrettyWriter
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Key(const Ch* str, SizeType length, bool copy = false) { return String(str, length, copy); }$/;"	f	class:PrettyWriter
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Key(const std::basic_string<Ch>& str) {$/;"	f	class:PrettyWriter
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Key(const Ch* str, SizeType len, bool copy) { return static_cast<Override&>(*this).String(str, len, copy); }$/;"	f	struct:BaseReaderHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Key(Context& context, const Ch* str, SizeType len, bool) const {$/;"	f	class:internal::Schema
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Key(const Ch* str, SizeType len, bool copy) { return String(str, len, copy); }$/;"	f	class:internal::Hasher
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Key(const Ch* str, SizeType len, bool copy) {$/;"	f	class:GenericSchemaValidator
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Key(const Ch* const& str) { return Key(str, internal::StrLen(str)); }$/;"	f	class:Writer
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Key(const Ch* str, SizeType length, bool copy = false) { return String(str, length, copy); }$/;"	f	class:Writer
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Key(const std::basic_string<Ch>& str)$/;"	f	class:Writer
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Key(const char*, SizeType, bool) { return true; }$/;"	f	struct:NoOpHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Key (const Ch*, SizeType, bool) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_KEY; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Key(const char*, SizeType, bool)  { return e != 10; }$/;"	f	struct:TerminateHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Key(const char*, SizeType, bool) { return true; }$/;"	f	struct:NumbersAsStringsHandler
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Key(const wchar_t*, SizeType, bool) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Key	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Key(const char*, SizeType, bool)  { return e != 10; }$/;"	f	struct:TerminateHandler
Keyword	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Keyword = 14,$/;"	m	class:ccls::CompletionItemKind
Kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^enum class Kind : uint8_t { Invalid, File, Type, Func, Var };$/;"	c	namespace:ccls
Kind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  enum Kind { Text = 1, Read = 2, Write = 3 };$/;"	g	struct:ccls::__anon21::DocumentHighlight	file:
LOG_BOOL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_BOOL        = 0x20000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_DOUBLE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_DOUBLE      = 0x70000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_ENDARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_ENDARRAY    = 0xD0000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_ENDOBJECT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_ENDOBJECT   = 0xB0000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_IF	/home/yl/vim/vim/ccls/ccls/src/log.hh	33;"	d
LOG_IF_S	/home/yl/vim/vim/ccls/ccls/src/log.hh	40;"	d
LOG_INT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_INT         = 0x30000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_INT64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_INT64       = 0x50000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_KEY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_KEY         = 0xA0000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_NULL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_NULL        = 0x10000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_S	/home/yl/vim/vim/ccls/ccls/src/log.hh	37;"	d
LOG_STARTARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_STARTARRAY  = 0xC0000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_STARTOBJECT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_STARTOBJECT = 0x90000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_STRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_STRING      = 0x80000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_UINT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_UINT        = 0x40000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_UINT64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static uint32_t LOG_UINT64      = 0x60000000;$/;"	m	struct:IterativeParsingReaderHandler	file:
LOG_V	/home/yl/vim/vim/ccls/ccls/src/log.hh	44;"	d
LOG_V_ENABLED	/home/yl/vim/vim/ccls/ccls/src/log.hh	43;"	d
LanguageId	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class LanguageId {$/;"	c	class:ccls::MessageType
LeftBracketToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        LeftBracketToken = 0,$/;"	e	enum:GenericReader::Token
LeftCurlyBracketToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        LeftCurlyBracketToken,$/;"	e	enum:GenericReader::Token
LenPos	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        enum { MaxChars = sizeof(static_cast<Flag*>(0)->payload) \/ sizeof(Ch), MaxSize = MaxChars - 1, LenPos = MaxSize };$/;"	e	enum:GenericValue::ShortString::__anon39
Length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        size_t Length() const { return length_; }$/;"	f	class:GenericReader::StackStream
Length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        size_t Length() { return 0; }$/;"	f	class:GenericReader::NumberStream
Length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        size_t Length() { return stackStream.Length(); }$/;"	f	class:GenericReader::NumberStream
Less	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        struct Less {$/;"	s	struct:GenericValue::MapTraits
Level	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^        Level(bool inArray_) : valueCount(0), inArray(inArray_) {}$/;"	f	struct:Writer::Level
Level	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    struct Level {$/;"	s	class:Writer
LinkSupport	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct LinkSupport {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	file:
Location	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct Location {$/;"	s	namespace:ccls
LocationLink	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct LocationLink {$/;"	s	namespace:ccls
Log	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class MessageType : int { Error = 1, Warning = 2, Info = 3, Log = 4 };$/;"	m	class:ccls::MessageType
LogCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const static size_t LogCapacity = 256;$/;"	m	struct:IterativeParsingReaderHandler	file:
LogCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t LogCount;$/;"	m	struct:IterativeParsingReaderHandler	file:
Logs	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    uint32_t Logs[LogCapacity];$/;"	m	struct:IterativeParsingReaderHandler	file:
LookaheadParser	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    LookaheadParser(char* str) : LookaheadParserHandler(str) {}$/;"	f	class:LookaheadParser
LookaheadParser	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^class LookaheadParser : protected LookaheadParserHandler {$/;"	c	file:
LookaheadParserHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^LookaheadParserHandler::LookaheadParserHandler(char* str) : v_(), st_(kInit), r_(), ss_(str) {$/;"	f	class:LookaheadParserHandler
LookaheadParserHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^class LookaheadParserHandler {$/;"	c	file:
LookaheadParsingState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    enum LookaheadParsingState {$/;"	g	class:LookaheadParserHandler	file:
Lower	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharClass { Other, Lower, Upper };$/;"	e	enum:ccls::__anon3::CharClass	file:
LruCache	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^template <typename K, typename V> struct LruCache {$/;"	s	namespace:ccls
MACRO_CALL	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_macro_argument.cc	1;"	d	file:
MACRO_MAP	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	134;"	d
MAKE_HASHABLE	/home/yl/vim/vim/ccls/ccls/src/utils.hh	81;"	d
Macro	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Macro = 255,$/;"	m	class:ccls::SymbolKind
Make	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/implicit_constructor.cc	/^void Make() {$/;"	f
MakeUnique	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.cc	/^T* MakeUnique(Args&&... args) {$/;"	f
Malloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void* Malloc(size_t size) { $/;"	f	class:CrtAllocator
Malloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void* Malloc(size_t size) {$/;"	f	class:MemoryPoolAllocator
Malloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void* Malloc(size_t size)$/;"	f	class:StdAllocator
Malloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^inline T *Malloc(A& a, size_t n = 1)$/;"	f
Malloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^    void * Malloc(size_t _size) { return malloc(_size); }$/;"	f	class:myjson::MyAllocator
MallocState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual void* MallocState(size_t size) {$/;"	f	class:GenericSchemaValidator
Map	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        typedef std::multimap<Data, SizeType, Less, StdAllocator<Pair, Allocator> > Map;$/;"	t	struct:GenericValue::MapTraits
Map	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename MapTraits::Map         Map;$/;"	t	class:GenericValue
MapIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename MapTraits::Iterator    MapIterator;$/;"	t	class:GenericValue
MapLess	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename MapTraits::Less        MapLess;$/;"	t	class:GenericValue
MapPair	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename MapTraits::Pair        MapPair;$/;"	t	class:GenericValue
MapTraits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct MapTraits {$/;"	s	class:GenericValue
MarkedString	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^struct MarkedString {$/;"	s	namespace:ccls::__anon26	file:
Match	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool Match(InputStream& is) {$/;"	f	class:internal::GenericRegexSearch
Match	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool Match(const Ch* s) {$/;"	f	class:internal::GenericRegexSearch
Match	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    bool Match(const GenericUri& uri, bool full = true) const {$/;"	f	class:GenericUri
MatchRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool MatchRange(SizeType rangeIndex, unsigned codepoint) const {$/;"	f	class:internal::GenericRegexSearch
Matcher	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^Matcher::Matcher(const std::string &pattern)$/;"	f	class:ccls::Matcher
Matcher	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^struct Matcher {$/;"	s	namespace:ccls
MaxChars	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        enum { MaxChars = sizeof(static_cast<Flag*>(0)->payload) \/ sizeof(Ch), MaxSize = MaxChars - 1, LenPos = MaxSize };$/;"	e	enum:GenericValue::ShortString::__anon39
MaxSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        enum { MaxChars = sizeof(static_cast<Flag*>(0)->payload) \/ sizeof(Ch), MaxSize = MaxChars - 1, LenPos = MaxSize };$/;"	e	enum:GenericValue::ShortString::__anon39
Maybe	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  Maybe(T &&x) : storage(std::forward<T>(x)) {}$/;"	f	class:ccls::Maybe
Maybe	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  Maybe(const T &x) : storage(x) {}$/;"	f	class:ccls::Maybe
Maybe	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  Maybe(std::nullopt_t) {}$/;"	f	class:ccls::Maybe
Maybe	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^template <typename T> class Maybe {$/;"	c	namespace:ccls
MaybeAddConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Constify, typename T> struct MaybeAddConst : SelectIfCond<Constify, const T, T> {};$/;"	s	namespace:internal
Member	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::Member(const char* name) {$/;"	f	class:JsonReader
Member	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::Member(const char* name) {$/;"	f	class:JsonWriter
Member	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMember<Encoding, Allocator> Member;$/;"	t	class:GenericValue
MemberBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstMemberIterator MemberBegin() const { RAPIDJSON_ASSERT(IsObject()); return ConstMemberIterator(GetMembersPointer()); }$/;"	f	class:GenericValue
MemberBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator MemberBegin()            { RAPIDJSON_ASSERT(IsObject()); return MemberIterator(GetMembersPointer()); }$/;"	f	class:GenericValue
MemberBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator MemberBegin() const { return value_.MemberBegin(); }$/;"	f	class:GenericObject
MemberCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType MemberCapacity() const { RAPIDJSON_ASSERT(IsObject()); return data_.o.capacity; }$/;"	f	class:GenericValue
MemberCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType MemberCapacity() const { return value_.MemberCapacity(); }$/;"	f	class:GenericObject
MemberCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType MemberCount() const { RAPIDJSON_ASSERT(IsObject()); return data_.o.size; }$/;"	f	class:GenericValue
MemberCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType MemberCount() const { return value_.MemberCount(); }$/;"	f	class:GenericObject
MemberEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ConstMemberIterator MemberEnd() const   { RAPIDJSON_ASSERT(IsObject()); return ConstMemberIterator(GetMembersPointer() + data_.o.size); }$/;"	f	class:GenericValue
MemberEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator MemberEnd()              { RAPIDJSON_ASSERT(IsObject()); return MemberIterator(GetMembersPointer() + data_.o.size); }$/;"	f	class:GenericValue
MemberEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator MemberEnd() const { return value_.MemberEnd(); }$/;"	f	class:GenericObject
MemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMemberIterator<Const, typename ValueT::EncodingType, typename ValueT::AllocatorType> MemberIterator;  \/\/ This may be const or non-const iterator$/;"	t	class:GenericObject
MemberIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename GenericMemberIterator<false,Encoding,Allocator>::Iterator MemberIterator;  \/\/!< Member iterator for iterating in object.$/;"	t	class:GenericValue
MemberReserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject MemberReserve(SizeType newCapacity, AllocatorType &allocator) const { value_.MemberReserve(newCapacity, allocator); return *this; }$/;"	f	class:GenericObject
MemberReserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& MemberReserve(SizeType newCapacity, Allocator &allocator) {$/;"	f	class:GenericValue
MemoryBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericMemoryBuffer<CrtAllocator> MemoryBuffer;$/;"	t
MemoryBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^typedef GenericMemoryBuffer<> MemoryBuffer;$/;"	t
MemoryPoolAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    MemoryPoolAllocator(size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) : $/;"	f	class:MemoryPoolAllocator
MemoryPoolAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    MemoryPoolAllocator(void *buffer, size_t size, size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) :$/;"	f	class:MemoryPoolAllocator
MemoryPoolAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^class MemoryPoolAllocator {$/;"	c
MemoryStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    MemoryStream(const Ch *src, size_t size) : src_(src), begin_(src), end_(src + size), size_(size) {}$/;"	f	struct:MemoryStream
MemoryStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^struct MemoryStream {$/;"	s
MergeDuplicateKey	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^static void MergeDuplicateKey(Value& v, Value::AllocatorType& a) {$/;"	f	file:
MergeError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void MergeError(ValueType& other) {$/;"	f	class:GenericSchemaValidator
Message	/home/yl/vim/vim/ccls/ccls/src/log.cc	/^Message::Message(Verbosity verbosity, const char *file, int line)$/;"	f	class:ccls::log::Message
Message	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^struct Message {$/;"	s	namespace:ccls::log
MessageHandler	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^MessageHandler::MessageHandler() {$/;"	f	class:ccls::MessageHandler
MessageHandler	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct MessageHandler {$/;"	s	class:ccls::InsertTextFormat
MessageHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    MessageHandler() : messages_(), state_(kExpectObjectStart), name_() {}$/;"	f	struct:MessageHandler
MessageHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^struct MessageHandler$/;"	s	file:
MessageMap	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^typedef map<string, string> MessageMap;$/;"	t	file:
MessageType	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class MessageType : int { Error = 1, Warning = 2, Info = 3, Log = 4 };$/;"	c	namespace:ccls
Messages	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    Messages, \/\/ messages$/;"	m	class:ccls::__anon17::TextDocumentSyncKind::InitializeParam::Trace	file:
Method	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Method = 6,$/;"	m	class:ccls::SymbolKind
Method	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Method = 2,$/;"	m	class:ccls::CompletionItemKind
MethodNotFound	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  MethodNotFound = -32601,$/;"	m	class:ccls::ErrorCode
MiddleA	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_multiple_inherit.cc	/^class MiddleA : public Root {};$/;"	c	file:
MiddleB	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_multiple_inherit.cc	/^class MiddleB : public Root {};$/;"	c	file:
Min	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    static SizeType Min(SizeType a, SizeType b) { return a < b ? a : b; }$/;"	f	class:internal::GenericRegex
Min3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline T Min3(T a, T b, T c) {$/;"	f	namespace:internal
Misc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^class Misc : public PerfTest {$/;"	c	file:
Module	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Module = 2,$/;"	m	class:ccls::SymbolKind
Module	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Module = 9,$/;"	m	class:ccls::CompletionItemKind
MoveAllocatorTypes	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^typedef ::testing::Types< CrtAllocator, MemoryPoolAllocator<> > MoveAllocatorTypes;$/;"	t	file:
MulAdd64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    static uint64_t MulAdd64(uint64_t a, uint64_t b, uint64_t k, uint64_t* outHigh) {$/;"	f	class:internal::BigInteger
MultiQueueLock	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  MultiQueueLock(Queue... lockable) : tuple_{lockable...} { lock(); }$/;"	f	struct:ccls::MultiQueueLock
MultiQueueLock	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^template <typename... Queue> struct MultiQueueLock {$/;"	s	namespace:ccls
MultiQueueWaiter	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^struct MultiQueueWaiter {$/;"	s	namespace:ccls
MultiplyPow5	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& MultiplyPow5(unsigned exp) {$/;"	f	class:internal::BigInteger
MyAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^class MyAllocator$/;"	c	namespace:myjson	file:
MyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    MyHandler() : type(), data() {}$/;"	f	struct:MyHandler
MyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^struct MyHandler {$/;"	s	file:
MyHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^struct MyHandler {$/;"	s	file:
N	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	1820;"	d
N	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	1834;"	d
N16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	1821;"	d
N16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	1835;"	d
NAME	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	447;"	d	file:
NAME	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	452;"	d	file:
Name	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    struct Name {$/;"	s	struct:ccls::Config::Index
NameComparator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/sortkeys/sortkeys.cpp	/^struct NameComparator {$/;"	s	file:
NameMixin	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^template <typename D> struct NameMixin {$/;"	s	namespace:ccls
Namespace	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Namespace = 3,$/;"	m	class:ccls::SymbolKind
NeedPercentEncode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool NeedPercentEncode(Ch c) const {$/;"	f	class:GenericPointer
Negate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    static int32_t Negate(int32_t x) { return -x; }$/;"	f	struct:Traits
Negate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    static int64_t Negate(int64_t x) { return -x; }$/;"	f	struct:Traits
Negate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    static uint32_t Negate(uint32_t x) { return x; }$/;"	f	struct:Traits
Negate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    static uint64_t Negate(uint64_t x) { return x; }$/;"	f	struct:Traits
NewRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SizeType NewRange(unsigned codepoint) {$/;"	f	class:internal::GenericRegex
NewState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SizeType NewState(SizeType out, SizeType out1, unsigned codepoint) {$/;"	f	class:internal::GenericRegex
Next	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^void JsonReader::Next() {$/;"	f	class:JsonReader
NextArrayValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^bool LookaheadParser::NextArrayValue() {$/;"	f	class:LookaheadParser
NextObjectKey	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^const char* LookaheadParser::NextObjectKey() {$/;"	f	class:LookaheadParser
NextPositiveDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    double NextPositiveDouble() const {$/;"	f	class:internal::Double
No	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^    typedef char (&No) [2];$/;"	t	struct:internal::IsBaseOfImpl
NoOpHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^struct NoOpHandler {$/;"	s	file:
NonConstIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMemberIterator<false,Encoding,Allocator> NonConstIterator;$/;"	t	class:GenericMemberIterator
None	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharRole { None, Tail, Head };$/;"	e	enum:ccls::__anon3::CharRole	file:
None	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  None = 0,$/;"	m	class:ccls::Role
None	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^enum class TextDocumentSyncKind { None = 0, Full = 1, Incremental = 2 };$/;"	m	class:ccls::__anon17::TextDocumentSyncKind	file:
NoneOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void NoneOf(ISchemaValidator** subvalidators, SizeType count) {$/;"	f	class:GenericSchemaValidator
Normal	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  Normal,$/;"	m	class:ccls::IndexMode
Normalize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    DiyFp Normalize() const {$/;"	f	struct:internal::DiyFp
NormalizeBoundary	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    DiyFp NormalizeBoundary() const {$/;"	f	struct:internal::DiyFp
NormalizedBoundaries	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    void NormalizedBoundaries(DiyFp* minus, DiyFp* plus) const {$/;"	f	struct:internal::DiyFp
NotAllOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void NotAllOf(ISchemaValidator** subvalidators, SizeType count) {$/;"	f	class:GenericSchemaValidator
NotExpr	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename C> struct NotExpr  : SelectIf<C,FalseType,TrueType>::Type {};$/;"	s	namespace:internal
NotIndexed	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct NotIndexed {$/;"	s	class:ccls::InsertTextFormat
NotMultipleOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void NotMultipleOf(double actual, const SValue& expected) {$/;"	f	class:GenericSchemaValidator
NotMultipleOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void NotMultipleOf(int64_t actual, const SValue& expected) {$/;"	f	class:GenericSchemaValidator
NotMultipleOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void NotMultipleOf(uint64_t actual, const SValue& expected) {$/;"	f	class:GenericSchemaValidator
NotNullStrLen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType NotNullStrLen(const CharType* str) {$/;"	f	struct:GenericStringRef
NotOneOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void NotOneOf(ISchemaValidator** subvalidators, SizeType count, bool matched = false) {$/;"	f	class:GenericSchemaValidator
Note	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^struct Note : DiagBase {};$/;"	s	namespace:ccls
Null	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Null = 21,$/;"	m	class:ccls::SymbolKind
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Null() { return out_.Null(); }$/;"	f	struct:CapitalizeFilter
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Null()             { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Null()    && EndValue(); }$/;"	f	class:FilterKeyHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Null()             { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Null()    && EndValue(); }$/;"	f	class:FilterKeyHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Null() {$/;"	f	class:JsonxWriter
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Null() { st_ = kHasNull; v_.SetNull(); return true; }$/;"	f	class:LookaheadParserHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Null() { type = "Null"; data.clear(); return true; }$/;"	f	struct:MyHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Null() { cout << "Null()" << endl; return true; }$/;"	f	struct:MyHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Null() { new (stack_.template Push<ValueType>()) ValueType(); return true; }$/;"	f	class:GenericDocument
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Null()                 { PrettyPrefix(kNullType);   return Base::EndValue(Base::WriteNull()); }$/;"	f	class:PrettyWriter
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Null() { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Null()             { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Null,   (CurrentContext()), ( )); }$/;"	f	class:GenericSchemaValidator
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Null() { return WriteType(kNullType); }$/;"	f	class:internal::Hasher
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Null(Context& context) const {$/;"	f	class:internal::Schema
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Null()                 { Prefix(kNullType);   return EndValue(WriteNull()); }$/;"	f	class:Writer
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Null() { return true; }$/;"	f	struct:NoOpHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Null() { EXPECT_EQ(8u, step_); step_++; return true; }$/;"	f	struct:ParseObjectHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Null() { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_NULL; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Null() { return e != 0; }$/;"	f	struct:TerminateHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Null() { return true; }$/;"	f	struct:NumbersAsStringsHandler
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Null() { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Null	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Null() { return e != 0; }$/;"	f	struct:TerminateHandler
NullStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    NullStream() \/*: length_(0)*\/ {}$/;"	f	struct:NullStream
NullStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^struct NullStream {$/;"	s	file:
NullToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        NullToken,$/;"	e	enum:GenericReader::Token
Number	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Number = 16,$/;"	m	class:ccls::SymbolKind
Number	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    union Number {$/;"	u	class:GenericValue
Number	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    struct Number {$/;"	s	class:internal::Hasher
NumberStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        NumberStream(GenericReader& reader, InputStream& s) : Base(reader, s) {}$/;"	f	class:GenericReader::NumberStream
NumberStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        NumberStream(GenericReader& reader, InputStream& s) : Base(reader, s), stackStream(reader.stack_) {}$/;"	f	class:GenericReader::NumberStream
NumberStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        NumberStream(GenericReader& reader, InputStream& s) : is(s) { (void)reader;  }$/;"	f	class:GenericReader::NumberStream
NumberStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    class NumberStream<InputStream, StackCharacter, false, false> {$/;"	c	class:GenericReader
NumberStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    class NumberStream<InputStream, StackCharacter, true, false> : public NumberStream<InputStream, StackCharacter, false, false> {$/;"	c	class:GenericReader
NumberStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    class NumberStream<InputStream, StackCharacter, true, true> : public NumberStream<InputStream, StackCharacter, true, false> {$/;"	c	class:GenericReader
NumberToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        NumberToken,$/;"	e	enum:GenericReader::Token
NumbersAsStringsHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    NumbersAsStringsHandler(const char* expected)$/;"	f	struct:NumbersAsStringsHandler
NumbersAsStringsHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct NumbersAsStringsHandler {$/;"	s	file:
NumbersAsStringsHandlerWChar_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  NumbersAsStringsHandlerWChar_t(const wchar_t* expected)$/;"	f	struct:NumbersAsStringsHandlerWChar_t
NumbersAsStringsHandlerWChar_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct NumbersAsStringsHandlerWChar_t {$/;"	s	file:
OStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^typedef BasicOStreamWrapper<std::ostream> OStreamWrapper;$/;"	t
OStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    OStreamWrapper(std::ostream& os) : os_(os) {}$/;"	f	class:OStreamWrapper
OStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^class OStreamWrapper {$/;"	c	file:
OStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    OStreamWrapper(std::ostream& os) : os_(os) {}$/;"	f	class:OStreamWrapper
OStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^class OStreamWrapper {$/;"	c	file:
OUTPUT_LENGTH	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	355;"	d	file:
ObjC	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  ObjC = 2,$/;"	m	class:ccls::MessageType::LanguageId
ObjCpp	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  ObjCpp = 3,$/;"	m	class:ccls::MessageType::LanguageId
Object	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Object = 19,$/;"	m	class:ccls::SymbolKind
Object	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericObject<false, ValueT> Object;$/;"	t	class:GenericObject
Object	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericObject<false, ValueType> Object;$/;"	t	class:GenericValue
ObjectData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct ObjectData {$/;"	s	class:GenericValue
ObjectEmpty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool ObjectEmpty() const { RAPIDJSON_ASSERT(IsObject()); return data_.o.size == 0; }$/;"	f	class:GenericValue
ObjectEmpty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool ObjectEmpty() const { return value_.ObjectEmpty(); }$/;"	f	class:GenericObject
ObjectType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::ConstObject ObjectType;$/;"	t	struct:internal::TypeHelper
ObjectType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::Object ObjectType;$/;"	t	struct:internal::TypeHelper
Off	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    Off,      \/\/ off$/;"	m	class:ccls::__anon17::TextDocumentSyncKind::InitializeParam::Trace	file:
Offset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    size_t Offset() const { return offset_; }$/;"	f	struct:ParseResult
OnChange	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  OnChange,$/;"	m	class:ccls::IndexMode
Open	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    static FILE* Open(const char* filename) {$/;"	f	class:EncodedStreamTest
Open	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^static bool Open(FileStreamType& fs, const char* filename) {$/;"	f	file:
OpenEncodedFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^static FILE* OpenEncodedFile(const char* filename) {$/;"	f	file:
Operator	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Operator = 25,$/;"	m	class:ccls::SymbolKind
Operator	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Operator = 24,$/;"	m	class:ccls::CompletionItemKind
Operator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    enum Operator {$/;"	g	class:internal::GenericRegex
Option	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct Option {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::DidChangeWatchedFilesRegistration	file:
OptionClass	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^enum OptionClass {$/;"	g	namespace:ccls::__anon33	file:
OrExpr	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename C1, typename C2> struct OrExpr  : OrExprCond<C1::Value, C2::Value>::Type {};$/;"	s	namespace:internal
OrExprCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <> struct OrExprCond<false, false> : FalseType {};$/;"	s	namespace:internal
OrExprCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Cond1, bool Cond2> struct OrExprCond : TrueType {};$/;"	s	namespace:internal
Other	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharClass { Other, Lower, Upper };$/;"	e	enum:ccls::__anon3::CharClass	file:
Out_cclsCall	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^struct Out_cclsCall {$/;"	s	class:ccls::__anon9::CallType	file:
Out_cclsInfo	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^struct Out_cclsInfo {$/;"	s	namespace:ccls::__anon10	file:
Out_cclsInheritance	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^struct Out_cclsInheritance {$/;"	s	namespace:ccls::__anon11	file:
Out_cclsMember	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^struct Out_cclsMember {$/;"	s	namespace:ccls::__anon12	file:
OutputStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^struct OutputStringStream : public std::ostringstream {$/;"	s	file:
Override	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    typedef typename internal::SelectIf<internal::IsSame<Derived, void>, BaseReaderHandler, Derived>::Type Override;$/;"	t	struct:BaseReaderHandler
PERFTEST_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	16;"	d
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	339;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	342;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	345;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	351;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	354;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	357;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	360;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	363;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	366;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	384;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	387;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	390;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	405;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	412;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	415;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	418;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	421;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	424;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	429;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	432;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	436;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	363;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	366;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	369;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	372;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	375;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	378;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	381;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	384;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	387;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	390;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	393;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	406;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	417;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	421;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	339;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	342;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	345;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	351;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	354;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	357;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	360;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	363;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	366;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	384;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	387;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	390;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	393;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	396;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	399;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	402;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	405;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	408;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	412;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	415;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	418;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	421;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	424;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	429;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	432;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	436;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	363;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	366;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	369;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	372;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	375;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	378;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	381;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	384;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	387;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	390;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	393;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	397;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	403;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	406;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	409;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	417;"	d	file:
PLATFORM_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	421;"	d	file:
PRIX16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	118;"	d
PRIX32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	131;"	d
PRIX64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	144;"	d
PRIX8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	105;"	d
PRIXFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	126;"	d
PRIXFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	139;"	d
PRIXFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	152;"	d
PRIXFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	113;"	d
PRIXLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	122;"	d
PRIXLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	135;"	d
PRIXLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	148;"	d
PRIXLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	109;"	d
PRIXMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	157;"	d
PRIXPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	162;"	d
PRId16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	74;"	d
PRId32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	81;"	d
PRId64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	88;"	d
PRId8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	67;"	d
PRIdFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	78;"	d
PRIdFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	85;"	d
PRIdFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	92;"	d
PRIdFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	71;"	d
PRIdLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	76;"	d
PRIdLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	83;"	d
PRIdLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	90;"	d
PRIdLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	69;"	d
PRIdMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	95;"	d
PRIdPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	98;"	d
PRIi16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	75;"	d
PRIi32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	82;"	d
PRIi64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	89;"	d
PRIi8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	68;"	d
PRIiFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	79;"	d
PRIiFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	86;"	d
PRIiFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	93;"	d
PRIiFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	72;"	d
PRIiLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	77;"	d
PRIiLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	84;"	d
PRIiLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	91;"	d
PRIiLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	70;"	d
PRIiMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	96;"	d
PRIiPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	99;"	d
PRIo16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	115;"	d
PRIo32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	128;"	d
PRIo64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	141;"	d
PRIo8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	102;"	d
PRIoFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	123;"	d
PRIoFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	136;"	d
PRIoFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	149;"	d
PRIoFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	110;"	d
PRIoLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	119;"	d
PRIoLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	132;"	d
PRIoLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	145;"	d
PRIoLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	106;"	d
PRIoMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	154;"	d
PRIoPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	159;"	d
PRIu16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	116;"	d
PRIu32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	129;"	d
PRIu64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	142;"	d
PRIu8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	103;"	d
PRIuFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	124;"	d
PRIuFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	137;"	d
PRIuFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	150;"	d
PRIuFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	111;"	d
PRIuLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	120;"	d
PRIuLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	133;"	d
PRIuLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	146;"	d
PRIuLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	107;"	d
PRIuMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	155;"	d
PRIuPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	160;"	d
PRIx16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	117;"	d
PRIx32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	130;"	d
PRIx64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	143;"	d
PRIx8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	104;"	d
PRIxFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	125;"	d
PRIxFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	138;"	d
PRIxFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	151;"	d
PRIxFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	112;"	d
PRIxLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	121;"	d
PRIxLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	134;"	d
PRIxLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	147;"	d
PRIxLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	108;"	d
PRIxMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	156;"	d
PRIxPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	161;"	d
PTRDIFF_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	239;"	d
PTRDIFF_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	242;"	d
PTRDIFF_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	238;"	d
PTRDIFF_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	241;"	d
Package	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Package = 4,$/;"	m	class:ccls::SymbolKind
Pair	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        typedef std::pair<const Data, SizeType> Pair;$/;"	t	struct:GenericValue::MapTraits
Param	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^struct Param : TextDocumentPositionParam {$/;"	s	class:ccls::__anon9::CallType	file:
Param	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^struct Param : TextDocumentPositionParam {$/;"	s	namespace:ccls::__anon11	file:
Param	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^struct Param : TextDocumentPositionParam {$/;"	s	namespace:ccls::__anon12	file:
Param	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^struct Param {$/;"	s	namespace:ccls::__anon13	file:
Param	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_reload.cc	/^struct Param {$/;"	s	namespace:ccls::__anon14	file:
Param	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_vars.cc	/^struct Param : TextDocumentPositionParam {$/;"	s	namespace:ccls::__anon15	file:
Parameter	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Parameter = 253,$/;"	m	class:ccls::SymbolKind
ParameterInformation	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^struct ParameterInformation {$/;"	s	namespace:ccls::__anon29	file:
Parent	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_inherit.cc	/^class Parent {};$/;"	c	file:
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    void Parse() {$/;"	f	class:AsyncDocumentParser	file:
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Parse(const Ch* str) {$/;"	f	class:GenericDocument
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Parse(const Ch* str, size_t length) {$/;"	f	class:GenericDocument
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Parse(const std::basic_string<Ch>& str) {$/;"	f	class:GenericDocument
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Parse(const std::basic_string<typename SourceEncoding::Ch>& str) {$/;"	f	class:GenericDocument
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Parse(const typename SourceEncoding::Ch* str) {$/;"	f	class:GenericDocument
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Parse(const typename SourceEncoding::Ch* str, size_t length) {$/;"	f	class:GenericDocument
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    void Parse(DecodedStream<InputStream, Encoding>& ds) {$/;"	f	class:internal::GenericRegex
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    void Parse(const Ch* source, size_t length) {$/;"	f	class:GenericPointer
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    ParseResult Parse(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
Parse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    void Parse(const Ch* uri, std::size_t len) {$/;"	f	class:GenericUri
ParseArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseArray(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseArrayHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseArrayHandler() : step_(0) {}$/;"	f	struct:ParseArrayHandler
ParseArrayHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseArrayHandler : BaseReaderHandler<UTF8<>, ParseArrayHandler<count> > {$/;"	s	file:
ParseBoolHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseBoolHandler() : step_(0) {}$/;"	f	struct:ParseBoolHandler
ParseBoolHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseBoolHandler : BaseReaderHandler<UTF8<>, ParseBoolHandler<expect> > {$/;"	s	file:
ParseCheck	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^void ParseCheck(DocumentType& doc) {$/;"	f
ParseDoubleHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseDoubleHandler() : step_(0), actual_() {}$/;"	f	struct:ParseDoubleHandler
ParseDoubleHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseDoubleHandler : BaseReaderHandler<UTF8<>, ParseDoubleHandler> {$/;"	s	file:
ParseEmptyObjectHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseEmptyObjectHandler() : step_(0) {}$/;"	f	struct:ParseEmptyObjectHandler
ParseEmptyObjectHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseEmptyObjectHandler : BaseReaderHandler<UTF8<>, ParseEmptyObjectHandler> {$/;"	s	file:
ParseError	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  ParseError = -32700,$/;"	m	class:ccls::ErrorCode
ParseErrorCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^enum ParseErrorCode {$/;"	g
ParseFalse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseFalse(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^enum ParseFlag {$/;"	g
ParseHex4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    unsigned ParseHex4(InputStream& is, size_t escapeOffset) {$/;"	f	class:GenericReader
ParseIncludeLine	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^ParseIncludeLineResult ParseIncludeLine(const std::string &line) {$/;"	f	namespace:ccls::__anon20
ParseIncludeLineResult	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^struct ParseIncludeLineResult {$/;"	s	namespace:ccls::__anon20	file:
ParseInsitu	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& ParseInsitu(Ch* str) {$/;"	f	class:GenericDocument
ParseInt64Handler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseInt64Handler() : step_(0), actual_() {}$/;"	f	struct:ParseInt64Handler
ParseInt64Handler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseInt64Handler : BaseReaderHandler<UTF8<>, ParseInt64Handler> {$/;"	s	file:
ParseIntHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseIntHandler() : step_(0), actual_() {}$/;"	f	struct:ParseIntHandler
ParseIntHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseIntHandler : BaseReaderHandler<UTF8<>, ParseIntHandler> {$/;"	s	file:
ParseMessages	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^static void ParseMessages(const char* json, MessageMap& messages) {$/;"	f	file:
ParseMultipleRootHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseMultipleRootHandler() : step_(0) {}$/;"	f	struct:ParseMultipleRootHandler
ParseMultipleRootHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseMultipleRootHandler : BaseReaderHandler<UTF8<>, ParseMultipleRootHandler> {$/;"	s	file:
ParseNext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^void LookaheadParserHandler::ParseNext() {$/;"	f	class:LookaheadParserHandler
ParseNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseNull(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseNumber(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseObject(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseObjectHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseObjectHandler() : step_(0) {}$/;"	f	struct:ParseObjectHandler
ParseObjectHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseObjectHandler : BaseReaderHandler<UTF8<>, ParseObjectHandler> {$/;"	s	file:
ParsePart	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    void ParsePart(const char* buffer, size_t length) {$/;"	f	class:AsyncDocumentParser
ParseRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool ParseRange(DecodedStream<InputStream, Encoding>& ds, SizeType* range) {$/;"	f	class:internal::GenericRegex
ParseResult	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    ParseResult() : code_(kParseErrorNone), offset_(0) {}$/;"	f	struct:ParseResult
ParseResult	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    ParseResult(ParseErrorCode code, size_t offset) : code_(code), offset_(offset) {}$/;"	f	struct:ParseResult
ParseResult	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^struct ParseResult {$/;"	s
ParseStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& ParseStream(InputStream& is) {$/;"	f	class:GenericDocument
ParseString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseString(InputStream& is, Handler& handler, bool isKey = false) {$/;"	f	class:GenericReader
ParseStringHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseStringHandler() : str_(0), length_(0), copy_() {}$/;"	f	struct:ParseStringHandler
ParseStringHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseStringHandler : BaseReaderHandler<Encoding, ParseStringHandler<Encoding> > {$/;"	s	file:
ParseStringToStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE void ParseStringToStream(InputStream& is, OutputStream& os) {$/;"	f	class:GenericReader
ParseTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^void ParseTest() {$/;"	f
ParseTrue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseTrue(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
ParseUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    static uint64_t ParseUint64(const Ch* begin, const Ch* end) {$/;"	f	class:internal::BigInteger
ParseUint64Handler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseUint64Handler() : step_(0), actual_() {}$/;"	f	struct:ParseUint64Handler
ParseUint64Handler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseUint64Handler : BaseReaderHandler<UTF8<>, ParseUint64Handler> {$/;"	s	file:
ParseUintHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ParseUintHandler() : step_(0), actual_() {}$/;"	f	struct:ParseUintHandler
ParseUintHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct ParseUintHandler : BaseReaderHandler<UTF8<>, ParseUintHandler> {$/;"	s	file:
ParseUnsigned	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool ParseUnsigned(DecodedStream<InputStream, Encoding>& ds, unsigned* u) {$/;"	f	class:internal::GenericRegex
ParseValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void ParseValue(InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
Patch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    void Patch(SizeType l, SizeType s) {$/;"	f	class:internal::GenericRegex
PatternProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        PatternProperty() : schema(), pattern() {}$/;"	f	struct:internal::Schema::PatternProperty
PatternProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    struct PatternProperty {$/;"	s	class:internal::Schema
PatternValidatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    enum PatternValidatorType {$/;"	g	struct:internal::SchemaValidationContext
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        char Peek() const {$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Peek() const { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:AutoUTFOutputStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Peek() const { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:EncodedOutputStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Peek() const { return current_; }$/;"	f	class:AutoUTFInputStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Peek() const { return current_; }$/;"	f	class:EncodedInputStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Peek() const { return is_.Peek(); }$/;"	f	class:EncodedInputStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    Ch Peek() const { return *current_; }$/;"	f	class:FileReadStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    char Peek() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    unsigned Peek() { return codepoint_; }$/;"	f	class:internal::DecodedStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch Peek() const { return *current_; }$/;"	f	class:BasicIStreamWrapper
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    Ch Peek() const { return RAPIDJSON_UNLIKELY(src_ == end_) ? '\\0' : *src_; }$/;"	f	struct:MemoryStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    char Peek() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch Peek() const { return is.Peek(); }$/;"	f	class:GenericReader::NumberStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch Peek() const { return *src_; }$/;"	f	struct:GenericStringStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch Peek() const { return is_.Peek(); }$/;"	f	class:GenericStreamWrapper
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch Peek() { return *src_; }$/;"	f	struct:GenericInsituStringStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    Ch Peek() const { assert(false); return '\\0'; }$/;"	f	class:OStreamWrapper
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    Ch Peek() const { return *src_; }$/;"	f	class:CustomStringStream
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    Ch Peek() const {$/;"	f	class:IStreamWrapper
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  Ch Peek() const {$/;"	f	class:WIStreamWrapper
Peek	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    Ch Peek() const { assert(false); return '\\0'; }$/;"	f	class:OStreamWrapper
Peek4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    const Ch* Peek4() const {$/;"	f	class:FileReadStream
Peek4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    const Ch* Peek4() const {$/;"	f	class:BasicIStreamWrapper
Peek4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    const Ch* Peek4() const {$/;"	f	struct:MemoryStream
Peek4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    const Ch* Peek4() const { return is_.Peek4(); }$/;"	f	class:GenericStreamWrapper
PeekType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^int LookaheadParser::PeekType() {$/;"	f	class:LookaheadParser
PeekValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^Value* LookaheadParser::PeekValue() {$/;"	f	class:LookaheadParser
PercentDecodeStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        PercentDecodeStream(const Ch* source, const Ch* end) : src_(source), head_(source), end_(end), valid_(true) {}$/;"	f	class:GenericPointer::PercentDecodeStream
PercentDecodeStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    class PercentDecodeStream {$/;"	c	class:GenericPointer
PercentEncodeStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        PercentEncodeStream(OutputStream& os) : os_(os) {}$/;"	f	class:GenericPointer::PercentEncodeStream
PercentEncodeStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    class PercentEncodeStream {$/;"	c	class:GenericPointer
PerfTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    PerfTest() : filename_(), json_(), length_(), whitespace_(), whitespace_length_() {}$/;"	f	class:PerfTest
PerfTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^class PerfTest : public ::testing::Test {$/;"	c
Person	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Person(const Person& rhs) : name_(rhs.name_), age_(rhs.age_) {}$/;"	f	class:Person
Person	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Person(const std::string& name, unsigned age) : name_(name), age_(age) {}$/;"	f	class:Person
Person	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^class Person {$/;"	c	file:
Pipeline	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  struct Pipeline {$/;"	s	struct:ccls::__anon10::Out_cclsInfo	file:
PlainText	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^enum class InsertTextFormat { PlainText = 1, Snippet = 2 };$/;"	m	class:ccls::InsertTextFormat
PlainType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericMember<Encoding,Allocator> PlainType;$/;"	t	class:GenericMemberIterator
PlainType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef ValueT PlainType;$/;"	t	class:GenericArray
PlainType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef ValueT PlainType;$/;"	t	class:GenericObject
Platform	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^class Platform : public PerfTest {$/;"	c	file:
Pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef pointer         Pointer;$/;"	t	class:GenericMemberIterator
Pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericPointer<Value, CrtAllocator> Pointer;$/;"	t
Pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typedef GenericPointer<Value> Pointer;$/;"	t
Pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^        > Pointer;$/;"	t	namespace:myjson	file:
PointerParseErrorCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^enum PointerParseErrorCode {$/;"	g
PointerType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericPointer<ValueType, Allocator> PointerType;$/;"	t	class:GenericSchemaDocument
PointerType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::PointerType PointerType;$/;"	t	class:GenericSchemaValidator
PointerType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::PointerType PointerType;$/;"	t	class:SchemaValidatingReader
PointerType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::PointerType PointerType;$/;"	t	class:internal::Schema
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    T* Pop(size_t count) {$/;"	f	class:internal::Stack
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    void Pop(size_t count) { stack_.template Pop<Ch>(count); }$/;"	f	struct:GenericMemoryBuffer
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        Ch* Pop() {$/;"	f	class:GenericReader::StackStream
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        const StackCharacter* Pop() { return 0; }$/;"	f	class:GenericReader::NumberStream
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        const StackCharacter* Pop() {$/;"	f	class:GenericReader::NumberStream
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Pop(size_t count) { dst_ -= count; }$/;"	f	struct:GenericInsituStringStream
Pop	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void Pop(size_t count) { stack_.template Pop<Ch>(count); }$/;"	f	class:GenericStringBuffer
PopBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray PopBack() const { value_.PopBack(); return *this; }$/;"	f	class:GenericArray
PopBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& PopBack() {$/;"	f	class:GenericValue
PopSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE void PopSchema() {$/;"	f	class:GenericSchemaValidator
Populate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericDocument& Populate(Generator& g) {$/;"	f	class:GenericDocument
Pos	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^struct Pos {$/;"	s	namespace:ccls
Position	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct Position {$/;"	s	namespace:ccls
Pow10	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/pow10.h	/^inline double Pow10(int n) {$/;"	f	namespace:internal
PreambleData	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  PreambleData(clang::PrecompiledPreamble p, IncludeStructure includes,$/;"	f	struct:clang::ccls::PreambleData
PreambleData	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^struct PreambleData {$/;"	s	namespace:clang::ccls	file:
PreambleStatCache	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^struct PreambleStatCache {$/;"	s	namespace:clang::ccls	file:
PreambleTask	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  struct PreambleTask {$/;"	s	struct:ccls::SemaManager
Predict	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE IterativeParsingState Predict(IterativeParsingState state, Token token) const {$/;"	f	class:GenericReader
Prefix	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    void Prefix(Type type) {$/;"	f	class:Writer
Prettify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline char* Prettify(char* buffer, int length, int k, int maxDecimalPlaces) {$/;"	f	namespace:internal
PrettyFormatOptions	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^enum PrettyFormatOptions {$/;"	g
PrettyPrefix	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    void PrettyPrefix(Type type) {$/;"	f	class:PrettyWriter
PrettyWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    PrettyWriter(PrettyWriter&& rhs) :$/;"	f	class:PrettyWriter
PrettyWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    explicit PrettyWriter(OutputStream& os, StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : $/;"	f	class:PrettyWriter
PrettyWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    explicit PrettyWriter(StackAllocator* allocator = 0, size_t levelDepth = Base::kDefaultLevelDepth) : $/;"	f	class:PrettyWriter
PrettyWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^class PrettyWriter : public Writer<OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags> {$/;"	c
Print	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    void Print(std::ostream& os) const {$/;"	f	class:Box
Print	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    void Print(std::ostream& os) const {$/;"	f	class:Circle
Print	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    void Print(std::ostream& os) {$/;"	f	class:Canvas
PrintInvalidDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^inline void PrintInvalidDocument(const char* document) {$/;"	f	namespace:internal
PrintInvalidDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^inline void PrintInvalidDocument(const wchar_t* document) {$/;"	f	namespace:internal
PrintInvalidKeyword	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^inline void PrintInvalidKeyword(const char* keyword) {$/;"	f	namespace:internal
PrintInvalidKeyword	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^inline void PrintInvalidKeyword(const wchar_t* keyword) {$/;"	f	namespace:internal
PrintValidatorPointers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^inline void PrintValidatorPointers(unsigned depth, const char* s, const char* d) {$/;"	f	namespace:internal
PrintValidatorPointers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^inline void PrintValidatorPointers(unsigned depth, const wchar_t* s, const wchar_t* d) {$/;"	f	namespace:internal
Project	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  struct Project {$/;"	s	struct:ccls::__anon10::Out_cclsInfo	file:
Project	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^struct Project {$/;"	s	namespace:ccls
ProjectProcessor	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  ProjectProcessor(Project::Folder &folder) : folder(folder) {$/;"	f	struct:ccls::__anon33::ProjectProcessor
ProjectProcessor	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^struct ProjectProcessor {$/;"	s	namespace:ccls::__anon33	file:
Property	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Property = 7,$/;"	m	class:ccls::SymbolKind
Property	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Property = 10,$/;"	m	class:ccls::CompletionItemKind
Property	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        Property() : schema(), dependenciesSchema(), dependenciesValidatorIndex(), dependencies(), required(false) {}$/;"	f	struct:internal::Schema::Property
Property	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    struct Property {$/;"	s	class:internal::Schema
PropertyViolations	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void PropertyViolations(ISchemaValidator** subvalidators, SizeType count) {$/;"	f	class:GenericSchemaValidator
ProxyFileSystem	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  explicit ProxyFileSystem(IntrusiveRefCntPtr<FileSystem> FS)$/;"	f	struct:clang::vfs::ProxyFileSystem
ProxyFileSystem	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^struct ProxyFileSystem : FileSystem {$/;"	s	namespace:clang::vfs	file:
PublishDiagnosticParam	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^struct PublishDiagnosticParam {$/;"	s	namespace:ccls::__anon31	file:
PublishDiagnostics	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct PublishDiagnostics {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	file:
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    RAPIDJSON_FORCEINLINE T* Push(size_t count = 1) {$/;"	f	class:internal::Stack
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    Ch* Push(size_t count) { return stack_.template Push<Ch>(count); }$/;"	f	struct:GenericMemoryBuffer
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void Push(StackCharacter c) {$/;"	f	class:GenericReader::NumberStream
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void Push(char) {}$/;"	f	class:GenericReader::NumberStream
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void* Push(SizeType count) {$/;"	f	class:GenericReader::StackStream
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* Push(size_t count) { Ch* begin = dst_; dst_ += count; return begin; }$/;"	f	struct:GenericInsituStringStream
Push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    Ch* Push(size_t count) { return stack_.template Push<Ch>(count); }$/;"	f	class:GenericStringBuffer
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray PushBack(StringRefType value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray PushBack(ValueType& value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray PushBack(ValueType&& value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& PushBack(GenericValue& value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& PushBack(GenericValue&& value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& PushBack(StringRefType value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    PushBack(T value, Allocator& allocator) {$/;"	f	class:GenericValue
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (const GenericArray&)) PushBack(T value, AllocatorType& allocator) const { value_.PushBack(value, allocator); return *this; }$/;"	f	class:GenericArray
PushBack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    void PushBack(Type digit) {$/;"	f	class:internal::BigInteger
PushOperand	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    void PushOperand(Stack<Allocator>& operandStack, unsigned codepoint) {$/;"	f	class:internal::GenericRegex
PushSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RAPIDJSON_FORCEINLINE void PushSchema(const SchemaType& schema) { new (schemaStack_.template Push<Context>()) Context(*this, *this, &schema); }$/;"	f	class:GenericSchemaValidator
PushUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    RAPIDJSON_FORCEINLINE T* PushUnsafe(size_t count = 1) {$/;"	f	class:internal::Stack
PushUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    Ch* PushUnsafe(size_t count) { return stack_.template PushUnsafe<Ch>(count); }$/;"	f	class:GenericStringBuffer
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        void Put(char) {}$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Put(Ch c) { Encoding::Put(os_, c);  }$/;"	f	class:EncodedOutputStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Put(Ch c) { putFunc_(*os_, c); }$/;"	f	class:AutoUTFOutputStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:AutoUTFInputStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:EncodedInputStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void Put(Ch) {}$/;"	f	class:EncodedInputStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, Ch c) {$/;"	f	struct:ASCII
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, Ch c) {$/;"	f	struct:UTF8
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF16BE
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF16LE
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF32BE
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void Put(OutputByteStream& os, CharType c) {$/;"	f	struct:UTF32LE
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:FileReadStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    void Put(char c) { $/;"	f	class:FileWriteStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:BasicIStreamWrapper
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    void Put(Ch c) { *stack_.template Push<Ch>() = c; }$/;"	f	struct:GenericMemoryBuffer
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	struct:MemoryStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    void Put(Ch c) {$/;"	f	class:BasicOStreamWrapper
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        void Put(char c) { \/\/ UTF-8 must be byte$/;"	f	class:GenericPointer::PercentEncodeStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE void Put(Ch c) {$/;"	f	class:GenericReader::StackStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Put(Ch c) { RAPIDJSON_ASSERT(dst_ != 0); *dst_++ = c; }$/;"	f	struct:GenericInsituStringStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Put(Ch ch) { is_.Put(ch); }$/;"	f	class:GenericStreamWrapper
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	struct:GenericStringStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void Put(Ch c) { *stack_.template Push<Ch>() = c; }$/;"	f	class:GenericStringBuffer
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    void Put(Ch) { \/*++length_;*\/ }$/;"	f	struct:NullStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^    void Put(char c) {$/;"	f	struct:OutputStringStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    void Put(Ch c) { os_.put(c); }$/;"	f	class:OStreamWrapper
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    void Put(Ch) { RAPIDJSON_ASSERT(false); }$/;"	f	class:CustomStringStream
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    void Put(Ch) { assert(false); }$/;"	f	class:IStreamWrapper
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  void Put(Ch) { assert(false); }$/;"	f	class:WIStreamWrapper
Put	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    void Put(Ch c) { os_.put(c); }$/;"	f	class:OStreamWrapper
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    void PutBOM() { $/;"	f	class:AutoUTFOutputStream
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:ASCII
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF16BE
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF16LE
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF32BE
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF32LE
PutBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static void PutBOM(OutputByteStream& os) {$/;"	f	struct:UTF8
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        char* PutBegin() { return 0; }$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFInputStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFOutputStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedInputStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedOutputStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch* PutBegin() { return 0; }$/;"	f	class:EncodedInputStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileReadStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    char* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicIStreamWrapper
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:MemoryStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    char* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:GenericStringStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* PutBegin() { return dst_ = src_; }$/;"	f	struct:GenericInsituStringStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* PutBegin() { return is_.PutBegin(); }$/;"	f	class:GenericStreamWrapper
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    Ch* PutBegin() { assert(false); return 0; }$/;"	f	class:OStreamWrapper
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    Ch* PutBegin() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:CustomStringStream
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    Ch* PutBegin() { assert(false); return 0; }$/;"	f	class:IStreamWrapper
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  Ch* PutBegin() { assert(false); return 0; }$/;"	f	class:WIStreamWrapper
PutBegin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    Ch* PutBegin() { assert(false); return 0; }$/;"	f	class:OStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        size_t PutEnd(char*) { return 0; }$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFInputStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFOutputStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedInputStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:EncodedOutputStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t PutEnd(Ch*) { return 0; }$/;"	f	class:EncodedInputStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileReadStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    size_t PutEnd(char*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicIStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:MemoryStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    size_t PutEnd(char*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    size_t PutEnd(Ch* begin) { return static_cast<size_t>(dst_ - begin); }$/;"	f	struct:GenericInsituStringStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    size_t PutEnd(Ch* ch) { return is_.PutEnd(ch); }$/;"	f	class:GenericStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	struct:GenericStringStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    size_t PutEnd(Ch*) { assert(false); return 0; }$/;"	f	class:OStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t PutEnd(Ch*) { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:CustomStringStream
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t PutEnd(Ch*) { assert(false); return 0; }$/;"	f	class:IStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  size_t PutEnd(Ch*) { assert(false); return 0; }$/;"	f	class:WIStreamWrapper
PutEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    size_t PutEnd(Ch*) { assert(false); return 0; }$/;"	f	class:OStreamWrapper
PutFunc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef void (*PutFunc)(OutputByteStream&, Ch);$/;"	t	class:AutoUTFOutputStream
PutN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    void PutN(char c, size_t n) {$/;"	f	class:FileWriteStream
PutN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^inline void PutN(FileWriteStream& stream, char c, size_t n) {$/;"	f
PutN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^inline void PutN(MemoryBuffer& memoryBuffer, char c, size_t n) {$/;"	f
PutN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^inline void PutN(Stream& stream, Ch c, size_t n) {$/;"	f
PutN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^inline void PutN(GenericStringBuffer<UTF8<> >& stream, char c, size_t n) {$/;"	f
PutReserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^inline void PutReserve(Stream& stream, size_t count) {$/;"	f
PutReserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^inline void PutReserve(GenericStringBuffer<Encoding, Allocator>& stream, size_t count) {$/;"	f
PutUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^inline void PutUnsafe(Stream& stream, typename Stream::Ch c) {$/;"	f
PutUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void PutUnsafe(Ch c) { *stack_.template PushUnsafe<Ch>() = c; }$/;"	f	class:GenericStringBuffer
PutUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^inline void PutUnsafe(GenericStringBuffer<Encoding, Allocator>& stream, typename Encoding::Ch c) {$/;"	f
QueryEntity	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^template <typename Q, typename QDef> struct QueryEntity {$/;"	s	namespace:ccls
QueryFile	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct QueryFile {$/;"	s	namespace:ccls
QueryFunc	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct QueryFunc : QueryEntity<QueryFunc, FuncDef<Vec>> {$/;"	s	namespace:ccls
QueryType	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct QueryType : QueryEntity<QueryType, TypeDef<Vec>> {$/;"	s	namespace:ccls
QueryVar	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^struct QueryVar : QueryEntity<QueryVar, VarDef> {$/;"	s	namespace:ccls
RAPIDJSON_48BITPOINTER_OPTIMIZATION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	336;"	d
RAPIDJSON_48BITPOINTER_OPTIMIZATION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	338;"	d
RAPIDJSON_64BIT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	290;"	d
RAPIDJSON_64BIT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	292;"	d
RAPIDJSON_ALIGN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	307;"	d
RAPIDJSON_ALLOCATORS_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	16;"	d
RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	71;"	d
RAPIDJSON_ASSERT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	437;"	d
RAPIDJSON_ASSERT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	124;"	d
RAPIDJSON_ASSERT_THROWS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	126;"	d
RAPIDJSON_BIGENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	230;"	d
RAPIDJSON_BIGINTEGER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	16;"	d
RAPIDJSON_CLZLL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/clzll.h	66;"	d
RAPIDJSON_CLZLL_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/clzll.h	16;"	d
RAPIDJSON_COPY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	147;"	d
RAPIDJSON_COPY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	173;"	d
RAPIDJSON_COPY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	180;"	d
RAPIDJSON_COPY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	199;"	d
RAPIDJSON_CPLUSPLUS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	133;"	d
RAPIDJSON_CPLUSPLUS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	135;"	d
RAPIDJSON_CURSORSTREAMWRAPPER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	16;"	d
RAPIDJSON_DEFAULT_ALLOCATOR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	78;"	d
RAPIDJSON_DEFAULT_STACK_ALLOCATOR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	88;"	d
RAPIDJSON_DELETE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	716;"	d
RAPIDJSON_DELIBERATE_FALLTHROUGH	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	653;"	d
RAPIDJSON_DIAG_OFF	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	542;"	d
RAPIDJSON_DIAG_POP	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	548;"	d
RAPIDJSON_DIAG_PRAGMA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	541;"	d
RAPIDJSON_DIAG_PUSH	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	547;"	d
RAPIDJSON_DISABLEIF	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	160;"	d
RAPIDJSON_DISABLEIF_RETURN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	169;"	d
RAPIDJSON_DIYFP_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	20;"	d
RAPIDJSON_DOCUMENT_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	16;"	d
RAPIDJSON_DO_JOIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	55;"	d
RAPIDJSON_DO_JOIN2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	56;"	d
RAPIDJSON_DO_STRINGIFY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	51;"	d
RAPIDJSON_DTOA_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	20;"	d
RAPIDJSON_ENABLEIF	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	156;"	d
RAPIDJSON_ENABLEIF_RETURN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	164;"	d
RAPIDJSON_ENCODEDSTREAM_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	16;"	d
RAPIDJSON_ENCODINGS_FUNC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	127;"	d
RAPIDJSON_ENCODINGS_FUNC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	287;"	d
RAPIDJSON_ENCODINGS_FUNC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	620;"	d
RAPIDJSON_ENCODINGS_FUNC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	650;"	d
RAPIDJSON_ENCODINGS_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	16;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	249;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	251;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	259;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	261;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	267;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	269;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	272;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	274;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	276;"	d
RAPIDJSON_ENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	278;"	d
RAPIDJSON_ERROR_CHARTYPE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	39;"	d
RAPIDJSON_ERROR_EN_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/en.h	16;"	d
RAPIDJSON_ERROR_ERROR_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	16;"	d
RAPIDJSON_ERROR_STRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	52;"	d
RAPIDJSON_FILEREADSTREAM_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	16;"	d
RAPIDJSON_FILEWRITESTREAM_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	16;"	d
RAPIDJSON_FORCEINLINE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	218;"	d
RAPIDJSON_FORCEINLINE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	220;"	d
RAPIDJSON_FORCEINLINE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	222;"	d
RAPIDJSON_FREE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	704;"	d
RAPIDJSON_FWD_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	16;"	d
RAPIDJSON_GETPOINTER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	347;"	d
RAPIDJSON_GETPOINTER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	350;"	d
RAPIDJSON_GNUC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	534;"	d
RAPIDJSON_HAS_BUILTIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	525;"	d
RAPIDJSON_HAS_CXX11	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	576;"	d
RAPIDJSON_HAS_CXX11_NOEXCEPT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	605;"	d
RAPIDJSON_HAS_CXX11_NOEXCEPT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	121;"	d
RAPIDJSON_HAS_CXX11_RANGE_FOR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	635;"	d
RAPIDJSON_HAS_CXX11_RVALUE_REFS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	581;"	d
RAPIDJSON_HAS_CXX11_TYPETRAITS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	627;"	d
RAPIDJSON_HAS_CXX17	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	649;"	d
RAPIDJSON_HAS_STDSTRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/schemavalidator/schemavalidator.cpp	5;"	d	file:
RAPIDJSON_HAS_STDSTRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	145;"	d
RAPIDJSON_HAS_STDSTRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	147;"	d
RAPIDJSON_HAS_STDSTRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	36;"	d
RAPIDJSON_HAS_STDSTRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	16;"	d	file:
RAPIDJSON_HAS_STDSTRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	16;"	d	file:
RAPIDJSON_IEEE754_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	16;"	d
RAPIDJSON_INTERNAL_META_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	16;"	d
RAPIDJSON_INTERNAL_REGEX_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	16;"	d
RAPIDJSON_INTERNAL_STACK_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	16;"	d
RAPIDJSON_INTERNAL_STRFUNC_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	16;"	d
RAPIDJSON_INTERNAL_SWAP_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/swap.h	16;"	d
RAPIDJSON_INVALID_KEYWORD_RETURN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	118;"	d
RAPIDJSON_INVALID_KEYWORD_VERBOSE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	113;"	d
RAPIDJSON_ISTREAMWRAPPER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	16;"	d
RAPIDJSON_ITOA_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	16;"	d
RAPIDJSON_JOIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	54;"	d
RAPIDJSON_LIKELY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	492;"	d
RAPIDJSON_LITTLEENDIAN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	229;"	d
RAPIDJSON_MAJOR_VERSION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	75;"	d
RAPIDJSON_MALLOC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	696;"	d
RAPIDJSON_MEMORYBUFFER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	16;"	d
RAPIDJSON_MEMORYSTREAM_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	16;"	d
RAPIDJSON_MINOR_VERSION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	76;"	d
RAPIDJSON_MULTILINEMACRO_BEGIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	516;"	d
RAPIDJSON_MULTILINEMACRO_END	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	517;"	d
RAPIDJSON_NAMESPACE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	118;"	d
RAPIDJSON_NAMESPACE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/namespacetest.cpp	19;"	d	file:
RAPIDJSON_NAMESPACE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	28;"	d	file:
RAPIDJSON_NAMESPACE_BEGIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	121;"	d
RAPIDJSON_NAMESPACE_BEGIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/namespacetest.cpp	20;"	d	file:
RAPIDJSON_NAMESPACE_END	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	124;"	d
RAPIDJSON_NAMESPACE_END	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/namespacetest.cpp	21;"	d	file:
RAPIDJSON_NEON	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	33;"	d
RAPIDJSON_NEON	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	25;"	d	file:
RAPIDJSON_NEW	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	712;"	d
RAPIDJSON_NOEXCEPT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericStringRef(const CharType (&str)[N]) RAPIDJSON_NOEXCEPT$/;"	m	struct:GenericStringRef
RAPIDJSON_NOEXCEPT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	618;"	d
RAPIDJSON_NOEXCEPT_ASSERT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	685;"	d
RAPIDJSON_NOTHING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	58;"	d
RAPIDJSON_NO_INT64DEFINE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	208;"	d
RAPIDJSON_NO_SIZETYPEDEFINE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	407;"	d
RAPIDJSON_OSTREAMWRAPPER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	16;"	d
RAPIDJSON_PARSE_DEFAULT_FLAGS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	140;"	d
RAPIDJSON_PARSE_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	119;"	d
RAPIDJSON_PARSE_ERROR_EARLY_RETURN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	60;"	d
RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	65;"	d
RAPIDJSON_PARSE_ERROR_NORETURN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	100;"	d
RAPIDJSON_PATCH_VERSION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	77;"	d
RAPIDJSON_POINTER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	16;"	d
RAPIDJSON_POW10_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/pow10.h	16;"	d
RAPIDJSON_PRAGMA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	540;"	d
RAPIDJSON_PRETTYWRITER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	16;"	d
RAPIDJSON_RAPIDJSON_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	16;"	d
RAPIDJSON_READER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	16;"	d
RAPIDJSON_REALLOC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	700;"	d
RAPIDJSON_REGEX_VERBOSE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	37;"	d
RAPIDJSON_REMOVEFPTR_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	152;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2355;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2443;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2345;"	d
RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2442;"	d
RAPIDJSON_SCHEMA_HANDLE_END_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2375;"	d
RAPIDJSON_SCHEMA_HANDLE_PARALLEL_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2363;"	d
RAPIDJSON_SCHEMA_HANDLE_PARALLEL_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2444;"	d
RAPIDJSON_SCHEMA_HANDLE_VALUE_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2379;"	d
RAPIDJSON_SCHEMA_HANDLE_VALUE_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2445;"	d
RAPIDJSON_SCHEMA_HAS_REGEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	44;"	d
RAPIDJSON_SCHEMA_HAS_REGEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	46;"	d
RAPIDJSON_SCHEMA_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	16;"	d
RAPIDJSON_SCHEMA_USE_INTERNALREGEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	26;"	d
RAPIDJSON_SCHEMA_USE_INTERNALREGEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	28;"	d
RAPIDJSON_SCHEMA_USE_STDREGEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	32;"	d
RAPIDJSON_SCHEMA_USE_STDREGEX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	34;"	d
RAPIDJSON_SCHEMA_VERBOSE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	50;"	d
RAPIDJSON_SCHEMA_VERBOSE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	15;"	d	file:
RAPIDJSON_SCHEMA_VERBOSE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	15;"	d	file:
RAPIDJSON_SETPOINTER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	346;"	d
RAPIDJSON_SETPOINTER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	349;"	d
RAPIDJSON_SIMD	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	384;"	d
RAPIDJSON_SSE2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	31;"	d
RAPIDJSON_SSE2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	23;"	d	file:
RAPIDJSON_SSE42	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	29;"	d
RAPIDJSON_SSE42	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	21;"	d	file:
RAPIDJSON_STATIC_ASSERT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	446;"	d
RAPIDJSON_STATIC_ASSERT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	476;"	d
RAPIDJSON_STATIC_ASSERT_UNUSED_ATTRIBUTE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	463;"	d
RAPIDJSON_STREAM_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	18;"	d
RAPIDJSON_STRINGBUFFER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	16;"	d
RAPIDJSON_STRINGIFY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	50;"	d
RAPIDJSON_STRING_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	1126;"	d
RAPIDJSON_STRING_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	1177;"	d
RAPIDJSON_STRING_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2324;"	d
RAPIDJSON_STRING_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	2342;"	d
RAPIDJSON_STRTOD_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	16;"	d
RAPIDJSON_TAIL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	149;"	d
RAPIDJSON_TAIL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	175;"	d
RAPIDJSON_TAIL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	182;"	d
RAPIDJSON_TAIL	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	201;"	d
RAPIDJSON_TRANS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	148;"	d
RAPIDJSON_TRANS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	174;"	d
RAPIDJSON_TRANS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	181;"	d
RAPIDJSON_TRANS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	200;"	d
RAPIDJSON_UINT64_C2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	320;"	d
RAPIDJSON_UNLIKELY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	505;"	d
RAPIDJSON_URI_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	16;"	d
RAPIDJSON_USE_MEMBERSMAP	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	180;"	d
RAPIDJSON_VALIDATE_DEFAULT_FLAGS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	136;"	d
RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	110;"	d
RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	99;"	d
RAPIDJSON_VERSION_CODE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	521;"	d
RAPIDJSON_VERSION_STRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	78;"	d
RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	3040;"	d
RAPIDJSON_WINDOWS_GETOBJECT_WORKAROUND_APPLIED	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	50;"	d
RAPIDJSON_WRITER_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	16;"	d
RAPIDJSON_WRITE_DEFAULT_FLAGS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	62;"	d
REFLECT_MEMBER	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	135;"	d
REFLECT_MEMBER2	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	136;"	d
REFLECT_STRUCT	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	163;"	d
REFLECT_UNDERLYING	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	138;"	d
REFLECT_UNDERLYING_B	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	149;"	d
REMOTES	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^REMOTES = {$/;"	v
REMOTES_DIR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^REMOTES_DIR = os.path.join(ROOT_DIR, "remotes")$/;"	v
REMOVE_ADD	/home/yl/vim/vim/ccls/ccls/src/query.cc	249;"	d	file:
REMOVE_ADD	/home/yl/vim/vim/ccls/ccls/src/query.cc	403;"	d	file:
ROOT_DIR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^ROOT_DIR = os.path.join($/;"	v
ROTL	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	26;"	d	file:
Random	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^    Random(unsigned seed = 0) : mSeed(seed) {}$/;"	f	class:Random
Random	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^class Random {$/;"	c
Range	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^struct Range {$/;"	s	namespace:ccls
Range	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    struct Range {$/;"	s	class:internal::GenericRegex
Range	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    typedef typename RegexType::Range Range;$/;"	t	class:internal::GenericRegexSearch
RapidJson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    RapidJson() : temp_(), doc_() {}$/;"	f	class:RapidJson
RapidJson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^class RapidJson : public PerfTest {$/;"	c	file:
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool RawNumber(const char* str, SizeType length, bool copy) { return out_.RawNumber(str, length, copy); }$/;"	f	struct:CapitalizeFilter
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool RawNumber(const Ch* str, SizeType len, bool copy) { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.RawNumber(str, len, copy) && EndValue(); }$/;"	f	class:FilterKeyHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool RawNumber(const Ch* str, SizeType len, bool copy) { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.RawNumber(str, len, copy) && EndValue(); }$/;"	f	class:FilterKeyHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool RawNumber(const char* str, SizeType length, bool) {$/;"	f	class:JsonxWriter
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool RawNumber(const char*, SizeType, bool) { return false; }$/;"	f	class:LookaheadParserHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool RawNumber(const char* str, SizeType length, bool) { type = "Number:"; data = std::string(str, length); return true; }$/;"	f	struct:MyHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool RawNumber(const char* str, SizeType length, bool copy) { $/;"	f	struct:MyHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy) { $/;"	f	class:GenericDocument
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:PrettyWriter
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool RawNumber(const Ch* str, SizeType len, bool copy) { return static_cast<Override&>(*this).String(str, len, copy); }$/;"	f	struct:BaseReaderHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool RawNumber(const Ch* str, SizeType len, bool) {$/;"	f	class:internal::Hasher
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy)$/;"	f	class:GenericSchemaValidator
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool RawNumber(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:Writer
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool RawNumber(const char*, SizeType, bool) { return true; }$/;"	f	struct:NoOpHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool RawNumber(const Ch*, SizeType, bool) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_STRING; return true; }$/;"	f	struct:IterativeParsingReaderHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool RawNumber(const char* str, SizeType length, bool) {$/;"	f	struct:NumbersAsStringsHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool RawNumber(const char*, SizeType, bool) { return e != 7; }$/;"	f	struct:TerminateHandler
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool RawNumber(const wchar_t* str, SizeType length, bool) {$/;"	f	struct:NumbersAsStringsHandlerWChar_t
RawNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool RawNumber(const char*, SizeType, bool) { return e != 7; }$/;"	f	struct:TerminateHandler
RawValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool RawValue(const Ch* json, size_t length, Type type) {$/;"	f	class:PrettyWriter
RawValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool RawValue(const Ch* json, size_t length, Type type) {$/;"	f	class:Writer
Read	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Read = 1 << 3,$/;"	m	class:ccls::Role
Read	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  enum Kind { Text = 1, Read = 2, Write = 3 };$/;"	e	enum:ccls::__anon21::DocumentHighlight::Kind	file:
Read	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    void Read() {$/;"	f	class:FileReadStream
Read	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    void Read() {$/;"	f	class:BasicIStreamWrapper
ReadFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^static char* ReadFile(const char* filename, Allocator& allocator) {$/;"	f	file:
ReadFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    static char *ReadFile(const char* filename, bool appendPath, size_t* outLength) {$/;"	f	class:EncodedStreamTest
ReadFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^static char* ReadFile(const char* filename, size_t& length) {$/;"	f	file:
ReadFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^static char* ReadFile(const char* filename, Allocator& allocator) {$/;"	f	file:
Reader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericReader<UTF8<char>, UTF8<char>, CrtAllocator> Reader;$/;"	t
Reader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^typedef GenericReader<UTF8<>, UTF8<> > Reader;$/;"	t
Realloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {$/;"	f	class:CrtAllocator
Realloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void* Realloc(void* originalPtr, size_t originalSize, size_t newSize) {$/;"	f	class:MemoryPoolAllocator
Realloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void* Realloc(void* originalPtr, size_t originalSize, size_t newSize)$/;"	f	class:StdAllocator
Realloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^inline T* Realloc(A& a, T* old_p, size_t old_n, size_t new_n)$/;"	f
Realloc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^    void * Realloc(void *_org_p, size_t _org_size, size_t _new_size) { (void)_org_size; return realloc(_org_p, _new_size); }$/;"	f	class:myjson::MyAllocator
Ref	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct Ref {$/;"	s	namespace:ccls
Reference	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Reference = 1 << 2,$/;"	m	class:ccls::Role
Reference	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Reference = 18,$/;"	m	class:ccls::CompletionItemKind
Reference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef reference       Reference;$/;"	t	class:GenericMemberIterator
ReferenceParam	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^struct ReferenceParam : public TextDocumentPositionParam {$/;"	s	namespace:ccls::__anon27	file:
Regex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^typedef GenericRegex<UTF8<> > Regex;$/;"	t	namespace:internal
RegexSearch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^typedef GenericRegexSearch<Regex> RegexSearch;$/;"	t	namespace:internal
RegexType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        typedef char RegexType;$/;"	t	class:internal::Schema
RegexType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        typedef internal::GenericRegex<EncodingType, AllocatorType> RegexType;$/;"	t	class:internal::Schema
RegexType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        typedef std::basic_regex<Ch> RegexType;$/;"	t	class:internal::Schema
Register	/home/yl/vim/vim/ccls/ccls/index_tests/outline/static_function_in_type.cc	/^void Foo::Register(Manager* m) {$/;"	f	class:ns::Foo
RegistrationParam	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct RegistrationParam {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
RemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    RemoteSchemaDocumentProvider() : $/;"	f	class:RemoteSchemaDocumentProvider
RemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^class RemoteSchemaDocumentProvider : public IGenericRemoteSchemaDocumentProvider<SchemaDocumentType> {$/;"	c	file:
RemoveAllMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void RemoveAllMembers() { value_.RemoveAllMembers(); }$/;"	f	class:GenericObject
RemoveAllMembers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void RemoveAllMembers() {$/;"	f	class:GenericValue
RemoveConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst { typedef T Type; };$/;"	s	namespace:internal
RemoveConst	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst<const T> { typedef T Type; };$/;"	s	namespace:internal
RemoveDotSegments	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    void RemoveDotSegments() {$/;"	f	class:GenericUri
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator RemoveMember(MemberIterator m) const { return value_.RemoveMember(m); }$/;"	f	class:GenericObject
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator RemoveMember(MemberIterator m) {$/;"	f	class:GenericValue
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool RemoveMember(const Ch* name) const { return value_.RemoveMember(name); }$/;"	f	class:GenericObject
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool RemoveMember(const Ch* name) {$/;"	f	class:GenericValue
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool RemoveMember(const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool RemoveMember(const std::basic_string<Ch>& name) const { return value_.RemoveMember(name); }$/;"	f	class:GenericObject
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool RemoveMember(const std::basic_string<Ch>& name) { return RemoveMember(GenericValue(StringRef(name))); }$/;"	f	class:GenericValue
RemoveMember	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename SourceAllocator> bool RemoveMember(const GenericValue<EncodingType, SourceAllocator>& name) const { return value_.RemoveMember(name); }$/;"	f	class:GenericObject
RemoveSfinaeTag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct RemoveSfinaeTag<SfinaeTag&(*)(T)> { typedef T Type; };$/;"	s	namespace:internal
RenameParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct RenameParam {$/;"	s	namespace:ccls
Replacement	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^  struct Replacement {$/;"	s	struct:ccls::TextReplacer	file:
ReplyOnce	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct ReplyOnce {$/;"	s	class:ccls::InsertTextFormat
Request	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Request {$/;"	s	struct:ccls::Config
RequestCancelled	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  RequestCancelled = -32800,$/;"	m	class:ccls::ErrorCode
RequestId	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct RequestId {$/;"	s	namespace:ccls
Reserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray Reserve(SizeType newCapacity, AllocatorType &allocator) const { value_.Reserve(newCapacity, allocator); return *this; }$/;"	f	class:GenericArray
Reserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& Reserve(SizeType newCapacity, Allocator &allocator) {$/;"	f	class:GenericValue
Reserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    RAPIDJSON_FORCEINLINE void Reserve(size_t count = 1) {$/;"	f	class:internal::Stack
Reserve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void Reserve(size_t count) { stack_.template Reserve<Ch>(count); }$/;"	f	class:GenericStringBuffer
Reset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void Reset() {$/;"	f	class:GenericSchemaValidator
Reset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    void Reset(OutputStream& os) {$/;"	f	class:Writer
Reset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void Reset(OutputStream& os) {$/;"	f	class:Writer1
Reset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void Reset(OutputStream& os) {$/;"	f	class:Writer2
Reset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void Reset(OutputStream& os) {$/;"	f	class:Writer3
Reset	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void Reset(OutputStream& os) {$/;"	f	class:Writer4
ResetError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void ResetError() {$/;"	f	class:GenericSchemaValidator
Resize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    void Resize(size_t newCapacity) {$/;"	f	class:internal::Stack
Resolve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri Resolve(const GenericUri& baseuri, Allocator* allocator = 0) {$/;"	f	class:GenericUri
ResponseError	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct ResponseError {$/;"	s	namespace:ccls
ReturnSchemaDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^static SchemaDocument ReturnSchemaDocument() {$/;"	f	file:
RightBracketToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RightBracketToken,$/;"	e	enum:GenericReader::Token
RightCurlyBracketToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RightCurlyBracketToken,$/;"	e	enum:GenericReader::Token
Role	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^enum class Role : uint16_t {$/;"	c	namespace:ccls
Root	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/class_multiple_inherit.cc	/^class Root {};$/;"	c	file:
Root	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/function_override.cc	/^class Root {$/;"	c	file:
Runner	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_reference.cc	/^void Runner() {$/;"	f
S	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter.cc	/^struct S {};$/;"	s	file:
S	/home/yl/vim/vim/ccls/ccls/index_tests/vars/type_instance_on_using_type.cc	/^struct S {};$/;"	s	file:
SCNX16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	221;"	d
SCNX32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	234;"	d
SCNX64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	247;"	d
SCNX8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	208;"	d
SCNXFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	229;"	d
SCNXFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	242;"	d
SCNXFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	255;"	d
SCNXFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	216;"	d
SCNXLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	225;"	d
SCNXLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	238;"	d
SCNXLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	251;"	d
SCNXLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	212;"	d
SCNXMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	260;"	d
SCNXPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	266;"	d
SCNXPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	271;"	d
SCNd16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	172;"	d
SCNd32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	179;"	d
SCNd64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	186;"	d
SCNd8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	165;"	d
SCNdFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	176;"	d
SCNdFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	183;"	d
SCNdFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	190;"	d
SCNdFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	169;"	d
SCNdLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	174;"	d
SCNdLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	181;"	d
SCNdLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	188;"	d
SCNdLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	167;"	d
SCNdMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	193;"	d
SCNdPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	197;"	d
SCNdPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	200;"	d
SCNi16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	173;"	d
SCNi32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	180;"	d
SCNi64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	187;"	d
SCNi8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	166;"	d
SCNiFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	177;"	d
SCNiFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	184;"	d
SCNiFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	191;"	d
SCNiFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	170;"	d
SCNiLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	175;"	d
SCNiLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	182;"	d
SCNiLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	189;"	d
SCNiLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	168;"	d
SCNiMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	194;"	d
SCNiPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	198;"	d
SCNiPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	201;"	d
SCNo16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	218;"	d
SCNo32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	231;"	d
SCNo64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	244;"	d
SCNo8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	205;"	d
SCNoFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	226;"	d
SCNoFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	239;"	d
SCNoFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	252;"	d
SCNoFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	213;"	d
SCNoLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	222;"	d
SCNoLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	235;"	d
SCNoLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	248;"	d
SCNoLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	209;"	d
SCNoMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	257;"	d
SCNoPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	263;"	d
SCNoPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	268;"	d
SCNu16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	219;"	d
SCNu32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	232;"	d
SCNu64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	245;"	d
SCNu8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	206;"	d
SCNuFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	227;"	d
SCNuFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	240;"	d
SCNuFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	253;"	d
SCNuFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	214;"	d
SCNuLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	223;"	d
SCNuLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	236;"	d
SCNuLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	249;"	d
SCNuLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	210;"	d
SCNuMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	258;"	d
SCNuPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	264;"	d
SCNuPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	269;"	d
SCNx16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	220;"	d
SCNx32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	233;"	d
SCNx64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	246;"	d
SCNx8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	207;"	d
SCNxFAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	228;"	d
SCNxFAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	241;"	d
SCNxFAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	254;"	d
SCNxFAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	215;"	d
SCNxLEAST16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	224;"	d
SCNxLEAST32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	237;"	d
SCNxLEAST64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	250;"	d
SCNxLEAST8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	211;"	d
SCNxMAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	259;"	d
SCNxPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	265;"	d
SCNxPTR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	270;"	d
SIG_ATOMIC_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	246;"	d
SIG_ATOMIC_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	245;"	d
SIMD_SUFFIX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	32;"	d	file:
SIMD_SUFFIX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	34;"	d	file:
SIMD_SUFFIX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	36;"	d	file:
SIMD_SUFFIX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	38;"	d	file:
SIMD_SUFFIX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	43;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
SIMULATE_ID	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	216;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	216;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
SIMULATE_VERSION_MAJOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
SIMULATE_VERSION_MINOR	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
SIMULATE_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
SIMULATE_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
SIMULATE_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
SIMULATE_VERSION_PATCH	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
SIPROUND	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	44;"	d	file:
SIZEOF_CHUNK_HEADER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const size_t SIZEOF_CHUNK_HEADER = RAPIDJSON_ALIGN(sizeof(ChunkHeader));$/;"	m	class:MemoryPoolAllocator
SIZEOF_SHARED_DATA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const size_t SIZEOF_SHARED_DATA = RAPIDJSON_ALIGN(sizeof(SharedData));$/;"	m	class:MemoryPoolAllocator
SIZE_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	250;"	d
SIZE_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	252;"	d
STACK	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	206;"	d	file:
STACK	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	27;"	d	file:
STATIC_ASSERTION_FAILURE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };$/;"	s
STREAM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	214;"	d	file:
STREAM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	291;"	d	file:
STRINGIFY	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
STRINGIFY	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	320;"	d	file:
STRINGIFY	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
STRINGIFY	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	320;"	d	file:
STRINGIFY_HELPER	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
STRINGIFY_HELPER	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
STRINGIFY_HELPER	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
STRINGIFY_HELPER	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
SUITE_ROOT_DIR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^SUITE_ROOT_DIR = os.path.join(ROOT_DIR, "tests")$/;"	v
SValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericValue<EncodingType, AllocatorType> SValue;$/;"	t	class:GenericSchemaDocument
SValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericValue<EncodingType, AllocatorType> SValue;$/;"	t	class:internal::Schema
SValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaType::SValue SValue;$/;"	t	class:GenericSchemaValidator
SValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaType::SValue SValue;$/;"	t	class:internal::IValidationErrorHandler
SameFileDerived	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/header.h	/^struct SameFileDerived : Base {};$/;"	s
SanityTests	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^class SanityTests(unittest.TestCase):$/;"	c
SaveOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct SaveOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
ScanCopyUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InputStream&, OutputStream&) {$/;"	f	class:GenericReader
ScanCopyUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(InsituStringStream& is, InsituStringStream& os) {$/;"	f	class:GenericReader
ScanCopyUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void ScanCopyUnescapedString(StringStream& is, StackStream<char>& os) {$/;"	f	class:GenericReader
ScanCopyUnescapedStringHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^struct ScanCopyUnescapedStringHandler : BaseReaderHandler<UTF8<>, ScanCopyUnescapedStringHandler> {$/;"	s	file:
ScanLineEvent	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^struct ScanLineEvent {$/;"	s	namespace:ccls::__anon7	file:
ScanWriteUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool ScanWriteUnescapedString(GenericStringStream<SourceEncoding>& is, size_t length) {$/;"	f	class:Writer
ScanWriteUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^inline bool Writer<StringBuffer>::ScanWriteUnescapedString(StringStream& is, size_t length) {$/;"	f	class:Writer
Schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Schema(SchemaDocumentType* schemaDocument, const PointerType& p, const ValueType& value, const ValueType& document, AllocatorType* allocator, const UriType& id = UriType()) :$/;"	f	class:internal::Schema
Schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class Schema {$/;"	c	namespace:internal
Schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    Schema() {}$/;"	f	class:Schema
Schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^class Schema : public PerfTest {$/;"	c	file:
SchemaArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SchemaArray() : schemas(), count() {}$/;"	f	struct:internal::Schema::SchemaArray
SchemaArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    struct SchemaArray {$/;"	s	class:internal::Schema
SchemaDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericSchemaDocument<Value, CrtAllocator> SchemaDocument;$/;"	t
SchemaDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^typedef GenericSchemaDocument<Value> SchemaDocument;$/;"	t
SchemaEntry	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SchemaEntry(const PointerType& p, SchemaType* s, bool o, Allocator* allocator) : pointer(p, allocator), schema(s), owned(o) {}$/;"	f	struct:GenericSchemaDocument::SchemaEntry
SchemaEntry	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    struct SchemaEntry {$/;"	s	class:GenericSchemaDocument
SchemaRefPtr	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef const PointerType* SchemaRefPtr; \/\/ PR #1393$/;"	t	class:GenericSchemaDocument
SchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef Schema<SchemaDocumentType> SchemaType;$/;"	t	class:internal::Schema
SchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef Schema<SchemaDocumentType> SchemaType;$/;"	t	struct:internal::SchemaValidationContext
SchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef internal::Schema<GenericSchemaDocument> SchemaType;$/;"	t	class:GenericSchemaDocument
SchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::SchemaType SchemaType;$/;"	t	class:GenericSchemaValidator
SchemaValidatingReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaValidatingReader(InputStream& is, const SchemaDocumentType& sd) : is_(is), sd_(sd), invalidSchemaKeyword_(), invalidSchemaCode_(kValidateErrorNone), error_(kObjectType), isValid_(true) {}$/;"	f	class:SchemaValidatingReader
SchemaValidatingReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^class SchemaValidatingReader {$/;"	c
SchemaValidationContext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaValidationContext(SchemaValidatorFactoryType& f, ErrorHandlerType& eh, const SchemaType* s) :$/;"	f	struct:internal::SchemaValidationContext
SchemaValidationContext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^struct SchemaValidationContext {$/;"	s	namespace:internal
SchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericSchemaValidator<SchemaDocument, BaseReaderHandler<UTF8<char>, void>, CrtAllocator> SchemaValidator;$/;"	t
SchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^typedef GenericSchemaValidator<SchemaDocument> SchemaValidator;$/;"	t
SchemaValidatorFactoryType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef ISchemaStateFactory<SchemaType> SchemaValidatorFactoryType;$/;"	t	struct:internal::SchemaValidationContext
SchemaValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    enum SchemaValueType {$/;"	g	class:internal::Schema
Search	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool Search(InputStream& is) {$/;"	f	class:internal::GenericRegexSearch
Search	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool Search(const Ch* s) {$/;"	f	class:internal::GenericRegexSearch
SearchWithAnchoring	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool SearchWithAnchoring(InputStream& is, bool anchorBegin, bool anchorEnd) {$/;"	f	class:internal::GenericRegexSearch
Segoe UI Emoji	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	s
Segoe UI Symbol	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	s
SelectIf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename C, typename T1, typename T2> struct SelectIf : SelectIfCond<C::Value, T1, T2> {};$/;"	s	namespace:internal
SelectIfCond	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool C, typename T1, typename T2> struct SelectIfCond : SelectIfImpl<C>::template Apply<T1,T2> {};$/;"	s	namespace:internal
SelectIfImpl	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <> struct SelectIfImpl<false> { template <typename T1, typename T2> struct Apply { typedef T2 Type; }; };$/;"	s	namespace:internal
SelectIfImpl	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool C> struct SelectIfImpl { template <typename T1, typename T2> struct Apply { typedef T1 Type; }; };$/;"	s	namespace:internal
SemaManager	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^SemaManager::SemaManager(Project *project, WorkingFiles *wfiles,$/;"	f	class:clang::ccls::SemaManager
SemaManager	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^struct SemaManager {$/;"	s	namespace:ccls
Separate	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  Separate,$/;"	e	enum:ccls::__anon33::OptionClass	file:
Serialize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    void Serialize(Writer& writer) const {$/;"	f	class:Dependent
Serialize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    void Serialize(Writer& writer) const {$/;"	f	class:Education
Serialize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    void Serialize(Writer& writer) const {$/;"	f	class:Employee
Serialize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    void Serialize(Writer& writer) const {$/;"	f	class:Person
SerializeFormat	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^enum class SerializeFormat { Binary, Json };$/;"	c	namespace:ccls
ServerCap	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct ServerCap {$/;"	s	struct:ccls::Config
ServerCap	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct ServerCap {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
ServerInfo	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct ServerInfo {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult	file:
ServerNotInitialized	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  ServerNotInitialized = -32002,$/;"	m	class:ccls::ErrorCode
Session	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Session {$/;"	s	struct:ccls::Config
Session	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  Session(const Project::Entry &file, WorkingFiles *wfiles,$/;"	f	struct:ccls::Session
Session	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^struct Session {$/;"	s	namespace:ccls
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueType& Set(const T& data) { return internal::TypeHelper<ValueType, T>::Set(*this, data); }$/;"	f	class:GenericValue
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueType& Set(const T& data, AllocatorType& allocator) { return internal::TypeHelper<ValueType, T>::Set(*this, data, allocator); }$/;"	f	class:GenericValue
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ArrayType data) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ArrayType data, typename ValueType::AllocatorType&) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ObjectType data) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, ObjectType data, typename ValueType::AllocatorType&) { return v = data; }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, bool data) { return v.SetBool(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, bool data, typename ValueType::AllocatorType&) { return v.SetBool(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, const StringType data) { return v.SetString(typename ValueType::StringRefType(data)); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, const StringType data, typename ValueType::AllocatorType& a) { return v.SetString(data, a); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, const StringType& data, typename ValueType::AllocatorType& a) { return v.SetString(data, a); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, double data) { return v.SetDouble(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, double data, typename ValueType::AllocatorType&) { return v.SetDouble(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, float data) { return v.SetFloat(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, float data, typename ValueType::AllocatorType&) { return v.SetFloat(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int data) { return v.SetInt(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int data, typename ValueType::AllocatorType&) { return v.SetInt(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int64_t data) { return v.SetInt64(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, int64_t data, typename ValueType::AllocatorType&) { return v.SetInt64(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, long data) { return v.SetInt(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, long data, typename ValueType::AllocatorType&) { return v.SetInt(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, uint64_t data) { return v.SetUint64(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, uint64_t data, typename ValueType::AllocatorType&) { return v.SetUint64(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, unsigned data) { return v.SetUint(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, unsigned data, typename ValueType::AllocatorType&) { return v.SetUint(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, unsigned long data) { return v.SetUint(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static ValueType& Set(ValueType& v, unsigned long data, typename ValueType::AllocatorType&) { return v.SetUint(data); }$/;"	f	struct:internal::TypeHelper
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    void Set(ParseErrorCode code, size_t offset = 0) { code_ = code; offset_ = offset; }$/;"	f	struct:ParseResult
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, T value) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Set(ValueType& root, T value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, ValueType& value) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const Ch* value) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const ValueType& value) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, const std::basic_string<Ch>& value) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, ValueType& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, const Ch* value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, const ValueType& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
Set	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Set(ValueType& root, const std::basic_string<Ch>& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
SetArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetArray() { this->~GenericValue(); new (this) GenericValue(kArrayType); return *this; }$/;"	f	class:GenericValue
SetArrayRaw	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void SetArrayRaw(GenericValue* values, SizeType count, Allocator& allocator) {$/;"	f	class:GenericValue
SetBase	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    void SetBase() {$/;"	f	class:GenericUri
SetBool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetBool(bool b) { this->~GenericValue(); new (this) GenericValue(b); return *this; }$/;"	f	class:GenericValue
SetDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetDouble(double d)       { this->~GenericValue(); new (this) GenericValue(d);    return *this; }$/;"	f	class:GenericValue
SetElementsPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE GenericValue* SetElementsPointer(GenericValue* elements) { return RAPIDJSON_SETPOINTER(GenericValue, data_.a.elements, elements); }$/;"	f	class:GenericValue
SetFloat	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetFloat(float f)         { this->~GenericValue(); new (this) GenericValue(static_cast<double>(f)); return *this; }$/;"	f	class:GenericValue
SetFormatOptions	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    PrettyWriter& SetFormatOptions(PrettyFormatOptions options) {$/;"	f	class:PrettyWriter
SetIndent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    PrettyWriter& SetIndent(Ch indentChar, unsigned indentCharCount) {$/;"	f	class:PrettyWriter
SetInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetInt(int i)             { this->~GenericValue(); new (this) GenericValue(i);    return *this; }$/;"	f	class:GenericValue
SetInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetInt64(int64_t i64)     { this->~GenericValue(); new (this) GenericValue(i64);  return *this; }$/;"	f	class:GenericValue
SetLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        inline void     SetLength(SizeType len) { str[LenPos] = static_cast<Ch>(MaxSize -  len); }$/;"	f	struct:GenericValue::ShortString
SetMaxDecimalPlaces	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    void SetMaxDecimalPlaces(int maxDecimalPlaces) {$/;"	f	class:Writer
SetMembersPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE Member* SetMembersPointer(Member* members) { return RAPIDJSON_SETPOINTER(Member, data_.o.members, members); }$/;"	f	class:GenericValue
SetNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::SetNull() {$/;"	f	class:JsonReader
SetNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::SetNull() {$/;"	f	class:JsonWriter
SetNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetNull() { this->~GenericValue(); new (this) GenericValue(); return *this; }$/;"	f	class:GenericValue
SetObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetObject() { this->~GenericValue(); new (this) GenericValue(kObjectType); return *this; }$/;"	f	class:GenericValue
SetObjectRaw	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void SetObjectRaw(Member* members, SizeType count, Allocator& allocator) {$/;"	f	class:GenericValue
SetParseError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void SetParseError(ParseErrorCode code, size_t offset) { parseResult_.Set(code, offset); }$/;"	f	class:GenericReader
SetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetString(StringRefType s) { this->~GenericValue(); SetStringRaw(s); return *this; }$/;"	f	class:GenericValue
SetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetString(StringRefType s, Allocator& allocator) { this->~GenericValue(); SetStringRaw(s, allocator); return *this; }$/;"	f	class:GenericValue
SetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetString(const Ch* s, Allocator& allocator) { return SetString(StringRef(s), allocator); }$/;"	f	class:GenericValue
SetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetString(const Ch* s, SizeType length) { return SetString(StringRef(s, length)); }$/;"	f	class:GenericValue
SetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetString(const Ch* s, SizeType length, Allocator& allocator) { return SetString(StringRef(s, length), allocator); }$/;"	f	class:GenericValue
SetString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetString(const std::basic_string<Ch>& s, Allocator& allocator) { return SetString(StringRef(s), allocator); }$/;"	f	class:GenericValue
SetStringPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_FORCEINLINE const Ch* SetStringPointer(const Ch* str) { return RAPIDJSON_SETPOINTER(Ch, data_.s.str, str); }$/;"	f	class:GenericValue
SetStringRaw	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    void SetStringRaw(StringRefType s, Allocator& allocator) {$/;"	f	class:GenericValue
SetUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetUint(unsigned u)       { this->~GenericValue(); new (this) GenericValue(u);    return *this; }$/;"	f	class:GenericValue
SetUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& SetUint64(uint64_t u64)   { this->~GenericValue(); new (this) GenericValue(u64);  return *this; }$/;"	f	class:GenericValue
SetUp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    virtual void SetUp() {$/;"	f	class:PerfTest
SetUp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^    virtual void SetUp() {$/;"	f	class:Platform
SetUp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    virtual void SetUp() {$/;"	f	class:RapidJson
SetUp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    virtual void SetUp() {$/;"	f	class:Schema
SetUp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    virtual void SetUp() {$/;"	f	class:EncodedStreamTest
SetUp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    virtual void SetUp() {$/;"	f	class:FileStreamTest
SetUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    void SetUri() {$/;"	f	class:GenericUri
SetValidateFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void SetValidateFlags(unsigned flags) {$/;"	f	class:GenericSchemaValidator
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^SetValueByPointer(DocumentType& document, const CharType(&source)[N], T2 value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, T2 value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^SetValueByPointer(T& root, const CharType(&source)[N], T2 value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, T2 value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], const std::basic_string<typename DocumentType::Ch>& value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], const typename DocumentType::Ch* value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], const typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const CharType(&source)[N], typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const std::basic_string<typename DocumentType::Ch>& value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::Ch* value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, const typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SetValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, typename DocumentType::ValueType& value) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], const std::basic_string<typename T::Ch>& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], const typename T::Ch* value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], const typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const CharType(&source)[N], typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const std::basic_string<typename T::Ch>& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::Ch* value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, const typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SetValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SetValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SfinaeTag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^struct SfinaeTag {};$/;"	s	namespace:internal
Shape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Shape() : x_(), y_() {}$/;"	f	class:Shape
Shape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Shape(double x, double y) : x_(x), y_(y) {}$/;"	f	class:Shape
Shape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^class Shape {$/;"	c	file:
SharedData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    struct SharedData {$/;"	s	class:MemoryPoolAllocator
ShortString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct ShortString {$/;"	s	class:GenericValue
ShowMessageParam	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct ShowMessageParam {$/;"	s	class:ccls::MessageType
ShrinkToFit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    void ShrinkToFit() { $/;"	f	class:internal::Stack
ShrinkToFit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    void ShrinkToFit() { stack_.ShrinkToFit(); }$/;"	f	struct:GenericMemoryBuffer
ShrinkToFit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    void ShrinkToFit() {$/;"	f	class:GenericStringBuffer
Sign	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    bool Sign() const { return (u_ & kSignMask) != 0; }$/;"	f	class:internal::Double
SignatureHelp	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^struct SignatureHelp {$/;"	s	namespace:ccls::__anon29	file:
SignatureHelpConsumer	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  SignatureHelpConsumer(const clang::CodeCompleteOptions &opts, bool from_cache)$/;"	f	class:ccls::__anon29::SignatureHelpConsumer
SignatureHelpConsumer	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^class SignatureHelpConsumer : public CodeCompleteConsumer {$/;"	c	namespace:ccls::__anon29	file:
SignatureHelpOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct SignatureHelpOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
SignatureInformation	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^struct SignatureInformation {$/;"	s	namespace:ccls::__anon29	file:
Significand	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    uint64_t Significand() const { return u_ & kSignificandMask; }$/;"	f	class:internal::Double
Size	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType Size() const { RAPIDJSON_ASSERT(IsArray()); return data_.a.size; }$/;"	f	class:GenericValue
Size	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    SizeType Size() const { return value_.Size(); }$/;"	f	class:GenericArray
SizeType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^typedef unsigned SizeType;$/;"	t
SkipArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^void LookaheadParser::SkipArray() {$/;"	f	class:LookaheadParser
SkipObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^void LookaheadParser::SkipObject() {$/;"	f	class:LookaheadParser
SkipOut	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^void LookaheadParser::SkipOut(int depth) {$/;"	f	class:LookaheadParser
SkipUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    static RAPIDJSON_FORCEINLINE void SkipUnescapedString(InsituStringStream& is) {$/;"	f	class:GenericReader
SkipValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^void LookaheadParser::SkipValue() {$/;"	f	class:LookaheadParser
SkipWhitespace	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^inline const char* SkipWhitespace(const char* p, const char* end) {$/;"	f
SkipWhitespace	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^template<> inline void SkipWhitespace(EncodedInputStream<UTF8<>, MemoryStream>& is) {$/;"	f
SkipWhitespace	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^template<> inline void SkipWhitespace(InsituStringStream& is) {$/;"	f
SkipWhitespace	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^template<> inline void SkipWhitespace(StringStream& is) {$/;"	f
SkipWhitespace	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^void SkipWhitespace(InputStream& is) {$/;"	f
SkipWhitespaceAndComments	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    void SkipWhitespaceAndComments(InputStream& is) {$/;"	f	class:GenericReader
SkipWhitespace_SIMD	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^inline const char *SkipWhitespace_SIMD(const char* p) {$/;"	f
SkipWhitespace_SIMD	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^inline const char *SkipWhitespace_SIMD(const char* p, const char* end) {$/;"	f
Snippet	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Snippet = 15,$/;"	m	class:ccls::CompletionItemKind
Snippet	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^enum class InsertTextFormat { PlainText = 1, Snippet = 2 };$/;"	m	class:ccls::InsertTextFormat
Stack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    Stack(Allocator* allocator, size_t stackCapacity) : allocator_(allocator), ownAllocator_(0), stack_(0), stackTop_(0), stackEnd_(0), initialCapacity_(stackCapacity) {$/;"	f	class:internal::Stack
Stack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    Stack(Stack&& rhs)$/;"	f	class:internal::Stack
Stack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^class Stack {$/;"	c	namespace:internal
StackAllocatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef StackAllocator StackAllocatorType;              \/\/!< StackAllocator type from template parameter.$/;"	t	class:GenericDocument
StackStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        StackStream(internal::Stack<StackAllocator>& stack) : stack_(stack), length_(0) {}$/;"	f	class:GenericReader::StackStream
StackStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    class StackStream {$/;"	c	class:GenericReader
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::StartArray(size_t* size) {$/;"	f	class:JsonReader
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::StartArray(size_t*) {$/;"	f	class:JsonWriter
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool StartArray() { return out_.StartArray(); }$/;"	f	struct:CapitalizeFilter
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool StartArray() {$/;"	f	class:FilterKeyHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool StartArray() {$/;"	f	class:FilterKeyHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool StartArray() {$/;"	f	class:JsonxWriter
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool StartArray() { st_ = kEnteringArray; return true; }$/;"	f	class:LookaheadParserHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool StartArray() { type = "StartArray"; data.clear(); return true; }$/;"	f	struct:MyHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool StartArray() { cout << "StartArray()" << endl; return true; }$/;"	f	struct:MyHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool StartArray() { new (stack_.template Push<ValueType>()) ValueType(kArrayType); return true; }$/;"	f	class:GenericDocument
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool StartArray() {$/;"	f	class:PrettyWriter
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool StartArray() { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool StartArray() { return true; }$/;"	f	class:internal::Hasher
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool StartArray() {$/;"	f	class:GenericSchemaValidator
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool StartArray(Context& context) const {$/;"	f	class:internal::Schema
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool StartArray() {$/;"	f	class:Writer
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool StartArray() { return true; }$/;"	f	struct:NoOpHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { EXPECT_EQ(0u, step_); step_++; return true; }$/;"	f	struct:ParseArrayHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { EXPECT_EQ(14u, step_); step_++; return true; }$/;"	f	struct:ParseObjectHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { EXPECT_EQ(2u, step_); step_++; return true; }$/;"	f	struct:ParseMultipleRootHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_STARTARRAY; return true; }$/;"	f	struct:IterativeParsingReaderHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { return e != 12; }$/;"	f	struct:TerminateHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { return false; }$/;"	f	struct:HandlerTerminateAtStartArray
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartArray() { return true; }$/;"	f	struct:NumbersAsStringsHandler
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool StartArray() { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
StartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool StartArray() { return e != 12; }$/;"	f	struct:TerminateHandler
StartDependencyErrors	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void StartDependencyErrors() {$/;"	f	class:GenericSchemaValidator
StartDisallowedType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void StartDisallowedType() {$/;"	f	class:GenericSchemaValidator
StartMissingDependentProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void StartMissingDependentProperties() {$/;"	f	class:GenericSchemaValidator
StartMissingProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void StartMissingProperties() {$/;"	f	class:GenericSchemaValidator
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::StartObject() {$/;"	f	class:JsonReader
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::StartObject() {$/;"	f	class:JsonWriter
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool StartObject() { return out_.StartObject(); }$/;"	f	struct:CapitalizeFilter
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool StartObject() { $/;"	f	class:FilterKeyHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool StartObject() { $/;"	f	class:FilterKeyHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool StartObject() {$/;"	f	class:JsonxWriter
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool StartObject() { st_ = kEnteringObject; return true; }$/;"	f	class:LookaheadParserHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    bool StartObject() {$/;"	f	struct:MessageHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool StartObject() { type = "StartObject"; data.clear(); return true; }$/;"	f	struct:MyHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool StartObject() { cout << "StartObject()" << endl; return true; }$/;"	f	struct:MyHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool StartObject() { new (stack_.template Push<ValueType>()) ValueType(kObjectType); return true; }$/;"	f	class:GenericDocument
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool StartObject() {$/;"	f	class:PrettyWriter
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool StartObject() { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool StartObject() { return true; }$/;"	f	class:internal::Hasher
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool StartObject() {$/;"	f	class:GenericSchemaValidator
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool StartObject(Context& context) const {$/;"	f	class:internal::Schema
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool StartObject() {$/;"	f	class:Writer
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool StartObject() { return true; }$/;"	f	struct:NoOpHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { EXPECT_EQ(0u, step_); step_++; return true; }$/;"	f	struct:ParseEmptyObjectHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { EXPECT_EQ(0u, step_); step_++; return true; }$/;"	f	struct:ParseMultipleRootHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { EXPECT_EQ(0u, step_); step_++; return true; }$/;"	f	struct:ParseObjectHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_STARTOBJECT; return true; }$/;"	f	struct:IterativeParsingReaderHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { return e != 9; }$/;"	f	struct:TerminateHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { return false; }$/;"	f	struct:HandlerTerminateAtStartObject
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool StartObject() { return true; }$/;"	f	struct:NumbersAsStringsHandler
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool StartObject() { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
StartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool StartObject() { return e != 9; }$/;"	f	struct:TerminateHandler
Started	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^        Started,        \/\/!< An object\/array is called by StartObject()\/StartArray().$/;"	e	enum:JsonReaderStackItem::State	file:
State	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  struct State {$/;"	s	struct:ccls::VFS
State	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^    enum State {$/;"	g	struct:JsonReaderStackItem	file:
State	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    enum State {$/;"	g	struct:MessageHandler	file:
State	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    struct State {$/;"	s	class:internal::GenericRegex
State	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    typedef typename RegexType::State State;$/;"	t	class:internal::GenericRegexSearch
StaticAssertTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^template <size_t x> struct StaticAssertTest {};$/;"	s
StaticMethod	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  StaticMethod = 254,$/;"	m	class:ccls::SymbolKind
StdAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^class StdAllocator :$/;"	c
StdAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^class StdAllocator<void, BaseAllocator> :$/;"	c
StoreDiags	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  StoreDiags(std::string path) : path(std::move(path)) {}$/;"	f	class:clang::ccls::__anon36::StoreDiags
StoreDiags	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^class StoreDiags : public DiagnosticConsumer {$/;"	c	namespace:clang::ccls::__anon36	file:
StoreInclude	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  StoreInclude(const SourceManager &sm, IncludeStructure &out)$/;"	f	class:clang::ccls::__anon36::StoreInclude
StoreInclude	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^class StoreInclude : public PPCallbacks {$/;"	c	namespace:clang::ccls::__anon36	file:
StrCmp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	/^inline int StrCmp(const Ch* s1, const Ch* s2) {$/;"	f	namespace:internal
StrCmp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^inline int StrCmp(const Ch* s1, const Ch* s2) {$/;"	f
StrDup	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^inline Ch* StrDup(const Ch* str) {$/;"	f
StrLen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	/^inline SizeType StrLen(const Ch* s) {$/;"	f	namespace:internal
StrLen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	/^inline SizeType StrLen(const char* s) {$/;"	f	namespace:internal
StrLen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	/^inline SizeType StrLen(const wchar_t* s) {$/;"	f	namespace:internal
StrLen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^inline unsigned StrLen(const Ch* s) {$/;"	f
StreamLocalCopy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    StreamLocalCopy(Stream& original) : s(original) {}$/;"	f	class:internal::StreamLocalCopy
StreamLocalCopy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    StreamLocalCopy(Stream& original) : s(original), original_(original) {}$/;"	f	class:internal::StreamLocalCopy
StreamLocalCopy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^class StreamLocalCopy<Stream, 0> {$/;"	c	namespace:internal
StreamLocalCopy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^class StreamLocalCopy<Stream, 1> {$/;"	c	namespace:internal
StreamTraits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^struct StreamTraits {$/;"	s
StreamTraits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^struct StreamTraits<GenericInsituStringStream<Encoding> > {$/;"	s
StreamTraits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^struct StreamTraits<GenericStringStream<Encoding> > {$/;"	s
String	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  String = 15,$/;"	m	class:ccls::SymbolKind
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool String(const char* str, SizeType length, bool) {$/;"	f	struct:CapitalizeFilter
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool String   (const Ch* str, SizeType len, bool copy) { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.String   (str, len, copy) && EndValue(); }$/;"	f	class:FilterKeyHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool String   (const Ch* str, SizeType len, bool copy) { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.String   (str, len, copy) && EndValue(); }$/;"	f	class:FilterKeyHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool String(const char* str, SizeType length, bool) {$/;"	f	class:JsonxWriter
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool String(const char* str, SizeType length, bool) { st_ = kHasString; v_.SetString(str, length); return true; }$/;"	f	class:LookaheadParserHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    bool String(const char* str, SizeType length, bool) {$/;"	f	struct:MessageHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool String(const char* str, SizeType length, bool) { type = "String:"; data = std::string(str, length); return true; }$/;"	f	struct:MyHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool String(const char* str, SizeType length, bool copy) { $/;"	f	struct:MyHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool String(const Ch* str, SizeType length, bool copy) { $/;"	f	class:GenericDocument
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    struct String {$/;"	s	class:GenericValue
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool String(const Ch* str) { return String(str, internal::StrLen(str)); }$/;"	f	class:PrettyWriter
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool String(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:PrettyWriter
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool String(const std::basic_string<Ch>& str) {$/;"	f	class:PrettyWriter
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool String(const Ch*, SizeType, bool) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool String(Context& context, const Ch* str, SizeType length, bool) const {$/;"	f	class:internal::Schema
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool String(const Ch* str, SizeType len, bool) {$/;"	f	class:internal::Hasher
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool String(const Ch* str, SizeType length, bool copy)$/;"	f	class:GenericSchemaValidator
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    typedef std::basic_string<Ch> String;$/;"	t	class:GenericUri
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool String(const Ch* const& str) { return String(str, internal::StrLen(str)); }$/;"	f	class:Writer
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool String(const Ch* str, SizeType length, bool copy = false) {$/;"	f	class:Writer
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool String(const std::basic_string<Ch>& str) {$/;"	f	class:Writer
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool String(const char*, SizeType, bool) { return true; }$/;"	f	struct:NoOpHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool String(const Ch*, SizeType, bool) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_STRING; return true; }$/;"	f	struct:IterativeParsingReaderHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool String(const char* str, size_t, bool) {$/;"	f	struct:ParseObjectHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool String(const char*, SizeType, bool) { return e != 8; }$/;"	f	struct:TerminateHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool String(const char*, SizeType, bool) { return true; }$/;"	f	struct:NumbersAsStringsHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool String(const typename Encoding::Ch* str, size_t length, bool copy) {$/;"	f	struct:ParseStringHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool String(const wchar_t*, SizeType, bool) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^    bool String(const char* str, size_t length, bool) {$/;"	f	struct:ScanCopyUnescapedStringHandler
String	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool String(const char*, SizeType, bool) { return e != 8; }$/;"	f	struct:TerminateHandler
StringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericStringBuffer<UTF8<char>, CrtAllocator> StringBuffer;$/;"	t
StringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^typedef GenericStringBuffer<UTF8<> > StringBuffer;$/;"	t
StringEqual	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool StringEqual(const GenericValue<Encoding, SourceAllocator>& rhs) const {$/;"	f	class:GenericValue
StringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^inline GenericStringRef<CharType> StringRef(const CharType* str) {$/;"	f
StringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^inline GenericStringRef<CharType> StringRef(const CharType* str, size_t length) {$/;"	f
StringRef	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^inline GenericStringRef<CharType> StringRef(const std::basic_string<CharType>& str) {$/;"	f
StringRefType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericStringRef<Ch> StringRefType;     \/\/!< Reference to a constant string$/;"	t	class:GenericValue
StringRefType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::StringRefType StringRefType;$/;"	t	class:GenericArray
StringRefType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename ValueType::StringRefType StringRefType;$/;"	t	class:GenericObject
StringRefType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericStringRef<Ch> StringRefType;$/;"	t	class:GenericSchemaValidator
StringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericStringStream<UTF8<char> > StringStream;$/;"	t
StringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^typedef GenericStringStream<UTF8<> > StringStream;$/;"	t
StringToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        StringToken,$/;"	e	enum:GenericReader::Token
StringType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef const typename ValueType::Ch* StringType;$/;"	t	struct:internal::TypeHelper
StringType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef std::basic_string<typename ValueType::Ch> StringType;$/;"	t	struct:internal::TypeHelper
Stringify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool Stringify(OutputStream& os) const {$/;"	f	class:GenericPointer
StringifyUriFragment	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool StringifyUriFragment(OutputStream& os) const {$/;"	f	class:GenericPointer
StrtodBigInteger	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline double StrtodBigInteger(double approx, const Ch* decimals, int dLen, int dExp) {$/;"	f	namespace:internal
StrtodDiyFp	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline bool StrtodDiyFp(const Ch* decimals, int dLen, int dExp, double* result) {$/;"	f	namespace:internal
StrtodFast	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline bool StrtodFast(double d, int p, double* result) {$/;"	f	namespace:internal
StrtodFullPrecision	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline double StrtodFullPrecision(double d, int p, const Ch* decimals, size_t length, size_t decimalPosition, int exp) {$/;"	f	namespace:internal
StrtodNormalPrecision	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^inline double StrtodNormalPrecision(double d, int p) {$/;"	f	namespace:internal
Struct	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Struct = 23,$/;"	m	class:ccls::SymbolKind
Struct	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Struct = 22,$/;"	m	class:ccls::CompletionItemKind
Student	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Student() : name(), age(), height(), canSwim() {}$/;"	f	struct:Student
Student	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    Student(const std::string name, unsigned age, double height, bool canSwim) :$/;"	f	struct:Student
Student	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^struct Student {$/;"	s	file:
Swap	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Swap(GenericDocument<EncodingType, typename ValueType::AllocatorType, stackAllocator>& document, ValueType& value) const {$/;"	f	class:GenericPointer
Swap	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ValueType& Swap(ValueType& root, ValueType& value, typename ValueType::AllocatorType& allocator) const {$/;"	f	class:GenericPointer
SwapValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SwapValueByPointer(DocumentType& document, const CharType(&source)[N], typename DocumentType::ValueType& value) {$/;"	f
SwapValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename DocumentType::ValueType& SwapValueByPointer(DocumentType& document, const GenericPointer<typename DocumentType::ValueType>& pointer, typename DocumentType::ValueType& value) {$/;"	f
SwapValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SwapValueByPointer(T& root, const CharType(&source)[N], typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SwapValueByPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^typename T::ValueType& SwapValueByPointer(T& root, const GenericPointer<typename T::ValueType>& pointer, typename T::ValueType& value, typename T::AllocatorType& a) {$/;"	f
SymbolIdx	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct SymbolIdx {$/;"	s	namespace:ccls
SymbolInformation	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct SymbolInformation {$/;"	s	namespace:ccls
SymbolKind	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class SymbolKind : uint8_t {$/;"	c	namespace:ccls
SymbolRef	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct SymbolRef {$/;"	s	namespace:ccls
T	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_extern.cc	/^struct T {};$/;"	s	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	343;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	361;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	237;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	252;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	286;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	303;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	357;"	d	file:
T	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	374;"	d	file:
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^TEST(Allocator, Alignment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^TEST(Allocator, CrtAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^TEST(Allocator, Issue399) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^TEST(Allocator, MemoryPoolAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^TEST(BigInteger, AddUint64) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^TEST(BigInteger, Compare) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^TEST(BigInteger, Constructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^TEST(BigInteger, LeftShift) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^TEST(BigInteger, MultiplyUint32) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^TEST(BigInteger, MultiplyUint64) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/clzlltest.cpp	/^TEST(clzll, normal) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingArrayBracket) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingArrayComma) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingColon) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingComma) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingFirstBracket) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingLastArrayBracket) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingLastBracket) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingQuotes) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^TEST(CursorStreamWrapper, MissingSecondQuotes) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, AcceptWriter) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, AssertAcceptInvalidNameType) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, Parse) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, ParseStream_AutoUTFInputStream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, ParseStream_EncodedInputStream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, Parse_Encoding) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, Swap) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, UTF16_Document) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, UnchangedOnParseError) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TEST(Document, UserBuffer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/dtoatest.cpp	/^TEST(dtoa, maxDecimalPlaces) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/dtoatest.cpp	/^TEST(dtoa, normal) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^TEST(EncodingsTest, ASCII) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^TEST(EncodingsTest, UTF16) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^TEST(EncodingsTest, UTF32) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^TEST(EncodingsTest, UTF8) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^TEST(Fwd, Fwd) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^TEST(IStreamWrapper, fstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^TEST(IStreamWrapper, ifstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^TEST(IStreamWrapper, istringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^TEST(IStreamWrapper, stringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^TEST(IStreamWrapper, wistringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^TEST(IStreamWrapper, wstringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^TEST(itoa, i32toa) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^TEST(itoa, i64toa) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^TEST(itoa, u32toa) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^TEST(itoa, u64toa) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^TEST(JsonChecker, Reader) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/namespacetest.cpp	/^TEST(NamespaceTest,Direct) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/namespacetest.cpp	/^TEST(NamespaceTest,Using) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, cout) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, fstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, ofstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, ostringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, stringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, wostringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^TEST(OStreamWrapper, wstringstream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/platformtest.cpp	/^TEST(Platform, GetObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Ambiguity) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Append) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Assignment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, ConstructorWithToken) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, CopyConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Create) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, CreateValueByPointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, CreateValueByPointer_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, DefaultConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Equality) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Erase) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, EraseValueByPointer_Pointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, EraseValueByPointer_String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Get) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetUri) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetValueByPointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetValueByPointerWithDefault_Pointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetValueByPointerWithDefault_Pointer_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetValueByPointerWithDefault_String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetValueByPointerWithDefault_String_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetWithDefault) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, GetWithDefault_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Inequality) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Issue1899) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Issue483) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, LessThan) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Parse) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Parse_URIFragment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, ResolveOnArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, ResolveOnObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Set) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, SetValueByPointer_Pointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, SetValueByPointer_Pointer_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, SetValueByPointer_String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, SetValueByPointer_String_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Set_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Stringify) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Swap) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, SwapValueByPointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, SwapValueByPointer_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Swap_Value) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^TEST(Pointer, Swap_Value_NoAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, Basic) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, FileWriteStream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, FormatOptions) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, Inf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, InvalidEventSequence) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, Issue_1336) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, Issue_889) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, MoveCtor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, NaN) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, OStreamWrapper) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, RawValue) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, SetIndent) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^TEST(PrettyWriter, String_STDSTRING) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, BaseReaderHandler_Default) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, CustomStringStream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, EmptyExceptForCommaErrors) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, EmptyExceptForCommaErrorsIterative) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, EofAfterOneLineComment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, EscapedApostrophe) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IncompleteMultilineComment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IncompleteMultilineComment2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, InlineCommentsAreDisabledByDefault) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IterativeParsing_Count) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IterativeParsing_ErrorHandling) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IterativeParsing_General) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IterativeParsing_ShortCircuit) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, IterativePullParsing_General) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, MultipleTrailingCommaErrors) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, MultipleTrailingCommaErrorsIterative) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, NumbersAsStrings) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, NumbersAsStringsWChar_t) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, OnelineCommentsAreDisabledByDefault) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseArray_Error) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseComments) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseDocument_Error) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseEmptyArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseEmptyInlineComment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseEmptyOnelineComment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseFalse) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseInsituIterative_MultipleRoot) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseInsitu_MultipleRoot) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseIterative_MultipleRoot) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseMultipleCommentsInARow) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNanAndInfinity) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNumberError_FullPrecisionDouble) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNumberError_NormalPrecisionDouble) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNumber_FullPrecisionDouble) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNumber_Integer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNumber_NormalPrecisionDouble) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseNumber_NormalPrecisionError) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseObject_Error) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseString) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseString_Error) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseString_NonDestructive) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseString_Transcoding) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseString_TranscodingWithValidation) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseTerminationByHandler) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseTrue) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, ParseValue_Error) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, Parse_EmptyObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, Parse_IStreamWrapper_StringStream) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, Parse_MultipleRoot) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, SkipWhitespace) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, TrailingCommaHandlerTermination) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, TrailingCommaHandlerTerminationIterative) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, TrailingCommas) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, TrailingCommasIterative) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^TEST(Reader, UnrecognizedComment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Alternation1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Alternation2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, AnyCharacter) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange4) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange5) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange6) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange7) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, CharacterRange8) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Concatenation) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Escape) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Invalid) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Issue538) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Issue583) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, OneOrMore1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, OneOrMore2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, OneOrMore3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, OneOrMore4) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Parenthesis1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Parenthesis2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Parenthesis3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierExact1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierExact2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierExact3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMin1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMin2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMin3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMinMax1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMinMax2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMinMax3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMinMax4) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, QuantifierMinMax5) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Search) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Search_BeginAnchor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Search_BothAnchor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Search_EndAnchor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Single) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, Unicode) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrMore1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrMore2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrMore3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrMore4) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrOne1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrOne2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrOne3) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrOne4) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	/^TEST(Regex, ZeroOrOne5) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(Schema, Issue552) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(Schema, Issue848) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidatingReader, Invalid) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidatingReader, Simple) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidatingWriter, Simple) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, AllOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, AllOf_Nested) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, AnyOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Array) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Array_AdditionalItems) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Array_ItemsList) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Array_ItemsRange) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Array_ItemsTuple) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Array_UniqueItems) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Boolean) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_AllOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_AnyOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_Enum) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_Issue2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_OneOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_RogueArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_RogueObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_RogueString) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ContinueOnErrors_UniqueItems) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Enum_InvalidType) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Enum_Typed) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Enum_Typless) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, EscapedPointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Hasher) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer_MultipleOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer_MultipleOf64Boundary) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer_Range) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer_Range64Boundary) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer_Range64BoundaryExclusive) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Integer_RangeU64Boundary) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Issue1017_allOfHandler) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Issue608) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Issue728_AllOfRef) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, MultiType) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, MultiTypeInObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, MultiTypeWithObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Not) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Null) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Number_MultipleOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Number_MultipleOfOne) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Number_Range) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Number_RangeDouble) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Number_RangeDoubleU64Boundary) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Number_RangeInt) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ObjectInArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_AdditionalPropertiesBoolean) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_AdditionalPropertiesObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_PatternProperties) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_PatternProperties_AdditionalPropertiesBoolean) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_PatternProperties_AdditionalPropertiesObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_PatternProperties_ErrorConflict) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_Properties) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_PropertiesRange) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_Properties_PatternProperties) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_PropertyDependencies) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_Required) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_Required_PassWithDefault) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Object_SchemaDependencies) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, OneOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_AllOf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_internal_id_1) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_internal_id_2) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_internal_id_and_schema_pointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_internal_id_in_array) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_internal_multiple_ids) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_remote) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_remote_change_resolution_scope_absolute_path) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_remote_change_resolution_scope_absolute_path_document) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_remote_change_resolution_scope_relative_path) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_remote_change_resolution_scope_uri) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Ref_remote_issue1210) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, SchemaPointer) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Schema_UnknownError) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, String_LengthRange) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, String_Pattern) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, String_Pattern_Invalid) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, TestSuite) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, Typeless) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ValidateMetaSchema) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^TEST(SchemaValidator, ValidateMetaSchema_UTF16) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^TEST(SIMD, SIMD_SUFFIX(ScanCopyUnescapedString)) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^TEST(SIMD, SIMD_SUFFIX(ScanWriteUnescapedString)) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^TEST(SIMD, SIMD_SUFFIX(SkipWhitespace)) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^TEST(SIMD, SIMD_SUFFIX(SkipWhitespace_EncodedMemoryStream)) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/strfunctest.cpp	/^TEST(StrFunc, CountStringCodePoint) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, Clear) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, GetLength_Issue744) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, InitialSize) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, MoveAssignment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, MoveConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, Pop) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, Push) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, Put) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/stringbuffertest.cpp	/^TEST(StringBuffer, PutN_Issue672) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/strtodtest.cpp	/^TEST(Strtod, CheckApproximationCase) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Assignment) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, CopyConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, DefaultConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Equals) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Issue1899) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Match) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Parse) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Parse_UTF16) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Resolve) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/uritest.cpp	/^TEST(Uri, Resolve_UTF16) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Document, CrtAllocator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, AcceptTerminationByHandler) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, AllocateShortString) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Array) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, ArrayHelper) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, ArrayHelperRangeFor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, AssignmentOperator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, BigNestedArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, BigNestedObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, CopyFrom) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, DefaultConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Double) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, EqualtoOperator) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, EraseMember_String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, False) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Float) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Int) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Int64) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, IsLosslessDouble) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, IsLosslessFloat) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, MergeDuplicateKey) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, MoveConstructor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Null) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Object) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, ObjectHelper) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, ObjectHelperRangeFor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, RemoveLastElement) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, SetStringNull) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Size) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Sorting) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Swap) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, True) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Uint) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^TEST(Value, Uint64) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Write, RawValue_Issue1152) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertIncorrectArrayLevel) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertIncorrectEndArray) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertIncorrectEndObject) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertIncorrectObjectLevel) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertMultipleRoot) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertObjectKeyNotString) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, AssertRootMayBeAnyValue) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Compact) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Double) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Inf) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Int) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Int64) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, InvalidEncoding) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, InvalidEventSequence) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Issue_889) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, MoveCtor) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, NaN) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, OStreamWrapper) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, RawValue) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Root) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, RootArrayIsComplete) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, RootObjectIsComplete) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, RootValueIsComplete) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, ScanWriteUnescapedString) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, String) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Transcode) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, UInt) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, Uint64) {$/;"	f
TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^TEST(Writer, ValidateEncoding) {$/;"	f
TESTERRORHANDLING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1439;"	d	file:
TESTSUITE_SCHEMA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^TESTSUITE_SCHEMA = {$/;"	v
TEST_ARRAY_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1066;"	d	file:
TEST_ARRAY_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1089;"	d	file:
TEST_DOUBLE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	189;"	d	file:
TEST_DOUBLE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	584;"	d	file:
TEST_DTOA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/dtoatest.cpp	28;"	d	file:
TEST_DTOA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/dtoatest.cpp	51;"	d	file:
TEST_DTOA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/dtoatest.cpp	57;"	d	file:
TEST_DTOA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/dtoatest.cpp	93;"	d	file:
TEST_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1234;"	d	file:
TEST_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1303;"	d	file:
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, CountDecimalDigit64_VerifyFast) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, Hoehrmann_IsUTF8) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer1_InsituStringStream) { itoa64_Writer_InsituStringStream<Writer1<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer1_InsituStringStreamVerify) { itoa64_Writer_InsituStringStreamVerify<Writer1<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer1_StringBuffer) { itoa64_Writer_StringBuffer<Writer1<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer1_StringBufferVerify) { itoa64_Writer_StringBufferVerify<Writer1<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer2_InsituStringStream) { itoa64_Writer_InsituStringStream<Writer2<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer2_InsituStringStreamVerify) { itoa64_Writer_InsituStringStreamVerify<Writer2<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer2_StringBuffer) { itoa64_Writer_StringBuffer<Writer2<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer2_StringBufferVerify) { itoa64_Writer_StringBufferVerify<Writer2<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer3_InsituStringStream) { itoa64_Writer_InsituStringStream<Writer3<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer3_InsituStringStreamVerify) { itoa64_Writer_InsituStringStreamVerify<Writer3<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer3_StringBuffer) { itoa64_Writer_StringBuffer<Writer3<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer3_StringBufferVerify) { itoa64_Writer_StringBufferVerify<Writer3<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer4_InsituStringStream) { itoa64_Writer_InsituStringStream<Writer4<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer4_InsituStringStreamVerify) { itoa64_Writer_InsituStringStreamVerify<Writer4<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer4_StringBuffer) { itoa64_Writer_StringBuffer<Writer4<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer4_StringBufferVerify) { itoa64_Writer_StringBufferVerify<Writer4<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer_InsituStringStream) { itoa64_Writer_InsituStringStream<rapidjson::Writer<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer_InsituStringStreamVerify) { itoa64_Writer_InsituStringStreamVerify<rapidjson::Writer<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer_StringBuffer) { itoa64_Writer_StringBuffer<rapidjson::Writer<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa64_Writer_StringBufferVerify) { itoa64_Writer_StringBufferVerify<rapidjson::Writer<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer1_InsituStringStream) { itoa_Writer_InsituStringStream<Writer1<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer1_InsituStringStreamVerify) { itoa_Writer_InsituStringStreamVerify<Writer1<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer1_StringBuffer) { itoa_Writer_StringBuffer<Writer1<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer1_StringBufferVerify) { itoa_Writer_StringBufferVerify<Writer1<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer2_InsituStringStream) { itoa_Writer_InsituStringStream<Writer2<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer2_InsituStringStreamVerify) { itoa_Writer_InsituStringStreamVerify<Writer2<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer2_StringBuffer) { itoa_Writer_StringBuffer<Writer2<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer2_StringBufferVerify) { itoa_Writer_StringBufferVerify<Writer2<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer3_InsituStringStream) { itoa_Writer_InsituStringStream<Writer3<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer3_InsituStringStreamVerify) { itoa_Writer_InsituStringStreamVerify<Writer3<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer3_StringBuffer) { itoa_Writer_StringBuffer<Writer3<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer3_StringBufferVerify) { itoa_Writer_StringBufferVerify<Writer3<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer4_InsituStringStream) { itoa_Writer_InsituStringStream<Writer4<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer4_InsituStringStreamVerify) { itoa_Writer_InsituStringStreamVerify<Writer4<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer4_StringBuffer) { itoa_Writer_StringBuffer<Writer4<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer4_StringBufferVerify) { itoa_Writer_StringBufferVerify<Writer4<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer_InsituStringStream) { itoa_Writer_InsituStringStream<rapidjson::Writer<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer_InsituStringStreamVerify) { itoa_Writer_InsituStringStreamVerify<rapidjson::Writer<rapidjson::InsituStringStream> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer_StringBuffer) { itoa_Writer_StringBuffer<rapidjson::Writer<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^TEST_F(Misc, itoa_Writer_StringBufferVerify) { itoa_Writer_StringBufferVerify<rapidjson::Writer<rapidjson::StringBuffer> >(); }$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, CheckSum) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, MapViewOfFile) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, Whitespace_strlen) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, Whitespace_strspn) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, fread) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, memcmp) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, mmap) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, pow) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, read) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^TEST_F(Platform, strlen) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, DocumentAccept) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, DocumentFind) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, DocumentTraverse) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, FileReadStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, IStreamWrapper) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, IStreamWrapper_Setbuffered) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, IStreamWrapper_Unbuffered) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseAutoUTFInputStream_MemoryStream)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseEncodedInputStream_MemoryStream)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseInsitu_MemoryPoolAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseIterativeInsitu_MemoryPoolAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseIterative_MemoryPoolAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseLength_MemoryPoolAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParseStdString_MemoryPoolAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParse_CrtAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(DocumentParse_MemoryPoolAllocator)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(PrettyWriter_StringBuffer)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParseInsitu_DummyHandler)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParseInsitu_DummyHandler_ValidateEncoding)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParseIterativeInsitu_DummyHandler)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParseIterativePullInsitu_DummyHandler)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParseIterativePull_DummyHandler)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParseIterative_DummyHandler)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_FileReadStream)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_FullPrecision)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_IStreamWrapper)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_IStreamWrapper_Setbuffered)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_IStreamWrapper_Unbuffered)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_ValidateEncoding)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(SkipWhitespace)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SIMD_SUFFIX(Writer_StringBuffer)) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SkipWhitespace_Basic) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, SkipWhitespace_strspn) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, StringBuffer) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, UTF8_Validate) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, Writer_NullStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^TEST_F(RapidJson, internal_Pow10) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^TEST_F(Schema, TestSuite) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^TEST_F(EncodedStreamTest, AutoUTFInputStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^TEST_F(EncodedStreamTest, AutoUTFOutputStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^TEST_F(EncodedStreamTest, EncodedInputStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^TEST_F(EncodedStreamTest, EncodedOutputStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^TEST_F(FileStreamTest, FileReadStream) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^TEST_F(FileStreamTest, FileReadStream_Peek4) {$/;"	f
TEST_F	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^TEST_F(FileStreamTest, FileWriteStream) {$/;"	f
TEST_HASHER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	35;"	d	file:
TEST_INTEGER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	114;"	d	file:
TEST_INTEGER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	184;"	d	file:
TEST_INVALID	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	589;"	d	file:
TEST_INVALID	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/regextest.cpp	626;"	d	file:
TEST_MISC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	20;"	d
TEST_NAN_INF	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	2280;"	d	file:
TEST_NAN_INF	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	2343;"	d	file:
TEST_NAN_INF_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	2310;"	d	file:
TEST_NAN_INF_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	2342;"	d	file:
TEST_NUMBER_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	631;"	d	file:
TEST_NUMBER_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	744;"	d	file:
TEST_PLATFORM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	19;"	d
TEST_RAPIDJSON	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	18;"	d
TEST_ROUNDTRIP	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	43;"	d	file:
TEST_STRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	783;"	d	file:
TEST_STRING	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	853;"	d	file:
TEST_STRINGARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	806;"	d	file:
TEST_STRINGARRAY	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	851;"	d	file:
TEST_STRINGARRAY2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	813;"	d	file:
TEST_STRINGARRAY_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1030;"	d	file:
TEST_STRINGENCODING_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	920;"	d	file:
TEST_STRING_ERROR	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	908;"	d	file:
TEST_TERMINATION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	1760;"	d	file:
TEST_TERMINATION	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	1751;"	d	file:
TEST_TYPED	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	104;"	d	file:
TEST_TYPED	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	131;"	d	file:
TEST_TYPED	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	387;"	d	file:
TEST_TYPED	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	406;"	d	file:
TEST_VERSION_CODE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	22;"	d
TOP	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	207;"	d	file:
TOP	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	28;"	d	file:
TRACE	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	63;"	d	file:
TRACE	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	75;"	d	file:
TYPED_TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TYPED_TEST(DocumentMove, MoveAssignment) {$/;"	f
TYPED_TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TYPED_TEST(DocumentMove, MoveAssignmentParseError) {$/;"	f
TYPED_TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TYPED_TEST(DocumentMove, MoveConstructor) {$/;"	f
TYPED_TEST	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^TYPED_TEST(DocumentMove, MoveConstructorParseError) {$/;"	f
Tail	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharRole { None, Tail, Head };$/;"	e	enum:ccls::__anon3::CharRole	file:
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        char Take() {$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    Ch Take() {$/;"	f	class:CursorStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Take() { Ch c = current_; current_ = Encoding::Take(is_); return c; }$/;"	f	class:EncodedInputStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Take() { Ch c = current_; current_ = takeFunc_(*is_); return c; }$/;"	f	class:AutoUTFInputStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Take() { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:AutoUTFOutputStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Take() { RAPIDJSON_ASSERT(false); return 0;}$/;"	f	class:EncodedOutputStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch Take() { return is_.Take(); }$/;"	f	class:EncodedInputStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static Ch Take(InputByteStream& is) {$/;"	f	struct:ASCII
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static Ch Take(InputByteStream& is) {$/;"	f	struct:UTF8
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF16BE
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF16LE
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF32BE
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType Take(InputByteStream& is) {$/;"	f	struct:UTF32LE
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    Ch Take() { Ch c = *current_; Read(); return c; }$/;"	f	class:FileReadStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    char Take() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    unsigned Take() {$/;"	f	class:internal::DecodedStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch Take() { Ch c = *current_; Read(); return c; }$/;"	f	class:BasicIStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    Ch Take() { return RAPIDJSON_UNLIKELY(src_ == end_) ? '\\0' : *src_++; }$/;"	f	struct:MemoryStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    char Take() { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        Ch Take() {$/;"	f	class:GenericPointer::PercentDecodeStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch Take() { return Base::TakePush(); }$/;"	f	class:GenericReader::NumberStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch Take() { return is.Take(); }$/;"	f	class:GenericReader::NumberStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch Take() { return *src_++; }$/;"	f	struct:GenericInsituStringStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch Take() { return *src_++; }$/;"	f	struct:GenericStringStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch Take() { return is_.Take(); }$/;"	f	class:GenericStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    Ch Take() { assert(false); return '\\0'; }$/;"	f	class:OStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    Ch Take() { return *src_++; }$/;"	f	class:CustomStringStream
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    Ch Take() {$/;"	f	class:IStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  Ch Take() {$/;"	f	class:WIStreamWrapper
Take	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    Ch Take() { assert(false); return '\\0'; }$/;"	f	class:OStreamWrapper
TakeBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:ASCII
TakeBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF16BE
TakeBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF16LE
TakeBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF32BE
TakeBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF32LE
TakeBOM	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static CharType TakeBOM(InputByteStream& is) {$/;"	f	struct:UTF8
TakeFunc	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    typedef Ch (*TakeFunc)(InputByteStream& is);$/;"	t	class:AutoUTFInputStream
TakePush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch TakePush() { return is.Take(); }$/;"	f	class:GenericReader::NumberStream
TakePush	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        RAPIDJSON_FORCEINLINE Ch TakePush() {$/;"	f	class:GenericReader::NumberStream
TearDown	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    virtual void TearDown() {$/;"	f	class:PerfTest
TearDown	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^    virtual void TearDown() {$/;"	f	class:Platform
TearDown	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    virtual void TearDown() {$/;"	f	class:RapidJson
TearDown	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    virtual void TearDown() {$/;"	f	class:Schema
TearDown	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    virtual void TearDown() {$/;"	f	class:EncodedStreamTest
TearDown	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    virtual void TearDown() {$/;"	f	class:FileStreamTest
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        size_t Tell() const { return count_; }$/;"	f	struct:AsyncDocumentParser::AsyncStringStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false);  return 0; }$/;"	f	class:EncodedOutputStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:AutoUTFOutputStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t Tell() const { return is_->Tell(); }$/;"	f	class:AutoUTFInputStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    size_t Tell() const { return is_.Tell(); }$/;"	f	class:EncodedInputStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    size_t Tell() const { return count_ + static_cast<size_t>(current_ - buffer_); }$/;"	f	class:FileReadStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:FileWriteStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    size_t Tell() const { return count_ + static_cast<size_t>(current_ - buffer_); }$/;"	f	class:BasicIStreamWrapper
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    size_t Tell() const { return static_cast<size_t>(src_ - begin_); }$/;"	f	struct:MemoryStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    size_t Tell() const { RAPIDJSON_ASSERT(false); return 0; }$/;"	f	class:BasicOStreamWrapper
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        size_t Tell() const { return static_cast<size_t>(src_ - head_); }$/;"	f	class:GenericPointer::PercentDecodeStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        size_t Tell() { return is.Tell(); }$/;"	f	class:GenericReader::NumberStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    size_t Tell() const { return static_cast<size_t>(src_ - head_); }$/;"	f	struct:GenericStringStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    size_t Tell() { return is_.Tell(); }$/;"	f	class:GenericStreamWrapper
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    size_t Tell() { return static_cast<size_t>(src_ - head_); }$/;"	f	struct:GenericInsituStringStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    size_t Tell() const { return 0; }$/;"	f	class:OStreamWrapper
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t Tell() const { return static_cast<size_t>(is_.tellg()); }$/;"	f	class:IStreamWrapper
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t Tell() const { return static_cast<size_t>(src_ - head_); }$/;"	f	class:CustomStringStream
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  size_t Tell() const { return static_cast<size_t>(is_.tellg()); }$/;"	f	class:WIStreamWrapper
Tell	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    size_t Tell() const { return 0; }$/;"	f	class:OStreamWrapper
TempFile	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^inline FILE* TempFile(char *filename) {$/;"	f
Template	/home/yl/vim/vim/ccls/ccls/index_tests/templates/func_specialized_template_param.cc	/^class Template {};$/;"	c	file:
Template	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialized_func_definition.cc	/^class Template {$/;"	c	file:
TerminateHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^struct TerminateHandler {$/;"	s	file:
TerminateHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^struct TerminateHandler {$/;"	s	file:
TestAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^void TestAllocator(Allocator& a) {$/;"	f
TestArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^static void TestArray(T& x, Allocator& allocator) {$/;"	f	file:
TestAutoUTFInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    void TestAutoUTFInputStream(const char *filename, bool expectHasBOM) {$/;"	f	class:EncodedStreamTest
TestAutoUTFOutputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    void TestAutoUTFOutputStream(UTFType type, bool putBOM, const char *expectedFilename) {$/;"	f	class:EncodedStreamTest
TestCopyFrom	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^void TestCopyFrom() {$/;"	f
TestEmptyExceptForCommaErrors	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^void TestEmptyExceptForCommaErrors() {$/;"	f
TestEncodedInputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    void TestEncodedInputStream(const char* filename) {$/;"	f	class:EncodedStreamTest
TestEncodedOutputStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    void TestEncodedOutputStream(const char* expectedFilename, bool putBOM) {$/;"	f	class:EncodedStreamTest
TestEqual	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^void TestEqual(const A& a, const B& b) {$/;"	f
TestFileStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^static void TestFileStream() {$/;"	f	file:
TestInsituMultipleRoot	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^void TestInsituMultipleRoot() {$/;"	f
TestMultipleRoot	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^void TestMultipleRoot() {$/;"	f
TestMultipleTrailingCommaErrors	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^void TestMultipleTrailingCommaErrors() {$/;"	f
TestObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^static void TestObject(T& x, Allocator& allocator) {$/;"	f	file:
TestParseDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^static void TestParseDouble() {$/;"	f	file:
TestParseNumberError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^static void TestParseNumberError() {$/;"	f	file:
TestScanCopyUnescapedString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^void TestScanCopyUnescapedString() {$/;"	f
TestShortStringOptimization	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^static void TestShortStringOptimization(const char* str) {$/;"	f	file:
TestSkipWhitespace	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^void TestSkipWhitespace() {$/;"	f
TestStdAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^void TestStdAllocator(const Allocator& a) {$/;"	f
TestStdAllocatorData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^    TestStdAllocatorData(const TestStdAllocatorData& rhs) :$/;"	f	struct:TestStdAllocatorData
TestStdAllocatorData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^    TestStdAllocatorData(int &constructions, int &destructions) :$/;"	f	struct:TestStdAllocatorData
TestStdAllocatorData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^struct TestStdAllocatorData {$/;"	s	file:
TestString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^ParseErrorCode TestString(const typename Encoding::Ch* str) {$/;"	f
TestStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/istreamwrappertest.cpp	/^static void TestStringStream() {$/;"	f	file:
TestStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/ostreamwrappertest.cpp	/^static void TestStringStream() {$/;"	f	file:
TestSuite	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^        TestSuite() : schema() {}$/;"	f	struct:Schema::TestSuite
TestSuite	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    struct TestSuite {$/;"	s	class:Schema	file:
TestSuiteList	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    typedef std::vector<TestSuite* > TestSuiteList;$/;"	t	class:Schema	file:
TestTrailingCommaHandlerTermination	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^void TestTrailingCommaHandlerTermination() {$/;"	f
TestTrailingCommas	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^void TestTrailingCommas() {$/;"	f
TestTranscode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^void TestTranscode(const char* json) {$/;"	f
TestUnequal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^void TestUnequal(const A& a, const B& b) {$/;"	f
Text	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Text = 1,$/;"	m	class:ccls::CompletionItemKind
Text	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  enum Kind { Text = 1, Read = 2, Write = 3 };$/;"	e	enum:ccls::__anon21::DocumentHighlight::Kind	file:
TextDocumentClientCap	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct TextDocumentClientCap {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
TextDocumentContentChangeEvent	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct TextDocumentContentChangeEvent {$/;"	s	namespace:ccls
TextDocumentDidChangeParam	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct TextDocumentDidChangeParam {$/;"	s	namespace:ccls
TextDocumentEdit	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct TextDocumentEdit {$/;"	s	namespace:ccls
TextDocumentIdentifier	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct TextDocumentIdentifier {$/;"	s	namespace:ccls
TextDocumentItem	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct TextDocumentItem {$/;"	s	namespace:ccls
TextDocumentParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct TextDocumentParam {$/;"	s	namespace:ccls
TextDocumentPositionParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct TextDocumentPositionParam {$/;"	s	namespace:ccls
TextDocumentSyncKind	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^enum class TextDocumentSyncKind { None = 0, Full = 1, Incremental = 2 };$/;"	c	namespace:ccls::__anon17	file:
TextDocumentSyncOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct TextDocumentSyncOptions {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
TextEdit	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct TextEdit {$/;"	s	namespace:ccls
TextReplacer	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^struct TextReplacer {$/;"	s	namespace:ccls	file:
ThreadedQueue	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  ThreadedQueue() {$/;"	f	struct:ccls::ThreadedQueue
ThreadedQueue	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  explicit ThreadedQueue(MultiQueueWaiter *waiter) : waiter_(waiter) {}$/;"	f	struct:ccls::ThreadedQueue
ThreadedQueue	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^template <class T> struct ThreadedQueue : public BaseThreadQueue {$/;"	s	namespace:ccls
ToBias	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    uint64_t ToBias() const { return (u_ & kSignMask) ? ~u_ + 1 : u_ | kSignMask; }$/;"	f	class:internal::Double
ToDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    double ToDouble() const {$/;"	f	struct:internal::DiyFp
Token	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    struct Token {$/;"	s	class:GenericPointer
Token	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    enum Token {$/;"	g	class:GenericReader
TokenHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^struct TokenHelper {$/;"	s	namespace:internal
TokenHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^struct TokenHelper<Stack, char> {$/;"	s	namespace:internal
Tokenize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE Token Tokenize(Ch c) const {$/;"	f	class:GenericReader
TooFewItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void TooFewItems(SizeType actualCount, SizeType expectedCount) {$/;"	f	class:GenericSchemaValidator
TooFewProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void TooFewProperties(SizeType actualCount, SizeType expectedCount) {$/;"	f	class:GenericSchemaValidator
TooLong	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void TooLong(const Ch* str, SizeType length, SizeType expected) {$/;"	f	class:GenericSchemaValidator
TooManyItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void TooManyItems(SizeType actualCount, SizeType expectedCount) {$/;"	f	class:GenericSchemaValidator
TooManyProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void TooManyProperties(SizeType actualCount, SizeType expectedCount) {$/;"	f	class:GenericSchemaValidator
TooShort	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void TooShort(const Ch* str, SizeType length, SizeType expected) {$/;"	f	class:GenericSchemaValidator
Top	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    T* Top() { $/;"	f	class:internal::Stack
Top	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    const T* Top() const {$/;"	f	class:internal::Stack
Trace	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  enum class Trace {$/;"	c	struct:ccls::__anon17::TextDocumentSyncKind::InitializeParam	file:
Traits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^struct Traits {$/;"	s	file:
Traits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^struct Traits<int32_t> {$/;"	s	file:
Traits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^struct Traits<int64_t> {$/;"	s	file:
Traits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^struct Traits<uint32_t> {$/;"	s	file:
Traits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^struct Traits<uint64_t> {$/;"	s	file:
Transcode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Transcode(InputStream& is, OutputStream& os) {$/;"	f	struct:Transcoder
TranscodeUnsafe	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool TranscodeUnsafe(InputStream& is, OutputStream& os) {$/;"	f	struct:Transcoder
Transcoder	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct Transcoder {$/;"	s
Transcoder	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct Transcoder<Encoding, Encoding> {$/;"	s
TranscoderUtf8ToUtf8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^typedef Transcoder<UTF8<>, UTF8<> > TranscoderUtf8ToUtf8;$/;"	t	file:
Transit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    RAPIDJSON_FORCEINLINE IterativeParsingState Transit(IterativeParsingState src, Token token, IterativeParsingState dst, InputStream& is, Handler& handler) {$/;"	f	class:GenericReader
Traverse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^size_t Traverse(const T& value) {$/;"	f
TriggerCharacter	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TriggerCharacter = 2,$/;"	m	class:ccls::CompletionTriggerKind
TriggerForIncompleteCompletions	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TriggerForIncompleteCompletions = 3,$/;"	m	class:ccls::CompletionTriggerKind
TrueToken	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        TrueToken,$/;"	e	enum:GenericReader::Token
TrueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^typedef BoolType<true> TrueType;$/;"	t	namespace:internal
Type	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/implicit_constructor.cc	/^  Type() {}$/;"	f	struct:Type
Type	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/implicit_constructor.cc	/^struct Type {$/;"	s	file:
Type	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_qualifiers.cc	/^struct Type {};$/;"	s	file:
Type	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_static.cc	/^struct Type {};$/;"	s	file:
Type	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^enum class Kind : uint8_t { Invalid, File, Type, Func, Var };$/;"	m	class:ccls::Kind
Type	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  enum Type { kNone, kInt, kString };$/;"	g	struct:ccls::RequestId
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    typedef uint64_t Type;$/;"	t	class:internal::BigInteger
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^    typedef BoolType Type;$/;"	t	struct:internal::BoolType
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <> struct SelectIfImpl<false> { template <typename T1, typename T2> struct Apply { typedef T2 Type; }; };$/;"	t	struct:internal::SelectIfImpl::Apply
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool C> struct SelectIfImpl { template <typename T1, typename T2> struct Apply { typedef T1 Type; }; };$/;"	t	struct:internal::SelectIfImpl::Apply
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct DisableIfCond { typedef T Type; };$/;"	t	struct:internal::DisableIfCond
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <bool Condition, typename T = void> struct EnableIfCond  { typedef T Type; };$/;"	t	struct:internal::EnableIfCond
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct AddConst { typedef const T Type; };$/;"	t	struct:internal::AddConst
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst { typedef T Type; };$/;"	t	struct:internal::RemoveConst
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct RemoveConst<const T> { typedef T Type; };$/;"	t	struct:internal::RemoveConst
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct RemoveSfinaeTag<SfinaeTag&(*)(T)> { typedef T Type; };$/;"	t	struct:internal::RemoveSfinaeTag
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct Void { typedef void Type; };$/;"	t	struct:internal::Void
Type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^enum Type {$/;"	g
TypeAlias	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  TypeAlias = 252,$/;"	m	class:ccls::SymbolKind
TypeDef	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct TypeDef : NameMixin<TypeDef<V>> {$/;"	s	namespace:ccls
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper {};$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, bool> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, const typename ValueType::Ch*> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, double> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, float> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, int64_t> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, int> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, long> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, std::basic_string<typename ValueType::Ch> > {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::Array> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::ConstArray> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::ConstObject> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, typename ValueType::Object> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, uint64_t> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, unsigned long> {$/;"	s	namespace:internal
TypeHelper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^struct TypeHelper<ValueType, unsigned> {$/;"	s	namespace:internal
TypeParameter	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  TypeParameter = 26,$/;"	m	class:ccls::SymbolKind
TypeParameter	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TypeParameter = 25,$/;"	m	class:ccls::CompletionItemKind
U	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        struct U {$/;"	s	union:GenericValue::Number
U	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        union U {$/;"	u	struct:internal::Hasher::Number
U32TO8_LE	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	28;"	d	file:
U64TO8_LE	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	34;"	d	file:
U8TO64_LE	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	38;"	d	file:
UINT16_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	282;"	d
UINT16_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	59;"	d
UINT16_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	71;"	d
UINT16_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	187;"	d
UINT32_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	283;"	d
UINT32_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	60;"	d
UINT32_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	72;"	d
UINT32_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	188;"	d
UINT64_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	284;"	d
UINT64_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	61;"	d
UINT64_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	73;"	d
UINT64_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	189;"	d
UINT8_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	281;"	d
UINT8_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	58;"	d
UINT8_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	70;"	d
UINT8_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	186;"	d
UINTMAX_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	293;"	d
UINTMAX_C	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	82;"	d
UINTMAX_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	233;"	d
UINTPTR_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	223;"	d
UINTPTR_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	227;"	d
UINT_FAST16_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	215;"	d
UINT_FAST32_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	216;"	d
UINT_FAST64_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	217;"	d
UINT_FAST8_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	214;"	d
UINT_LEAST16_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	201;"	d
UINT_LEAST32_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	202;"	d
UINT_LEAST64_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	203;"	d
UINT_LEAST8_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	200;"	d
UNITTEST_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	16;"	d
UTF16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF16 {$/;"	s
UTF16BE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF16BE : UTF16<CharType> {$/;"	s
UTF16LE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF16LE : UTF16<CharType> {$/;"	s
UTF32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF32 {$/;"	s
UTF32BE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF32BE : UTF32<CharType> {$/;"	s
UTF32LE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF32LE : UTF32<CharType> {$/;"	s
UTF8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^struct UTF8 {$/;"	s
UTF8_ACCEPT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	32;"	d	file:
UTF8_ACCEPT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	242;"	d	file:
UTF8_REJECT	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	33;"	d	file:
UTFType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^enum UTFType {$/;"	g
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Uint(unsigned u) { return out_.Uint(u); }$/;"	f	struct:CapitalizeFilter
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Uint(unsigned u)   { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Uint(u)   && EndValue(); }$/;"	f	class:FilterKeyHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Uint(unsigned u)   { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Uint(u)   && EndValue(); }$/;"	f	class:FilterKeyHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Uint(unsigned i) {$/;"	f	class:JsonxWriter
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Uint(unsigned u) { st_ = kHasNumber; v_.SetUint(u); return true; }$/;"	f	class:LookaheadParserHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Uint(unsigned u) { type = "Uint:"; data = stringify(u); return true; }$/;"	f	struct:MyHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Uint(unsigned u) { cout << "Uint(" << u << ")" << endl; return true; }$/;"	f	struct:MyHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Uint(unsigned i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Uint(unsigned u)       { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteUint(u)); }$/;"	f	class:PrettyWriter
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Uint(unsigned) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Uint(Context& context, unsigned u) const {$/;"	f	class:internal::Schema
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Uint(unsigned u)   { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Uint,   (CurrentContext(), u), (u)); }$/;"	f	class:GenericSchemaValidator
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Uint(unsigned u) { Number n; n.u.u = u; n.d = static_cast<double>(u); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Uint(unsigned u)       { Prefix(kNumberType); return EndValue(WriteUint(u)); }$/;"	f	class:Writer
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Uint(unsigned) { return true; }$/;"	f	struct:NoOpHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint(unsigned i) { EXPECT_EQ(step_, i); step_++; return true; }$/;"	f	struct:ParseArrayHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint(unsigned i) { actual_ = i; step_++; return true; }$/;"	f	struct:ParseUintHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint(unsigned i) { return Int(static_cast<int>(i)); }$/;"	f	struct:ParseObjectHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint(unsigned) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_INT; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint(unsigned) { return e != 3; }$/;"	f	struct:TerminateHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint(unsigned) { return true; }$/;"	f	struct:NumbersAsStringsHandler
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Uint(unsigned) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Uint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Uint(unsigned) { return e != 3; }$/;"	f	struct:TerminateHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    bool Uint64(uint64_t u) { return out_.Uint64(u); }$/;"	f	struct:CapitalizeFilter
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    bool Uint64(uint64_t u) { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Uint64(u) && EndValue(); }$/;"	f	class:FilterKeyHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool Uint64(uint64_t u) { return filterValueDepth_ > 0 ? EndValue() : outputHandler_.Uint64(u) && EndValue(); }$/;"	f	class:FilterKeyHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool Uint64(uint64_t i) {$/;"	f	class:JsonxWriter
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    bool Uint64(uint64_t u) { st_ = kHasNumber; v_.SetUint64(u); return true; }$/;"	f	class:LookaheadParserHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    bool Uint64(uint64_t u) { type = "Uint64:"; data = stringify(u); return true; }$/;"	f	struct:MyHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^    bool Uint64(uint64_t u) { cout << "Uint64(" << u << ")" << endl; return true; }$/;"	f	struct:MyHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool Uint64(uint64_t i) { new (stack_.template Push<ValueType>()) ValueType(i); return true; }$/;"	f	class:GenericDocument
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    bool Uint64(uint64_t u64)   { PrettyPrefix(kNumberType); return Base::EndValue(Base::WriteUint64(u64));  }$/;"	f	class:PrettyWriter
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    bool Uint64(uint64_t) { return static_cast<Override&>(*this).Default(); }$/;"	f	struct:BaseReaderHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Uint64(Context& context, uint64_t u) const {$/;"	f	class:internal::Schema
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Uint64(uint64_t u) { Number n; n.u.u = u; n.d = static_cast<double>(u); return WriteNumber(n); }$/;"	f	class:internal::Hasher
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool Uint64(uint64_t u) { RAPIDJSON_SCHEMA_HANDLE_VALUE_(Uint64, (CurrentContext(), u), (u)); }$/;"	f	class:GenericSchemaValidator
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool Uint64(uint64_t u64)   { Prefix(kNumberType); return EndValue(WriteUint64(u64)); }$/;"	f	class:Writer
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/jsoncheckertest.cpp	/^    bool Uint64(uint64_t) { return true; }$/;"	f	struct:NoOpHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint64(uint64_t i) { actual_ = i; step_++; return true; }$/;"	f	struct:ParseUint64Handler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint64(uint64_t) { RAPIDJSON_ASSERT(LogCount < LogCapacity); Logs[LogCount++] = LOG_UINT64; return true; }$/;"	f	struct:IterativeParsingReaderHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint64(uint64_t) { return e != 5;  }$/;"	f	struct:TerminateHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool Uint64(uint64_t) { return true;  }$/;"	f	struct:NumbersAsStringsHandler
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  bool Uint64(uint64_t) { return true; }$/;"	f	struct:NumbersAsStringsHandlerWChar_t
Uint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool Uint64(uint64_t) { return e != 5; }$/;"	f	struct:TerminateHandler
Uint64Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    uint64_t Uint64Value() const { return u_; }$/;"	f	class:internal::Double
Unit	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Unit = 11,$/;"	m	class:ccls::CompletionItemKind
Unknown	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Unknown = -1,$/;"	m	class:ccls::MessageType::LanguageId
Unknown	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Unknown = 0,$/;"	m	class:ccls::SymbolKind
UnknownErrorCode	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  UnknownErrorCode = -32001,$/;"	m	class:ccls::ErrorCode
Upper	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^enum CharClass { Other, Lower, Upper };$/;"	e	enum:ccls::__anon3::CharClass	file:
Uri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^typedef GenericUri<Value> Uri;$/;"	t
UriType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    typedef GenericUri<ValueType, Allocator> UriType;$/;"	t	class:GenericPointer
UriType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericUri<ValueType, Allocator> UriType;$/;"	t	class:GenericSchemaDocument
UriType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericUri<ValueType, AllocatorType> UriType;$/;"	t	class:internal::Schema
Usable	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        inline static bool Usable(SizeType len) { return                       (MaxSize >= len); }$/;"	f	struct:GenericValue::ShortString
Use	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct Use : Ref {$/;"	s	namespace:ccls
VALIDATE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	113;"	d	file:
VFS	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^struct VFS {$/;"	s	namespace:ccls
VISIT_STRUCT_APPLYF0	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	62;"	d
VISIT_STRUCT_APPLYF1	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	63;"	d
VISIT_STRUCT_APPLYF10	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	72;"	d
VISIT_STRUCT_APPLYF11	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	73;"	d
VISIT_STRUCT_APPLYF12	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	74;"	d
VISIT_STRUCT_APPLYF13	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	75;"	d
VISIT_STRUCT_APPLYF14	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	76;"	d
VISIT_STRUCT_APPLYF15	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	77;"	d
VISIT_STRUCT_APPLYF16	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	78;"	d
VISIT_STRUCT_APPLYF17	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	79;"	d
VISIT_STRUCT_APPLYF18	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	80;"	d
VISIT_STRUCT_APPLYF19	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	81;"	d
VISIT_STRUCT_APPLYF2	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	64;"	d
VISIT_STRUCT_APPLYF20	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	82;"	d
VISIT_STRUCT_APPLYF21	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	83;"	d
VISIT_STRUCT_APPLYF22	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	84;"	d
VISIT_STRUCT_APPLYF23	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	85;"	d
VISIT_STRUCT_APPLYF24	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	86;"	d
VISIT_STRUCT_APPLYF25	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	87;"	d
VISIT_STRUCT_APPLYF26	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	88;"	d
VISIT_STRUCT_APPLYF27	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	89;"	d
VISIT_STRUCT_APPLYF28	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	90;"	d
VISIT_STRUCT_APPLYF29	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	91;"	d
VISIT_STRUCT_APPLYF3	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	65;"	d
VISIT_STRUCT_APPLYF30	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	92;"	d
VISIT_STRUCT_APPLYF31	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	93;"	d
VISIT_STRUCT_APPLYF32	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	94;"	d
VISIT_STRUCT_APPLYF33	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	95;"	d
VISIT_STRUCT_APPLYF34	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	96;"	d
VISIT_STRUCT_APPLYF35	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	97;"	d
VISIT_STRUCT_APPLYF36	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	98;"	d
VISIT_STRUCT_APPLYF37	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	99;"	d
VISIT_STRUCT_APPLYF38	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	100;"	d
VISIT_STRUCT_APPLYF39	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	101;"	d
VISIT_STRUCT_APPLYF4	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	66;"	d
VISIT_STRUCT_APPLYF40	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	102;"	d
VISIT_STRUCT_APPLYF41	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	103;"	d
VISIT_STRUCT_APPLYF42	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	104;"	d
VISIT_STRUCT_APPLYF43	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	105;"	d
VISIT_STRUCT_APPLYF44	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	106;"	d
VISIT_STRUCT_APPLYF45	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	107;"	d
VISIT_STRUCT_APPLYF46	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	108;"	d
VISIT_STRUCT_APPLYF47	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	109;"	d
VISIT_STRUCT_APPLYF48	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	110;"	d
VISIT_STRUCT_APPLYF49	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	111;"	d
VISIT_STRUCT_APPLYF5	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	67;"	d
VISIT_STRUCT_APPLYF50	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	112;"	d
VISIT_STRUCT_APPLYF51	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	113;"	d
VISIT_STRUCT_APPLYF52	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	114;"	d
VISIT_STRUCT_APPLYF53	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	115;"	d
VISIT_STRUCT_APPLYF54	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	116;"	d
VISIT_STRUCT_APPLYF55	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	117;"	d
VISIT_STRUCT_APPLYF56	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	118;"	d
VISIT_STRUCT_APPLYF57	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	119;"	d
VISIT_STRUCT_APPLYF58	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	120;"	d
VISIT_STRUCT_APPLYF59	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	121;"	d
VISIT_STRUCT_APPLYF6	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	68;"	d
VISIT_STRUCT_APPLYF60	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	122;"	d
VISIT_STRUCT_APPLYF61	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	123;"	d
VISIT_STRUCT_APPLYF62	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	124;"	d
VISIT_STRUCT_APPLYF63	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	125;"	d
VISIT_STRUCT_APPLYF64	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	126;"	d
VISIT_STRUCT_APPLYF65	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	127;"	d
VISIT_STRUCT_APPLYF66	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	128;"	d
VISIT_STRUCT_APPLYF67	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	129;"	d
VISIT_STRUCT_APPLYF68	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	130;"	d
VISIT_STRUCT_APPLYF69	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	131;"	d
VISIT_STRUCT_APPLYF7	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	69;"	d
VISIT_STRUCT_APPLYF8	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	70;"	d
VISIT_STRUCT_APPLYF9	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	71;"	d
VISIT_STRUCT_APPLY_F_	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	133;"	d
VISIT_STRUCT_CONCAT	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	60;"	d
VISIT_STRUCT_CONCAT_	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	59;"	d
VISIT_STRUCT_EXPAND	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	40;"	d
VISIT_STRUCT_PP_ARG_N	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	41;"	d
VISIT_STRUCT_PP_NARG	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	49;"	d
Validate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:AutoUTF
Validate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static RAPIDJSON_FORCEINLINE bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:Transcoder
Validate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:ASCII
Validate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:UTF16
Validate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:UTF32
Validate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    static bool Validate(InputStream& is, OutputStream& os) {$/;"	f	struct:UTF8
ValidateErrorCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^enum ValidateErrorCode {$/;"	g
ValidateFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^enum ValidateFlag {$/;"	g
Value	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Value = 12,$/;"	m	class:ccls::CompletionItemKind
Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^typedef GenericValue<UTF8<> > Value;$/;"	t
Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/fwd.h	/^typedef GenericValue<UTF8<char>, MemoryPoolAllocator<CrtAllocator> > Value;$/;"	t
Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    double Value() const { return d_; }$/;"	f	class:internal::Double
Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^    enum { Value = (sizeof(Check(Host(), 0)) == sizeof(Yes)) };$/;"	e	enum:internal::IsBaseOfImpl::__anon46
Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^    static const bool Value = Cond;$/;"	m	struct:internal::BoolType
Value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^typedef ::myjson::Document::ValueType Value;$/;"	t	namespace:myjson	file:
ValueCounter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    ValueCounter() : count_(1) {}   \/\/ root$/;"	f	struct:ValueCounter
ValueCounter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^struct ValueCounter : public BaseReaderHandler<> {$/;"	s	file:
ValueIntComparer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^struct ValueIntComparer {$/;"	s	file:
ValueIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericValue* ValueIterator;            \/\/!< Value iterator for iterating in array.$/;"	t	class:GenericValue
ValueIterator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef ValueType* ValueIterator;  \/\/ This may be const or non-const iterator$/;"	t	class:GenericArray
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/schemavalidator/schemavalidator.cpp	/^typedef GenericValue<UTF8<>, CrtAllocator > ValueType;$/;"	t	file:
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericValue<Encoding, Allocator> ValueType;    \/\/!< Value type of itself.$/;"	t	class:GenericValue
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef GenericValue<Encoding, Allocator> ValueType;    \/\/!< Value type of the document.$/;"	t	class:GenericDocument
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename internal::MaybeAddConst<Const,PlainType>::Type ValueType;$/;"	t	class:GenericArray
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename internal::MaybeAddConst<Const,PlainType>::Type ValueType;$/;"	t	class:GenericMemberIterator
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef typename internal::MaybeAddConst<Const,PlainType>::Type ValueType;$/;"	t	class:GenericObject
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericValue<EncodingType, StateAllocator> ValueType;$/;"	t	class:GenericSchemaValidator
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef GenericValue<SourceEncoding, StackAllocator> ValueType;$/;"	t	class:SchemaValidatingReader
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef ValueT ValueType;$/;"	t	class:GenericSchemaDocument
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::ValueType ValueType;$/;"	t	class:IGenericRemoteSchemaDocumentProvider
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaDocumentType::ValueType ValueType;$/;"	t	class:internal::Schema
ValueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    typedef typename SchemaType::ValueType ValueType;$/;"	t	struct:internal::SchemaValidationContext
VarDef	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^struct VarDef : NameMixin<VarDef> {$/;"	s	namespace:ccls
VarType	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^  enum VarType {};$/;"	g	namespace:ns	file:
VarType	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_cstyle_cast.cc	/^enum VarType {};$/;"	g	file:
Variable	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Variable = 13,$/;"	m	class:ccls::SymbolKind
Variable	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Variable = 6,$/;"	m	class:ccls::CompletionItemKind
Vec	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  Vec(const Vec &o) : a(std::make_unique<T[]>(o.s)), s(o.s) {$/;"	f	struct:ccls::Vec
Vec	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  Vec(std::unique_ptr<T[]> a, int s) : a(std::move(a)), s(s) {}$/;"	f	struct:ccls::Vec
Vec	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^template <typename T> struct Vec {$/;"	s	namespace:ccls
Verbosity	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^enum Verbosity {$/;"	g	namespace:ccls::log
Verbosity_ERROR	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  Verbosity_ERROR = -2,$/;"	e	enum:ccls::log::Verbosity
Verbosity_FATAL	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  Verbosity_FATAL = -3,$/;"	e	enum:ccls::log::Verbosity
Verbosity_INFO	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  Verbosity_INFO = 0,$/;"	e	enum:ccls::log::Verbosity
Verbosity_WARNING	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  Verbosity_WARNING = -1,$/;"	e	enum:ccls::log::Verbosity
Verify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^static void Verify(void(*f)(T, char*), char* (*g)(T, char*)) {$/;"	f	file:
VerifyValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^static void VerifyValue(T value, void(*f)(T, char*), char* (*g)(T, char*)) {$/;"	f	file:
VersionedTextDocumentIdentifier	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct VersionedTextDocumentIdentifier {$/;"	s	namespace:ccls
Void	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^template <typename T> struct Void { typedef void Type; };$/;"	s	namespace:internal
Voidify	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^struct Voidify {$/;"	s	namespace:ccls::log
WCHAR_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	261;"	d
WCHAR_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	258;"	d
WINT_MAX	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	265;"	d
WINT_MIN	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	264;"	d
WIStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^typedef BasicIStreamWrapper<std::wistream> WIStreamWrapper;$/;"	t
WIStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  WIStreamWrapper(std::wistream& is) : is_(is) {}$/;"	f	class:WIStreamWrapper
WIStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^class WIStreamWrapper {$/;"	c	file:
WOStreamWrapper	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^typedef BasicOStreamWrapper<std::wostream> WOStreamWrapper;$/;"	t
WRITER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	213;"	d	file:
WRITER	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	292;"	d	file:
Warning	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^enum class MessageType : int { Error = 1, Warning = 2, Info = 3, Log = 4 };$/;"	m	class:ccls::MessageType
WorkDoneProgress	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct WorkDoneProgress {$/;"	s	namespace:ccls
WorkDoneProgressCreateParam	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^struct WorkDoneProgressCreateParam {$/;"	s	namespace:ccls::__anon31	file:
WorkDoneProgressParam	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct WorkDoneProgressParam {$/;"	s	namespace:ccls
WorkingFile	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^WorkingFile::WorkingFile(const std::string &filename,$/;"	f	class:ccls::WorkingFile
WorkingFile	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^struct WorkingFile {$/;"	s	namespace:ccls
WorkingFiles	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^struct WorkingFiles {$/;"	s	namespace:ccls
Workspace	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    struct Workspace {$/;"	s	struct:ccls::Config::ServerCap
WorkspaceClientCap	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^struct WorkspaceClientCap {$/;"	s	class:ccls::__anon17::TextDocumentSyncKind	file:
WorkspaceEdit	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct WorkspaceEdit {$/;"	s	namespace:ccls
WorkspaceEdit	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  struct WorkspaceEdit {$/;"	s	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
WorkspaceFolder	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct WorkspaceFolder {$/;"	s	namespace:ccls
WorkspaceFolders	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      struct WorkspaceFolders {$/;"	s	struct:ccls::Config::ServerCap::Workspace
WorkspaceSymbol	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct WorkspaceSymbol {$/;"	s	struct:ccls::Config
WorkspaceSymbolParam	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^struct WorkspaceSymbolParam {$/;"	s	class:ccls::InsertTextFormat
Wrapper	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_implicit_ctor.cc	/^struct Wrapper {$/;"	s	file:
Write	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Write = 1 << 4,$/;"	m	class:ccls::Role
Write	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  enum Kind { Text = 1, Read = 2, Write = 3 };$/;"	e	enum:ccls::__anon21::DocumentHighlight::Kind	file:
WriteBool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteBool(bool b)  {$/;"	f	class:Writer
WriteBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool WriteBuffer(Type type, const void* data, size_t len) {$/;"	f	class:internal::Hasher
WriteDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteDouble(double d) {$/;"	f	class:Writer
WriteDouble	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteDouble(double d) {$/;"	f	class:Writer
WriteEndArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteEndArray()    { os_->Put(']'); return true; }$/;"	f	class:Writer
WriteEndElement	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool WriteEndElement(const char* type) {$/;"	f	class:JsonxWriter	file:
WriteEndObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteEndObject()   { os_->Put('}'); return true; }$/;"	f	class:Writer
WriteEscapedAttributeValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool WriteEscapedAttributeValue(const char* s, size_t length) {$/;"	f	class:JsonxWriter	file:
WriteEscapedText	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool WriteEscapedText(const char* s, size_t length) {$/;"	f	class:JsonxWriter	file:
WriteExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline char* WriteExponent(int K, char* buffer) {$/;"	f	namespace:internal
WriteFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^enum WriteFlag {$/;"	g
WriteIndent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    void WriteIndent()  {$/;"	f	class:PrettyWriter
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteInt(int i) {$/;"	f	class:Writer
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteInt(int i) {$/;"	f	class:Writer
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt(int i) {$/;"	f	class:Writer1
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt(int i) {$/;"	f	class:Writer2
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt(int i) {$/;"	f	class:Writer3
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt(int i) {$/;"	f	class:Writer4
WriteInt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^bool rapidjson::Writer<InsituStringStream>::WriteInt(int i) {$/;"	f	class:rapidjson::rapidjson::Writer
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteInt64(int64_t i64) {$/;"	f	class:Writer
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteInt64(int64_t i64) {$/;"	f	class:Writer
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt64(int64_t i64) {$/;"	f	class:Writer1
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt64(int64_t i64) {$/;"	f	class:Writer2
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt64(int64_t i64) {$/;"	f	class:Writer3
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteInt64(int64_t i64) {$/;"	f	class:Writer4
WriteInt64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^bool Writer<InsituStringStream>::WriteInt64(int64_t i64) {$/;"	f	class:rapidjson::Writer
WriteNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteNull()  {$/;"	f	class:Writer
WriteNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool WriteNumber(const Number& n) { return WriteBuffer(kNumberType, &n, sizeof(n)); }$/;"	f	class:internal::Hasher
WriteNumberElement	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool WriteNumberElement(const char* buffer, int length) {$/;"	f	class:JsonxWriter	file:
WriteRawValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteRawValue(const Ch* json, size_t length) {$/;"	f	class:Writer
WriteStartArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteStartArray()  { os_->Put('['); return true; }$/;"	f	class:Writer
WriteStartElement	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool WriteStartElement(const char* type, bool emptyElement = false) {$/;"	f	class:JsonxWriter	file:
WriteStartObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteStartObject() { os_->Put('{'); return true; }$/;"	f	class:Writer
WriteString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool WriteString(const char* s) {$/;"	f	class:JsonxWriter	file:
WriteString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteString(const Ch* str, SizeType length)  {$/;"	f	class:Writer
WriteType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool WriteType(Type type) { return WriteBuffer(type, 0, 0); }$/;"	f	class:internal::Hasher
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteUint(unsigned u) {$/;"	f	class:Writer
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteUint(unsigned u) {$/;"	f	class:Writer
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint(unsigned u) {$/;"	f	class:Writer1
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint(unsigned u) {$/;"	f	class:Writer2
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint(unsigned u) {$/;"	f	class:Writer3
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint(unsigned u) {$/;"	f	class:Writer4
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^bool Writer1<rapidjson::StringBuffer>::WriteUint(unsigned u) {$/;"	f	class:Writer1
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^bool Writer<InsituStringStream>::WriteUint(unsigned u) {$/;"	f	class:rapidjson::Writer
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer3<rapidjson::InsituStringStream>::WriteUint(unsigned u) {$/;"	f	class:Writer3
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer3<rapidjson::StringBuffer>::WriteUint(unsigned u) {$/;"	f	class:Writer3
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer4<rapidjson::InsituStringStream>::WriteUint(unsigned u) {$/;"	f	class:Writer4
WriteUint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer4<rapidjson::StringBuffer>::WriteUint(unsigned u) {$/;"	f	class:Writer4
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool WriteUint64(uint64_t u64) {$/;"	f	class:Writer
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^inline bool Writer<StringBuffer>::WriteUint64(uint64_t u) {$/;"	f	class:Writer
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint64(uint64_t u64) {$/;"	f	class:Writer1
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint64(uint64_t u64) {$/;"	f	class:Writer2
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint64(uint64_t u64) {$/;"	f	class:Writer3
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    bool WriteUint64(uint64_t u64) {$/;"	f	class:Writer4
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^bool Writer<InsituStringStream>::WriteUint64(uint64_t u) {$/;"	f	class:rapidjson::Writer
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer3<rapidjson::InsituStringStream>::WriteUint64(uint64_t u) {$/;"	f	class:Writer3
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer3<rapidjson::StringBuffer>::WriteUint64(uint64_t u) {$/;"	f	class:Writer3
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer4<rapidjson::InsituStringStream>::WriteUint64(uint64_t u) {$/;"	f	class:Writer4
WriteUint64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^inline bool Writer4<rapidjson::StringBuffer>::WriteUint64(uint64_t u) {$/;"	f	class:Writer4
WriteUint64Reverse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void WriteUint64Reverse(char* d, uint64_t u) {$/;"	f	class:Writer3	file:
WriteUint64Reverse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void WriteUint64Reverse(char* d, uint64_t u) {$/;"	f	class:Writer4	file:
WriteUintReverse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void WriteUintReverse(char* d, unsigned u) {$/;"	f	class:Writer3	file:
WriteUintReverse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    void WriteUintReverse(char* d, unsigned u) {$/;"	f	class:Writer4	file:
Writer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    Writer(OutputStream& os, StackAllocator* stackAllocator = 0, size_t levelDepth = kDefaultLevelDepth) : $/;"	f	class:Writer
Writer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    Writer(StackAllocator* allocator = 0, size_t levelDepth = kDefaultLevelDepth) :$/;"	f	class:Writer
Writer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    Writer(Writer&& rhs) :$/;"	f	class:Writer
Writer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^class Writer {$/;"	c
Writer1	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer1() : os_() {}$/;"	f	class:Writer1
Writer1	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer1(OutputStream& os) : os_(&os) {}$/;"	f	class:Writer1
Writer1	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^class Writer1 {$/;"	c	file:
Writer2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer2() : os_() {}$/;"	f	class:Writer2
Writer2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer2(OutputStream& os) : os_(&os) {}$/;"	f	class:Writer2
Writer2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^class Writer2 {$/;"	c	file:
Writer3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer3() : os_() {}$/;"	f	class:Writer3
Writer3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer3(OutputStream& os) : os_(&os) {}$/;"	f	class:Writer3
Writer3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^class Writer3 {$/;"	c	file:
Writer4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer4() : os_() {}$/;"	f	class:Writer4
Writer4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    Writer4(OutputStream& os) : os_(&os) {}$/;"	f	class:Writer4
Writer4	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^class Writer4 {$/;"	c	file:
WriterGen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^static PrettyWriter<StringBuffer> WriterGen(StringBuffer &target) {$/;"	f	file:
WriterGen	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^static Writer<StringBuffer> WriterGen(StringBuffer &target) {$/;"	f	file:
Xref	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  struct Xref {$/;"	s	struct:ccls::Config
Yes	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^    typedef char (&Yes)[1];$/;"	t	struct:internal::IsBaseOfImpl
Z1	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^struct Z1 {};$/;"	s	file:
Z16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	1001;"	d
Z16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	993;"	d
Z16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	380;"	d
Z16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	388;"	d
Z2	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^struct Z2 {};$/;"	s	file:
_CRTDBG_MAP_ALLOC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	62;"	d
_CRTDBG_MAP_ALLOC	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	35;"	d
_MAPPABLE_REFLECT_ARRAY	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	170;"	d
_MAPPABLE_REFLECT_MEMBER	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	161;"	d
_MSC_INTTYPES_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	42;"	d
_MSC_STDINT_H_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	42;"	d
_W64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	106;"	d
_W64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	108;"	d
__STDC_CONSTANT_MACROS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	45;"	d
__STDC_CONSTANT_MACROS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	27;"	d
__STDC_FORMAT_MACROS	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	19;"	d	file:
a	/home/yl/vim/vim/ccls/ccls/index_tests/foobar.cc	/^Foo<A>::Inner a;$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_class_template_func_usage_folded_into_one.cc	/^  int a = Foo<int>::foo<float>();$/;"	m	namespace:ns	file:
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_type_usage_folded_into_one.cc	/^  Foo<int> a;$/;"	m	namespace:ns	file:
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_func_usage_folded_into_one.cc	/^int a = Foo<int>::foo();$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_template_func_usage_folded_into_one.cc	/^int a = Foo<int>::foo<float>();$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_type_usage_folded_into_one.cc	/^Foo<A>::Inner a;$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_var_usage_folded_into_one.cc	/^int a = Foo<int>::var;$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_func_usage_folded_into_one.cc	/^int a = foo<int>();$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_type_usage_folded_into_one.cc	/^Foo<int> a;$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_var_usage_folded_into_one.cc	/^A a = var<A>;$/;"	v
a	/home/yl/vim/vim/ccls/ccls/index_tests/unions/union_decl.cc	/^  int a;$/;"	m	union:Foo	file:
a	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_field.cc	/^  ForwardType* a;$/;"	m	struct:Foo	file:
a	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_static.cc	/^static int a;$/;"	v	file:
a	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  std::unique_ptr<T[]> a;$/;"	m	struct:ccls::Vec
a	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        ArrayData a;$/;"	m	union:GenericValue::Data
a 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^a {$/;"	s
a.el 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^a.el {$/;"	s
abcde_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    const char* abcde_;$/;"	m	class:FileStreamTest	file:
abort	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^abort() {$/;"	f
absolute_path	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^  std::string absolute_path;$/;"	m	struct:ccls::__anon4::CompletionCandidate	file:
absolute_path_to_completion_item	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  std::unordered_map<std::string, int> absolute_path_to_completion_item;$/;"	m	struct:ccls::IncludeComplete
accept	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_typedef_and_using.cc	/^void accept(Foo*) {}$/;"	f
accept1	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_typedef_and_using.cc	/^void accept1(Foo1*) {}$/;"	f
accept2	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_typedef_and_using.cc	/^void accept2(Foo2*) {}$/;"	f
accept3	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_typedef_and_using.cc	/^void accept3(Foo3*) {}$/;"	f
act	/home/yl/vim/vim/ccls/ccls/index_tests/unions/union_usage.cc	/^void act(Foo*) {$/;"	f
action	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    action="store_true",$/;"	v
activeParameter	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  int activeParameter = 0;$/;"	m	struct:ccls::__anon29::SignatureHelp	file:
activeSignature	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  int activeSignature = 0;$/;"	m	struct:ccls::__anon29::SignatureHelp	file:
active_threads	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^int active_threads;$/;"	m	namespace:ccls::pipeline::__anon32	file:
actual_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    double actual_;$/;"	m	struct:ParseDoubleHandler	file:
actual_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    int actual_;$/;"	m	struct:ParseIntHandler	file:
actual_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    int64_t actual_;$/;"	m	struct:ParseInt64Handler	file:
actual_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    uint64_t actual_;$/;"	m	struct:ParseUint64Handler	file:
actual_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned actual_;$/;"	m	struct:ParseUintHandler	file:
addFile	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^void IncludeComplete::addFile(const std::string &path) {$/;"	f	class:ccls::IncludeComplete
addMacroUse	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  void addMacroUse(IndexFile *db, SourceManager &sm, Usr usr, Kind kind,$/;"	f	class:ccls::__anon5::IndexDataConsumer
addRange	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void addRange(std::vector<T> &into, const std::vector<T> &from) {$/;"	f	namespace:ccls::__anon34
addSymbol	/home/yl/vim/vim/ccls/ccls/src/messages/workspace.cc	/^bool addSymbol($/;"	f	namespace:ccls::__anon30
added	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^    std::vector<WorkspaceFolder> added, removed;$/;"	m	struct:ccls::InsertTextFormat::DidChangeWorkspaceFoldersParam::Event
additionalItemsSchema_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* additionalItemsSchema_;$/;"	m	class:internal::Schema
additionalItems_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool additionalItems_;$/;"	m	class:internal::Schema
additionalPropertiesSchema_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* additionalPropertiesSchema_;$/;"	m	class:internal::Schema
additionalProperties_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool additionalProperties_;$/;"	m	class:internal::Schema
additionalTextEdits	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::vector<TextEdit> additionalTextEdits;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
after 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.contents a[href ^= "http"]:after {$/;"	s
age	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    unsigned age;$/;"	m	struct:Student	file:
age_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    unsigned age_;$/;"	m	class:Person	file:
alias_of	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Usr alias_of = 0;$/;"	m	struct:ccls::TypeDef
alignColumn	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^int alignColumn(const std::string &a, int column, std::string b, bool is_end) {$/;"	f	namespace:ccls::__anon37
allOf_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaArray allOf_;$/;"	m	class:internal::Schema
alloc	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::shared_ptr<clang::GlobalCodeCompletionAllocator> alloc;$/;"	m	class:ccls::__anon20::CompletionConsumer	file:
alloc	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  std::shared_ptr<GlobalCodeCompletionAllocator> alloc;$/;"	m	class:ccls::__anon29::SignatureHelpConsumer	file:
alloc	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^static BumpPtrAllocator alloc;$/;"	m	namespace:ccls	file:
allocMutex	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^static std::mutex allocMutex;$/;"	m	namespace:ccls	file:
allocate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    U* allocate(size_type n = 1, const void* = 0)$/;"	f	class:StdAllocator
allocate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    pointer allocate(size_type n = 1, const void* = 0)$/;"	f	class:StdAllocator
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Allocator* allocator_;$/;"	m	class:GenericDocument
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Allocator* allocator_;$/;"	m	class:internal::GenericRegex
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Allocator* allocator_;$/;"	m	class:internal::GenericRegexSearch
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    Allocator* allocator_;$/;"	m	class:internal::Stack
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Allocator* allocator_;                  \/\/!< The current allocator. It is either user-supplied or equal to ownAllocator_.$/;"	m	class:GenericPointer
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Allocator *allocator_;$/;"	m	class:GenericSchemaDocument
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    AllocatorType* allocator_;$/;"	m	class:internal::Schema
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    StackAllocator allocator_;$/;"	m	class:SchemaValidatingReader
allocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Allocator* allocator_;      \/\/!< The current allocator. It is either user-supplied or equal to ownAllocator_.$/;"	m	class:GenericUri
allocator_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef std::allocator<T> allocator_type;$/;"	t	class:StdAllocator
allocator_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef std::allocator<void> allocator_type;$/;"	t	class:StdAllocator
anchorBegin_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool anchorBegin_;$/;"	m	class:internal::GenericRegex
anchorEnd_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    bool anchorEnd_;$/;"	m	class:internal::GenericRegex
anyDef	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Def *anyDef() {$/;"	f	struct:ccls::QueryEntity
anyDef	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  const Def *anyDef() const {$/;"	f	struct:ccls::QueryEntity
anyOf_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaArray anyOf_;$/;"	m	class:internal::Schema
appendSerializationFormat	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::string appendSerializationFormat(const std::string &base) {$/;"	f	namespace:ccls::pipeline::__anon32
appendToCDB	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^bool appendToCDB(const std::vector<const char *> &args) {$/;"	f	namespace:ccls::__anon33
apply	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^  std::string apply(const std::string &content) {$/;"	f	struct:ccls::TextReplacer
applyEdit	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::optional<bool> applyEdit;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
applyIndexUpdate	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void DB::applyIndexUpdate(IndexUpdate *u) {$/;"	f	class:ccls::DB
argparse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    import argparse$/;"	i
args	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<const char *> args;$/;"	m	struct:ccls::IndexFile
args	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  std::vector<const char *> args;$/;"	m	struct:ccls::pipeline::__anon32::IndexRequest	file:
args	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::vector<const char *> args;$/;"	m	struct:ccls::Project::Entry
args	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^    std::vector<const char *> args;$/;"	m	struct:ccls::QueryFile::Def
arguments	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::vector<std::string> arguments;$/;"	m	struct:ccls::__anon19::Command	file:
arial	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	s
arrayElementHashCodes	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void* arrayElementHashCodes; \/\/ Only validator access this$/;"	m	struct:internal::SchemaValidationContext
arrayElementIndex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType arrayElementIndex;$/;"	m	struct:internal::SchemaValidationContext
arrayUniqueness	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool arrayUniqueness;$/;"	m	struct:internal::SchemaValidationContext
as_return_type	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_complex.cc	/^unique_ptr<unique_ptr<S1, S2>, S2>* as_return_type(unique_ptr<S1, S2>*) { return nullptr; }$/;"	f
ascii	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    ASCII<char>* ascii;$/;"	m	struct:Foo	file:
assignFileId	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void assignFileId(const Lid2file_id &lid2file_id, int file_id, Use &use) {$/;"	f	namespace:ccls::__anon34
auth_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* auth_;   \/\/ Includes the \/\/$/;"	m	class:GenericUri
autoutf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    AutoUTF<unsigned>* autoutf;$/;"	m	struct:Foo	file:
b	/home/yl/vim/vim/ccls/ccls/index_tests/foobar.cc	/^Foo<B> b;$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_class_template_func_usage_folded_into_one.cc	/^  int b = Foo<bool>::foo<double>();$/;"	m	namespace:ns	file:
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_type_usage_folded_into_one.cc	/^  Foo<bool> b;$/;"	m	namespace:ns	file:
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_func_usage_folded_into_one.cc	/^int b = Foo<bool>::foo();$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_template_func_usage_folded_into_one.cc	/^int b = Foo<bool>::foo<double>();$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_type_usage_folded_into_one.cc	/^Foo<B>::Inner b;$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_var_usage_folded_into_one.cc	/^int b = Foo<bool>::var;$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_func_usage_folded_into_one.cc	/^int b = foo<bool>();$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_type_usage_folded_into_one.cc	/^Foo<bool> b;$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_var_usage_folded_into_one.cc	/^B b = var<B>;$/;"	v
b	/home/yl/vim/vim/ccls/ccls/index_tests/unions/union_decl.cc	/^  bool b;$/;"	m	union:Foo	file:
b	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_field.cc	/^  ImplementedType b;$/;"	m	struct:Foo	file:
background-color: #343131	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	background-color: #343131;$/;"	s
background-image: none	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	background-image: none;$/;"	s
backlog_path	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string backlog_path;$/;"	m	struct:ccls::InMessage
bar	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_alias.cc	/^    namespace bar {$/;"	n	namespace:foo	file:
bar	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_on_return_type.cc	/^static Type* bar() { return nullptr; }$/;"	f	file:
base	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^  bool base = true;$/;"	m	struct:ccls::__anon27::ReferenceParam	file:
baseAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        baseAllocator_()$/;"	f	class:StdAllocator
baseAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        baseAllocator_(allocator)$/;"	f	class:StdAllocator
baseAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        baseAllocator_(baseAllocator)$/;"	f	class:StdAllocator
baseAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        baseAllocator_(rhs.baseAllocator_)$/;"	f	class:StdAllocator
baseAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    BaseAllocator baseAllocator_;$/;"	m	class:StdAllocator
baseAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    BaseAllocator* baseAllocator_;  \/\/!< base allocator for allocating memory chunks.$/;"	m	class:MemoryPoolAllocator
base_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* base_;   \/\/ Everything except fragment$/;"	m	class:GenericUri
basereaderhandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    BaseReaderHandler<UTF8<char>, void>* basereaderhandler;$/;"	m	struct:Foo	file:
bases	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<Usr> bases;$/;"	m	struct:ccls::FuncDef
bases	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<Usr> bases;$/;"	m	struct:ccls::TypeDef
bases_begin	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const Usr *bases_begin() const { return bases.begin(); }$/;"	f	struct:ccls::FuncDef
bases_begin	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const Usr *bases_begin() const { return bases.begin(); }$/;"	f	struct:ccls::TypeDef
bases_begin	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const Usr *bases_begin() const { return nullptr; }$/;"	f	struct:ccls::VarDef
bases_end	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const Usr *bases_end() const { return bases.end(); }$/;"	f	struct:ccls::FuncDef
bases_end	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const Usr *bases_end() const { return bases.end(); }$/;"	f	struct:ccls::TypeDef
bases_end	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const Usr *bases_end() const { return nullptr; }$/;"	f	struct:ccls::VarDef
baz	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_alias.cc	/^         namespace baz {$/;"	n	namespace:foo::bar	file:
begin	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  T *begin() { return a.get(); }$/;"	f	struct:ccls::Vec
begin	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  const T *begin() const { return a.get(); }$/;"	f	struct:ccls::Vec
begin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator begin() const { return value_.MemberBegin(); }$/;"	f	class:GenericObject
begin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator begin() const { return value_.Begin(); }$/;"	f	class:GenericArray
begin	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SizeType begin; \/\/ begin index of context.validators$/;"	m	struct:internal::Schema::SchemaArray
begin_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    const Ch* begin_;   \/\/!< Original head of the string.$/;"	m	struct:MemoryStream
bind	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void MessageHandler::bind(const char *method,$/;"	f	class:ccls::MessageHandler
blacklist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      std::vector<std::string> blacklist;$/;"	m	struct:ccls::Config::Completion::Include
blacklist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> blacklist;$/;"	m	struct:ccls::Config::Diagnostics
blacklist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> blacklist;$/;"	m	struct:ccls::Config::Highlight
blacklist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> blacklist;$/;"	m	struct:ccls::Config::Index
blacklist	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_reload.cc	/^  std::vector<std::string> blacklist;$/;"	m	struct:ccls::__anon14::Param	file:
blacklist	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  std::vector<Matcher> whitelist, blacklist;$/;"	m	struct:ccls::GroupMatch
body	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body, table, div, p, dl {$/;"	s
body 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body {$/;"	s
body code 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body code {$/;"	s
body h1 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body h1 {$/;"	s
body h2 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body h2 {$/;"	s
border-top: 60px solid #2980b9	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	border-top: 60px solid #2980b9;$/;"	s
buf_	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  std::string buf_;$/;"	m	struct:ccls::BinaryWriter
buffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/simdtest.cpp	/^    char buffer[1024 + 5 + 32];$/;"	m	struct:ScanCopyUnescapedStringHandler	file:
bufferEnd_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    char *bufferEnd_;$/;"	m	class:FileWriteStream
bufferLast_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    Ch *bufferLast_;$/;"	m	class:FileReadStream
bufferLast_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch *bufferLast_;$/;"	m	class:BasicIStreamWrapper
bufferSize_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    size_t bufferSize_;$/;"	m	class:FileReadStream
bufferSize_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    size_t bufferSize_;$/;"	m	class:BasicIStreamWrapper
buffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    std::vector<char> buffer_;$/;"	m	struct:CapitalizeFilter	file:
buffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    Ch *buffer_;$/;"	m	class:FileReadStream
buffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    char *buffer_;$/;"	m	class:FileWriteStream
buffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch peekBuffer_[4], *buffer_;$/;"	m	class:BasicIStreamWrapper
buffer_content	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::string buffer_content;$/;"	m	struct:ccls::WorkingFile
buffer_lines	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::vector<std::string> buffer_lines;$/;"	m	struct:ccls::WorkingFile
buffer_to_index	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::vector<int> buffer_to_index;$/;"	m	struct:ccls::WorkingFile
buildCompilerInstance	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^buildCompilerInstance(Session &session, std::unique_ptr<CompilerInvocation> ci,$/;"	f	namespace:clang::ccls::__anon36
buildCompilerInvocation	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^buildCompilerInvocation(const std::string &main, std::vector<const char *> args,$/;"	f	namespace:ccls
buildCompletionItem	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^CompletionItem buildCompletionItem(const std::string &path, int kind) {$/;"	f	namespace:ccls::__anon4
buildFileDefUpdate	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^QueryFile::DefUpdate buildFileDefUpdate(IndexFile &&indexed) {$/;"	f	namespace:ccls::__anon34
buildInitial	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^std::optional<Out_cclsCall> buildInitial(MessageHandler *m, Usr root_usr,$/;"	f	class:ccls::__anon9::CallType	file:
buildInitial	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^std::optional<Out_cclsInheritance> buildInitial(MessageHandler *m,$/;"	f	namespace:ccls::__anon11
buildInitial	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^std::optional<Out_cclsMember> buildInitial(MessageHandler *m, Kind kind,$/;"	f	namespace:ccls::__anon12
buildItem	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^void buildItem(const CodeCompletionResult &r, const CodeCompletionString &ccs,$/;"	f	namespace:ccls::__anon20
buildOptional	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^void buildOptional(const CodeCompletionString &ccs, std::string &label,$/;"	f	namespace:ccls::__anon29
buildPreamble	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void buildPreamble(Session &session, CompilerInvocation &ci,$/;"	f	namespace:clang::ccls::__anon36
buildWorkspaceEdit	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_rename.cc	/^WorkspaceEdit buildWorkspaceEdit(DB *db, WorkingFiles *wfiles, SymbolRef sym,$/;"	f	namespace:ccls::__anon28
cCTUInfo	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  CodeCompletionTUInfo cCTUInfo;$/;"	m	class:ccls::__anon29::SignatureHelpConsumer	file:
cIterativeParsingStateCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        cIterativeParsingStateCount$/;"	e	enum:GenericReader::IterativeParsingState
cROUNDS	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	23;"	d	file:
cache	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } cache;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Cache
cache	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  llvm::StringMap<ErrorOr<llvm::vfs::Status>> cache;$/;"	m	struct:clang::ccls::PreambleStatCache	file:
cacheInvalid	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^bool cacheInvalid(VFS *vfs, IndexFile *prev, const std::string &path,$/;"	f	namespace:ccls::pipeline::__anon32
calculateRoles	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^void calculateRoles(std::string_view s, int roles[], int *class_set) {$/;"	f	namespace:ccls::__anon3
callType	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  CallType callType = CallType::All;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
callType	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  CallType callType = CallType::Direct;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
called	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_constructor.cc	/^void called() {}$/;"	f
called	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_implicit_ctor.cc	/^int called() { return 1; }$/;"	f
called	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_call_func.cc	/^void called() {}$/;"	f
called	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_call_function.cc	/^void called() {}$/;"	f
callee	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  bool callee = false;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
callees	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<SymbolRef> callees;$/;"	m	struct:ccls::FuncDef
caller	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_macro_argument.cc	/^void caller() {$/;"	f
caller	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_template.cc	/^void caller() {$/;"	f
caller	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_implicit_ctor.cc	/^Wrapper caller() {$/;"	f
caller	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_call_func.cc	/^void caller() {$/;"	f
caller	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_call_function.cc	/^void caller() {$/;"	f
caller22	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.cc	/^void caller22() {$/;"	f
canSwim	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    bool canSwim;$/;"	m	struct:Student	file:
capabilities	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } capabilities;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::ServerCap
capabilities	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  ClientCap capabilities;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeParam	file:
capabilities	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  ServerCap capabilities;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult	file:
capacity	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  int capacity = 1;$/;"	m	struct:ccls::LruCache
capacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        size_t capacity;    \/\/!< Capacity of the chunk in bytes (excluding the header itself).$/;"	m	struct:MemoryPoolAllocator::ChunkHeader
capacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        SizeType capacity;$/;"	m	struct:GenericValue::ArrayData
capacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        SizeType capacity;$/;"	m	struct:GenericValue::ObjectData
caseSensitivity	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int caseSensitivity = 1;$/;"	m	struct:ccls::Config::WorkspaceSymbol
caseSensitivity	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int caseSensitivity = 2;$/;"	m	struct:ccls::Config::Completion
case_sensitivity	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  int case_sensitivity;$/;"	m	class:ccls::FuzzyMatcher
cases	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^def cases(paths):$/;"	f
category	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  unsigned category;$/;"	m	struct:ccls::DiagBase
cc_opts	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    clang::CodeCompleteOptions cc_opts;$/;"	m	struct:ccls::SemaManager::CompTask
ccls	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/clang_tu.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/config.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/hierarchy.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/main.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_reload.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_vars.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_definition.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_did.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_rename.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/messages/workspace.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/platform.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/platform_posix.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/platform_win.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^namespace ccls {$/;"	n	class:clang	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/test.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^namespace ccls {$/;"	n
ccls	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^namespace ccls {$/;"	n	file:
ccls	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^namespace ccls {$/;"	n
ccls_call	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^void MessageHandler::ccls_call(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::__anon9::MessageHandler
ccls_fileInfo	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^void MessageHandler::ccls_fileInfo(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
ccls_info	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^void MessageHandler::ccls_info(EmptyParam &, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
ccls_inheritance	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^void MessageHandler::ccls_inheritance(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
ccls_member	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^void MessageHandler::ccls_member(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
ccls_navigate	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^void MessageHandler::ccls_navigate(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
ccls_reload	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_reload.cc	/^void MessageHandler::ccls_reload(JsonReader &reader) {$/;"	f	class:ccls::MessageHandler
ccls_vars	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_vars.cc	/^void MessageHandler::ccls_vars(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
ccls_xref	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^constexpr char ccls_xref[] = "ccls.xref";$/;"	m	namespace:ccls
cctu_info	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  CodeCompletionTUInfo cctu_info;$/;"	m	class:ccls::__anon20::CompletionConsumer	file:
ch	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string ch;$/;"	m	struct:ccls::InsertTextFormat::DocumentOnTypeFormattingParam
change	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    TextDocumentSyncKind change = TextDocumentSyncKind::Incremental;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::TextDocumentSyncOptions	file:
changeNotifications	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^        bool changeNotifications = true;$/;"	m	struct:ccls::Config::ServerCap::Workspace::WorkspaceFolders
changes	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::vector<Event> changes;$/;"	m	struct:ccls::InsertTextFormat::DidChangeWatchedFilesParam
character	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  int character = 0;$/;"	m	struct:ccls::Position
check	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^check = subparsers.add_parser("check", help="Sanity check the test suite.")$/;"	v
checkSum_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^    char checkSum_;$/;"	m	class:Platform	file:
children	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  std::vector<Out_cclsCall> children;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
children	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  std::vector<Out_cclsInheritance> children;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
children	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  std::vector<Out_cclsMember> children;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
children	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  std::vector<std::unique_ptr<DocumentSymbol>> children;$/;"	m	struct:ccls::__anon23::DocumentSymbol	file:
chunkHead	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        ChunkHeader *chunkHead;  \/\/!< Head of the chunk linked-list. Only the head chunk serves allocation.$/;"	m	struct:MemoryPoolAllocator::SharedData
chunk_capacity_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    size_t chunk_capacity_;     \/\/!< The minimum capacity of chunk when they are allocated.$/;"	m	class:MemoryPoolAllocator
clang	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } clang;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Clang
clangBuiltinTypeName	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^const char *clangBuiltinTypeName(int kind) {$/;"	f	namespace:ccls
clean	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	s
clear	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void VFS::clear() {$/;"	f	class:ccls::VFS
clear	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void DB::clear() {$/;"	f	class:ccls::DB
clear	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void SemaManager::clear() {$/;"	f	class:clang::ccls::SemaManager
clear	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  void clear() { items.clear(); }$/;"	f	struct:ccls::LruCache
client	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } client;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::ClientCapability
closeLog	/home/yl/vim/vim/ccls/ccls/src/main.cc	/^void closeLog() { fclose(ccls::log::file); }$/;"	f	namespace:__anon6
clzll	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/clzll.h	/^inline uint32_t clzll(uint64_t x) {$/;"	f	namespace:internal
code	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  ErrorCode code;$/;"	m	struct:ccls::ResponseError
code	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  int code = 0;$/;"	m	struct:ccls::MessageType::Diagnostic
code	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^tt, code, pre {$/;"	s
codeActionKinds	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    std::vector<const char *> codeActionKinds = {"quickfix"};$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CodeActionOptions	file:
codeActionProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } codeActionProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CodeActionOptions	file:
codeLens	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } codeLens;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::CodeLens
codeLensProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } codeLensProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CodeLensOptions	file:
code_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    ParseErrorCode code_;$/;"	m	struct:ParseResult
codepoint	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        unsigned codepoint;$/;"	m	struct:internal::GenericRegex::State
codepoint_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    unsigned codepoint_;$/;"	m	class:internal::DecodedStream
col_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    size_t col_;    \/\/!< Current Column$/;"	m	class:CursorStreamWrapper
collect	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^def collect(root_dir):$/;"	f
collectRecordMembers	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  void collectRecordMembers(IndexType &type, const RecordDecl *rd) {$/;"	f	class:ccls::__anon5::IndexDataConsumer
column	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  int16_t column = -1;$/;"	m	struct:ccls::Pos
command	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::optional<Command> command;$/;"	m	struct:ccls::__anon19::CodeLens	file:
command	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::string command;$/;"	m	struct:ccls::__anon19::Command	file:
command_set	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  std::unordered_set<size_t> command_set;$/;"	m	struct:ccls::__anon33::ProjectProcessor	file:
commands	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    std::vector<const char *> commands = {ccls_xref};$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::ExecuteCommandOptions	file:
comments	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int comments = 2;$/;"	m	struct:ccls::Config::Index
comments	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *comments = "";$/;"	m	struct:ccls::FuncDef
comments	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *comments = "";$/;"	m	struct:ccls::TypeDef
comments	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *comments = "";$/;"	m	struct:ccls::VarDef
comp_task	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    std::unique_ptr<CompTask> comp_task;$/;"	m	struct:ccls::SemaManager::PreambleTask
comp_tasks	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  ThreadedQueue<std::unique_ptr<CompTask>> comp_tasks;$/;"	m	struct:ccls::SemaManager
compdb_size	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    int compdb_size = 0;$/;"	m	struct:ccls::Project::Entry
compilationDatabaseCommand	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  std::string compilationDatabaseCommand;$/;"	m	struct:ccls::Config
compilationDatabaseDirectory	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  std::string compilationDatabaseDirectory;$/;"	m	struct:ccls::Config
completed	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int64_t lastIdle, completed, enqueued;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::Pipeline	file:
completed	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  std::atomic<int64_t> last_idle, completed, enqueued;$/;"	m	struct:ccls::IndexStats
completed_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    bool completed_;$/;"	m	class:AsyncDocumentParser	file:
completion	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } completion;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Completion
completion	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } completion;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::Completion	file:
completionItem	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    } completionItem;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::Completion	typeref:struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::Completion::CompletionItem	file:
completionMain	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void *completionMain(void *manager_) {$/;"	f	namespace:clang::ccls::__anon36
completionProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } completionProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CompletionOptions	file:
completion_item	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^  CompletionItem completion_item;$/;"	m	struct:ccls::__anon4::CompletionCandidate	file:
completion_items	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  std::vector<ccls::CompletionItem> completion_items;$/;"	m	struct:ccls::IncludeComplete
completion_items_mutex	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  std::mutex completion_items_mutex;$/;"	m	struct:ccls::IncludeComplete
computeGuessScore	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^int computeGuessScore(std::string_view a, std::string_view b) {$/;"	f	namespace:ccls::__anon33
computeLineMapping	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^void WorkingFile::computeLineMapping() {$/;"	f	class:ccls::WorkingFile
computeRangeSize	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^int computeRangeSize(const Range &range) {$/;"	f	namespace:ccls::__anon35
concerned	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  bool concerned = false;$/;"	m	struct:ccls::DiagBase
const	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
const	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
const_pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename traits_type::const_pointer     const_pointer;$/;"	t	class:StdAllocator
const_reference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename allocator_type::const_reference const_reference;$/;"	t	class:StdAllocator
const_reference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename std::add_lvalue_reference<typename std::add_const<value_type>::type>::type &const_reference;$/;"	t	class:StdAllocator
construct	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void construct(pointer p, Args&&... args)$/;"	f	class:StdAllocator
construct	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void construct(pointer p, const_reference r)$/;"	f	class:StdAllocator
constructions_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^    int *constructions_,$/;"	m	struct:TestStdAllocatorData	file:
consume	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_addr_func.cc	/^void consume(void (*)()) {}$/;"	f
consumeFile	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexFile *consumeFile(FileID fid) {$/;"	f	struct:ccls::__anon5::IndexParam
consumer	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  consumer(IntrusiveRefCntPtr<llvm::vfs::FileSystem> fs) {$/;"	f	struct:clang::ccls::PreambleStatCache
consumer	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    std::unique_ptr<clang::CodeCompleteConsumer> consumer;$/;"	m	struct:ccls::SemaManager::CompTask
containerName	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<std::string_view> containerName;$/;"	m	struct:ccls::SymbolInformation
contains	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^bool Range::contains(int line, int column) const {$/;"	f	class:ccls::Range
content	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::string content;$/;"	m	struct:ccls::__anon5::File	file:
content	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  std::string content;$/;"	m	struct:ccls::pipeline::__anon32::InMemoryIndexFile	file:
contentChanges	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::vector<TextDocumentContentChangeEvent> contentChanges;$/;"	m	struct:ccls::TextDocumentDidChangeParam
contents	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^  std::vector<MarkedString> contents;$/;"	m	struct:ccls::__anon26::Hover	file:
context	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  CompletionContext context;$/;"	m	struct:ccls::CompletionParam
context	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  } context;$/;"	m	struct:ccls::CodeActionParam	typeref:struct:ccls::CodeActionParam::Context
context	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^  } context;$/;"	m	struct:ccls::__anon27::ReferenceParam	typeref:struct:ccls::__anon27::ReferenceParam::Context	file:
convert	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^QueryFunc::Def convert(const IndexFunc::Def &o) {$/;"	f	namespace:ccls
convert	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^QueryType::Def convert(const IndexType::Def &o) {$/;"	f	namespace:ccls
convert	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^template <typename T> Vec<T> convert(const std::vector<T> &o) {$/;"	f	namespace:ccls
copyOptimization	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    enum { copyOptimization = 0 };$/;"	e	enum:StreamTraits::__anon49
copyOptimization	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    enum { copyOptimization = 1 };$/;"	e	enum:StreamTraits::__anon50
copyOptimization	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    enum { copyOptimization = 1 };$/;"	e	enum:StreamTraits::__anon51
copy_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    bool copy_;$/;"	m	struct:ParseStringHandler	file:
count	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SizeType count;$/;"	m	struct:internal::Schema::SchemaArray
count_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        size_t count_;        \/\/!< Number of characters taken so far.$/;"	m	struct:AsyncDocumentParser::AsyncStringStream	file:
count_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    size_t count_;  \/\/!< Number of characters read$/;"	m	class:FileReadStream
count_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    size_t count_;$/;"	m	class:internal::BigInteger
count_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    size_t count_;  \/\/!< Number of characters read$/;"	m	class:BasicIStreamWrapper
count_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    SizeType count_;$/;"	m	struct:ValueCounter	file:
createDelta	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^IndexUpdate IndexUpdate::createDelta(IndexFile *previous, IndexFile *current) {$/;"	f	class:ccls::IndexUpdate
crtallocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    CrtAllocator* crtallocator;$/;"	m	struct:Foo	file:
ctx	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  ASTContext *ctx;$/;"	m	class:ccls::__anon5::IndexDataConsumer	file:
ctx	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  ASTContext *ctx;$/;"	m	struct:ccls::__anon5::IndexParam	file:
currentError_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValueType currentError_;$/;"	m	class:GenericSchemaValidator
current_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch current_;$/;"	m	class:AutoUTFInputStream
current_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    Ch current_;$/;"	m	class:EncodedInputStream
current_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    Ch *current_;$/;"	m	class:FileReadStream
current_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    char *current_;$/;"	m	class:FileWriteStream
current_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch *current_;$/;"	m	class:BasicIStreamWrapper
cv	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::condition_variable_any cv;$/;"	m	struct:ccls::MultiQueueWaiter
d	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        double d;$/;"	m	union:GenericValue::Number
d	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        double d;$/;"	m	struct:internal::Hasher::Number
dROUNDS	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	24;"	d	file:
d_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    Document& d_;$/;"	m	class:AsyncDocumentParser	file:
d_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        GenericDocument& d_;$/;"	m	struct:GenericDocument::ClearStackOnExit
d_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^        double d_;$/;"	m	union:internal::Double::__anon45
data	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    std::string data;$/;"	m	struct:MyHandler	file:
dataConsumer	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::shared_ptr<IndexDataConsumer> dataConsumer;$/;"	m	class:ccls::__anon5::IndexFrontendAction	file:
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        : data_() {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Data data_;$/;"	m	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue() RAPIDJSON_NOEXCEPT : data_() { data_.f.flags = kNullFlag; }$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(Array a) RAPIDJSON_NOEXCEPT : data_(a.value_.data_) {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(GenericValue&& rhs) RAPIDJSON_NOEXCEPT : data_(rhs.data_) {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(Object o) RAPIDJSON_NOEXCEPT : data_(o.value_.data_) {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue(const Ch* s, SizeType length) RAPIDJSON_NOEXCEPT : data_() { SetStringRaw(StringRef(s, length)); }$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(StringRefType s) RAPIDJSON_NOEXCEPT : data_() { SetStringRaw(s); }$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(Type type) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(double d) RAPIDJSON_NOEXCEPT : data_() { data_.n.d = d; data_.f.flags = kNumberDoubleFlag; }$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(float f) RAPIDJSON_NOEXCEPT : data_() { data_.n.d = static_cast<double>(f); data_.f.flags = kNumberDoubleFlag; }$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(int i) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(int64_t i64) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(uint64_t u64) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
data_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    explicit GenericValue(unsigned u) RAPIDJSON_NOEXCEPT : data_() {$/;"	f	class:GenericValue
db	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::unique_ptr<IndexFile> db;$/;"	m	struct:ccls::__anon5::File	file:
db	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  DB *db = nullptr;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
db	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  } db;$/;"	m	struct:ccls::__anon10::Out_cclsInfo	typeref:struct:ccls::__anon10::Out_cclsInfo::DB	file:
db	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  DB *db;$/;"	m	struct:ccls::__anon19::CommonCodeLensParams	file:
deadline	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::chrono::steady_clock::time_point deadline;$/;"	m	struct:ccls::InMessage
deallocate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void deallocate(U* p, size_type n = 1)$/;"	f	class:StdAllocator
deallocate	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void deallocate(pointer p, size_type n = 1)$/;"	f	class:StdAllocator
debounce	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    int64_t debounce;$/;"	m	struct:ccls::SemaManager::DiagTask
decl2Info	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::unordered_map<const Decl *, DeclInfo> decl2Info;$/;"	m	struct:ccls::__anon5::IndexParam	file:
declarationProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool declarationProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
declarations	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<DeclRef> declarations;$/;"	m	struct:ccls::IndexFunc
declarations	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<DeclRef> declarations;$/;"	m	struct:ccls::IndexType
declarations	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<DeclRef> declarations;$/;"	m	struct:ccls::IndexVar
declarations	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<DeclRef> declarations;$/;"	m	struct:ccls::QueryFunc
declarations	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<DeclRef> declarations;$/;"	m	struct:ccls::QueryType
declarations	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<DeclRef> declarations;$/;"	m	struct:ccls::QueryVar
decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static unsigned inline decode(unsigned* state, unsigned* codep, unsigned byte) {$/;"	f	file:
decode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^static unsigned inline decode(unsigned* state, unsigned* codep, unsigned byte) {$/;"	f	file:
decomposed2LineAndCol	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^static Pos decomposed2LineAndCol(const SourceManager &sm,$/;"	f	namespace:ccls
decorateIncludePaths	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^void decorateIncludePaths(const std::smatch &match,$/;"	f	namespace:ccls::__anon20
def	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/method.cc	/^void Foo::def() {}$/;"	f	class:Foo
def	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Def def;$/;"	m	struct:ccls::IndexFunc
def	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Def def;$/;"	m	struct:ccls::IndexType
def	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Def def;$/;"	m	struct:ccls::IndexVar
def	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::SmallVector<Def, 1> def;$/;"	m	struct:ccls::QueryFunc
def	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::SmallVector<Def, 1> def;$/;"	m	struct:ccls::QueryType
def	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::SmallVector<Def, 1> def;$/;"	m	struct:ccls::QueryVar
def	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::optional<Def> def;$/;"	m	struct:ccls::QueryFile
default	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    default=REMOTES_DIR,$/;"	v
defaultValueLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType defaultValueLength_;$/;"	m	class:internal::Schema
definition	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } definition;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::LinkSupport	file:
definitionProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool definitionProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
dependencies	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  llvm::DenseMap<llvm::CachedHashStringRef, int64_t> dependencies;$/;"	m	struct:ccls::IndexFile
dependencies	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  bool dependencies = false;$/;"	m	struct:ccls::FileInfoParam	file:
dependencies	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_reload.cc	/^  bool dependencies = true;$/;"	m	struct:ccls::__anon14::Param	file:
dependencies	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^    std::vector<const char *> dependencies;$/;"	m	struct:ccls::QueryFile::Def
dependencies	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        bool* dependencies;$/;"	m	struct:internal::Schema::Property
dependenciesSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        const SchemaType* dependenciesSchema;$/;"	m	struct:internal::Schema::Property
dependenciesValidatorIndex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SizeType dependenciesValidatorIndex;$/;"	m	struct:internal::Schema::Property
dependents_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    std::vector<Dependent> dependents_;$/;"	m	class:Employee	file:
depth_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    unsigned depth_;$/;"	m	class:GenericSchemaValidator
dequeue	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  T dequeue(int keep_only_latest = 0) {$/;"	f	struct:ccls::ThreadedQueue
dequeueAll	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::vector<T> dequeueAll() {$/;"	f	struct:ccls::ThreadedQueue
derived	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Usr> derived;$/;"	m	struct:ccls::IndexFunc
derived	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Usr> derived;$/;"	m	struct:ccls::IndexType
derived	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  bool derived = false;$/;"	m	struct:ccls::__anon11::Param	file:
derived	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<Usr> derived;$/;"	m	struct:ccls::QueryFunc
derived	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<Usr> derived;$/;"	m	struct:ccls::QueryType
description	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    description="JSON Schema Test Suite utilities",$/;"	v
deserialize	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^deserialize(SerializeFormat format, const std::string &path,$/;"	f	namespace:ccls
destroy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    void destroy(pointer p)$/;"	f	class:StdAllocator
destructions_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^        *destructions_;$/;"	m	struct:TestStdAllocatorData	file:
detail	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string detail;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
detail	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  std::string detail;$/;"	m	struct:ccls::__anon23::DocumentSymbol	file:
detailedLabel	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool detailedLabel = true;$/;"	m	struct:ccls::Config::Completion
detailed_name	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *detailed_name = "";$/;"	m	struct:ccls::FuncDef
detailed_name	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *detailed_name = "";$/;"	m	struct:ccls::TypeDef
detailed_name	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *detailed_name = "";$/;"	m	struct:ccls::VarDef
diagLeveltoString	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^llvm::StringRef diagLeveltoString(DiagnosticsEngine::Level lvl) {$/;"	f	namespace:clang::ccls::__anon36
diag_mutex	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::mutex diag_mutex;$/;"	m	struct:ccls::SemaManager
diag_tasks	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  ThreadedQueue<DiagTask> diag_tasks;$/;"	m	struct:ccls::SemaManager
diagnosticMain	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void *diagnosticMain(void *manager_) {$/;"	f	namespace:clang::ccls::__anon36
diagnosticRange	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^CharSourceRange diagnosticRange(const clang::Diagnostic &d,$/;"	f	namespace:clang::ccls::__anon36
diagnostics	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } diagnostics;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Diagnostics
diagnostics	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^    std::vector<Diagnostic> diagnostics;$/;"	m	struct:ccls::CodeActionParam::Context
diagnostics	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  std::vector<Diagnostic> diagnostics;$/;"	m	struct:ccls::__anon31::PublishDiagnosticParam	file:
diagnostics	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::vector<Diagnostic> diagnostics;$/;"	m	struct:ccls::WorkingFile
diagnosticsRelatedInformation	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool diagnosticsRelatedInformation = true;$/;"	m	struct:ccls::Config::ClientCapability
diags	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::vector<Diag> diags;$/;"	m	struct:clang::ccls::PreambleData	file:
didChangeConfiguration	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  DynamicReg didChangeConfiguration;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
didChangeWatchedFiles	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  DynamicReg didChangeWatchedFiles;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
didChangeWatchedFiles	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^bool didChangeWatchedFiles;$/;"	m	class:ccls::__anon17::TextDocumentSyncKind	file:
diffDocuments	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^void diffDocuments(std::string path, std::string path_section,$/;"	f	namespace:ccls
difference_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename traits_type::difference_type   difference_type;$/;"	t	class:StdAllocator
difference_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef std::ptrdiff_t difference_type;$/;"	t	class:GenericMemberIterator
digits	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static const char digits[201] =$/;"	v	file:
digits_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    Type digits_[kCapacity];$/;"	m	class:internal::BigInteger
direction	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^  std::string direction;$/;"	m	struct:ccls::__anon13::Param	file:
directory	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::string directory = ".ccls-cache";$/;"	m	struct:ccls::Config::Cache
directory	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::string directory;$/;"	m	struct:ccls::Project::Entry
div	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body, table, div, p, dl {$/;"	s
div.contents 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.contents {$/;"	s
div.contents a	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.contents a[href ^= "http"]:after {$/;"	s
div.fragment 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.fragment {$/;"	s
div.header 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.header {$/;"	s
div.headertitle 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.headertitle {$/;"	s
div.line 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.line {$/;"	s
div.toc 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.toc {$/;"	s
div.toc h3 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.toc h3 {$/;"	s
div.toc li 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.toc li {$/;"	s
dl 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body, table, div, p, dl {$/;"	s
doField	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^void doField(MessageHandler *m, Out_cclsMember *entry, const QueryVar &var,$/;"	f	namespace:ccls::__anon12
doPathMapping	/home/yl/vim/vim/ccls/ccls/src/config.cc	/^void doPathMapping(std::string &arg) {$/;"	f	namespace:ccls
do_initialize	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void do_initialize(MessageHandler *m, InitializeParam &param,$/;"	f	namespace:ccls::__anon17
docId_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        docId_(rhs.docId_)$/;"	f	class:GenericSchemaDocument
docId_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    UriType docId_;$/;"	m	class:GenericSchemaDocument
doc_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    Document doc_;$/;"	m	class:RapidJson	file:
document	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::unique_ptr<rapidjson::Document> document;$/;"	m	struct:ccls::InMessage
document	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    Document* document;$/;"	m	struct:Foo	file:
documentAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    typename DocumentType::AllocatorType documentAllocator_;$/;"	m	class:RemoteSchemaDocumentProvider	file:
documentBuffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    char documentBuffer_[16384];$/;"	m	class:RemoteSchemaDocumentProvider	file:
documentChanges	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::vector<TextDocumentEdit> documentChanges;$/;"	m	struct:ccls::WorkspaceEdit
documentChanges	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    std::optional<bool> documentChanges;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap::WorkspaceEdit	file:
documentFormattingProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool documentFormattingProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
documentHighlightProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool documentHighlightProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
documentLinkProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } documentLinkProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::DocumentLinkOptions	file:
documentOnTypeFormattingProvider	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    } documentOnTypeFormattingProvider;$/;"	m	struct:ccls::Config::ServerCap	typeref:struct:ccls::Config::ServerCap::DocumentOnTypeFormattingOptions
documentOnTypeFormattingProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^      documentOnTypeFormattingProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
documentRangeFormattingProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool documentRangeFormattingProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
documentStack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    internal::Stack<StateAllocator> documentStack_;  \/\/!< stack to store the current path of validating document (Ch)$/;"	m	class:GenericSchemaValidator
documentSymbol	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } documentSymbol;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::DocumentSymbol	file:
documentSymbolProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool documentSymbolProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
documentation	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string documentation;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
documentation	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  std::optional<std::string> documentation;$/;"	m	struct:ccls::__anon29::SignatureInformation	file:
dot_ccls	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::unordered_map<std::string, std::vector<const char *>> dot_ccls;$/;"	m	struct:ccls::Project::Folder
doxygen_install	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^doxygen_install()$/;"	f
doxygen_run	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^doxygen_run()$/;"	f
dp	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  int dp[2][kMaxText + 1][2];$/;"	m	class:ccls::FuzzyMatcher
dropOldRequests	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool dropOldRequests = true;$/;"	m	struct:ccls::Config::Completion
dst_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* dst_;$/;"	m	struct:GenericInsituStringStream
dtoa	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^inline char* dtoa(double value, char* buffer, int maxDecimalPlaces = 324) {$/;"	f	namespace:internal
dump_remotes	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^dump_remotes = subparsers.add_parser($/;"	v
duplicateOptional	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool duplicateOptional = true;$/;"	m	struct:ccls::Config::Completion
dynamicRegistration	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool dynamicRegistration = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::DynamicReg	file:
e	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    int e;$/;"	m	struct:internal::DiyFp
eachDefinedFunc	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^void eachDefinedFunc(DB *db, const C &usrs, Fn &&fn) {$/;"	f	namespace:ccls
eachEntityDef	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^template <typename Fn> void eachEntityDef(DB *db, SymbolIdx sym, Fn &&fn) {$/;"	f	namespace:ccls
eachOccurrence	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^void eachOccurrence(DB *db, SymbolIdx sym, bool include_decl, Fn &&fn) {$/;"	f	namespace:ccls
edit	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  WorkspaceEdit edit;$/;"	m	struct:ccls::__anon18::CodeAction	file:
editDistanceVector	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^std::vector<int> editDistanceVector(std::string a, std::string b) {$/;"	f	namespace:ccls::__anon37
edits	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::vector<TextEdit> edits;$/;"	m	struct:ccls::TextDocumentEdit
edits	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::vector<TextEdit> edits;$/;"	m	struct:ccls::Diag
education_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Education *education_;$/;"	m	class:Dependent	file:
elements	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        GenericValue* elements;$/;"	m	struct:GenericValue::ArrayData
elideLongPath	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^std::string elideLongPath(const std::string &path) {$/;"	f	namespace:ccls::__anon4
emitSemanticHighlight	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void emitSemanticHighlight(DB *db, WorkingFile *wfile, QueryFile &file) {$/;"	f	namespace:ccls
emitSkippedRanges	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void emitSkippedRanges(WorkingFile *wfile, QueryFile &file) {$/;"	f	namespace:ccls
empty	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_complex.cc	/^void empty() {$/;"	f
emptyString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static const Ch emptyString[];$/;"	m	struct:GenericStringRef
emptyString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^const CharType GenericStringRef<CharType>::emptyString[] = { CharType() };$/;"	m	class:GenericStringRef
end	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Position end;$/;"	m	struct:ccls::lsRange
end	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  Pos end;$/;"	m	struct:ccls::Range
end	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  T *end() { return a.get() + s; }$/;"	f	struct:ccls::Vec
end	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  const T *end() const { return a.get() + s; }$/;"	f	struct:ccls::Vec
end	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    MemberIterator end() const { return value_.MemberEnd(); }$/;"	f	class:GenericObject
end	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueIterator end() const { return value_.End(); }$/;"	f	class:GenericArray
end	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        unsigned end;$/;"	m	struct:internal::GenericRegex::Range
endArray	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::endArray() { m->EndArray(); }$/;"	f	class:ccls::JsonWriter
endCharacter	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^  int startLine, startCharacter, endLine, endCharacter;$/;"	m	struct:ccls::__anon24::FoldingRange	file:
endLine	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  int endLine = -1;$/;"	m	struct:ccls::__anon23::DocumentSymbolParam	file:
endLine	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^  int startLine, startCharacter, endLine, endCharacter;$/;"	m	struct:ccls::__anon24::FoldingRange	file:
endObject	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::endObject() { m->EndObject(); }$/;"	f	class:ccls::JsonWriter
endObject	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  void endObject() {}$/;"	f	struct:ccls::JsonReader
end_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        const char* end_;     \/\/!< End of buffer$/;"	m	struct:AsyncDocumentParser::AsyncStringStream	file:
end_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    const Ch* end_;     \/\/!< End of stream.$/;"	m	struct:MemoryStream
end_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        const Ch* end_;     \/\/!< Past-the-end position.$/;"	m	class:GenericPointer::PercentDecodeStream
end_pos	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  Position end_pos; \/\/ Second key when there is a tie for insertion events.$/;"	m	struct:ccls::__anon7::ScanLineEvent	file:
enqueued	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int64_t lastIdle, completed, enqueued;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::Pipeline	file:
enqueued	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  std::atomic<int64_t> last_idle, completed, enqueued;$/;"	m	struct:ccls::IndexStats
ensureEndsInSlash	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^void ensureEndsInSlash(std::string &path) {$/;"	f	namespace:ccls
ensureSession	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^SemaManager::ensureSession(const std::string &path, bool *created) {$/;"	f	class:clang::ccls::SemaManager
entries	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int entries;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::Project	file:
entries	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::vector<Entry> entries;$/;"	m	struct:ccls::Project::Folder
enumCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType enumCount_;$/;"	m	class:internal::Schema
enum_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    uint64_t* enum_;$/;"	m	class:internal::Schema
eof_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    bool eof_;$/;"	m	class:FileReadStream
eof_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    bool eof_;$/;"	m	class:BasicIStreamWrapper
errno	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import errno$/;"	i
error	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  void error(ErrorCode code, std::string message) const {$/;"	f	struct:ccls::InsertTextFormat::ReplyOnce
error_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValueType error_;$/;"	m	class:GenericSchemaValidator
error_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValueType error_;$/;"	m	class:SchemaValidatingReader
error_handler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ErrorHandlerType& error_handler;$/;"	m	struct:internal::SchemaValidationContext
escapeFileName	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::string escapeFileName(std::string path) {$/;"	f	namespace:ccls
event	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  } event;$/;"	m	struct:ccls::InsertTextFormat::DidChangeWorkspaceFoldersParam	typeref:struct:ccls::InsertTextFormat::DidChangeWorkspaceFoldersParam::Event
excludeArgs	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> excludeArgs;$/;"	m	struct:ccls::Config::Clang
excludeRole	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  Role excludeRole = Role((int)Role::All - (int)Role::Definition -$/;"	m	struct:ccls::__anon23::DocumentSymbolParam	file:
excludeRole	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^  Role excludeRole = Role::None;$/;"	m	struct:ccls::__anon27::ReferenceParam	file:
exclude_args	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  StringSet<> exclude_args;$/;"	m	struct:ccls::__anon33::ProjectProcessor	file:
exclude_globs	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  std::vector<GlobPattern> exclude_globs;$/;"	m	struct:ccls::__anon33::ProjectProcessor	file:
excludesArg	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  bool excludesArg(StringRef arg, int &i) {$/;"	f	struct:ccls::__anon33::ProjectProcessor
exclusiveMaximum_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool exclusiveMaximum_;$/;"	m	class:internal::Schema
exclusiveMinimum_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool exclusiveMinimum_;$/;"	m	class:internal::Schema
executeCommand	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  DynamicReg executeCommand;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
executeCommandProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } executeCommandProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::ExecuteCommandOptions	file:
exit	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void MessageHandler::exit(EmptyParam &) {$/;"	f	class:ccls::__anon17::MessageHandler
expand	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^bool expand(MessageHandler *m, Out_cclsCall *entry, bool callee,$/;"	f	class:ccls::__anon9::CallType	file:
expand	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^bool expand(MessageHandler *m, Out_cclsInheritance *entry, bool derived,$/;"	f	namespace:ccls::__anon11
expand	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^bool expand(MessageHandler *m, Out_cclsMember *entry, bool qualified,$/;"	f	namespace:ccls::__anon12
expandHelper	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^bool expandHelper(MessageHandler *m, Out_cclsInheritance *entry, bool derived,$/;"	f	namespace:ccls::__anon11
expected_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const char* expected_;$/;"	m	struct:NumbersAsStringsHandler	file:
expected_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  const wchar_t* expected_;$/;"	m	struct:NumbersAsStringsHandlerWChar_t	file:
expected_len_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t expected_len_;$/;"	m	struct:NumbersAsStringsHandler	file:
expected_len_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  size_t expected_len_;$/;"	m	struct:NumbersAsStringsHandlerWChar_t	file:
extent	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Range extent;$/;"	m	struct:ccls::DeclRef
extent	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Range extent;$/;"	m	struct:ccls::ExtentRef
extraArgs	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> extraArgs;$/;"	m	struct:ccls::Config::Clang
f	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^function<void(int)> f;$/;"	v
f	/home/yl/vim/vim/ccls/ccls/index_tests/unions/union_usage.cc	/^Foo f;$/;"	v
f	/home/yl/vim/vim/ccls/ccls/index_tests/vars/deduce_auto_type.cc	/^void f() {$/;"	f
f	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        Flag f;$/;"	m	union:GenericValue::Data
f	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    uint64_t f;$/;"	m	struct:internal::DiyFp
f0	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter.cc	/^static unique_ptr<bool> f0;$/;"	v	file:
f1	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter.cc	/^static unique_ptr<S> f1;$/;"	v	file:
fID2concerned	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::unordered_map<unsigned, bool> fID2concerned;$/;"	m	class:clang::ccls::__anon36::StoreDiags	file:
factory	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaValidatorFactoryType& factory;$/;"	m	struct:internal::SchemaValidationContext
fallbackFolder	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  std::string fallbackFolder;$/;"	m	struct:ccls::Config
field	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::string field;$/;"	m	struct:ccls::__anon19::Cmd_xref	file:
fieldName	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  std::string fieldName;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
field_var	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call.cc	/^  int field_var;$/;"	m	struct:Foo	file:
file	/home/yl/vim/vim/ccls/ccls/src/log.cc	/^FILE *file;$/;"	m	namespace:ccls::log	file:
file	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  Project::Entry file;$/;"	m	struct:ccls::Session
file	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::string file;$/;"	m	struct:ccls::DiagBase
file_contents	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::string file_contents;$/;"	m	struct:ccls::IndexFile
file_id	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int file_id = -1; \/\/ not serialized$/;"	m	struct:ccls::FuncDef
file_id	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int file_id = -1; \/\/ not serialized$/;"	m	struct:ccls::TypeDef
file_id	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int file_id = -1; \/\/ not serialized$/;"	m	struct:ccls::VarDef
file_id	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int file_id = -1;$/;"	m	struct:ccls::Use
file_id	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  int file_id;$/;"	m	struct:ccls::IndexUpdate
filename	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::string filename;$/;"	m	struct:ccls::Project::Entry
filename	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::string filename;$/;"	m	struct:ccls::WorkingFile
filename_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    const char* filename_;$/;"	m	class:PerfTest
filename_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    const char* filename_;$/;"	m	class:FileStreamTest	file:
files	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int files, funcs, types, vars;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::DB	file:
files	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<QueryFile> files;$/;"	m	struct:ccls::DB
files	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::unordered_map<std::string, std::unique_ptr<WorkingFile>> files;$/;"	m	struct:ccls::WorkingFiles
files	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^def files(paths):$/;"	f
files_def_update	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::optional<QueryFile::DefUpdate> files_def_update;$/;"	m	struct:ccls::IndexUpdate
files_removed	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::optional<std::string> files_removed;$/;"	m	struct:ccls::IndexUpdate
filterAndSort	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool filterAndSort = true;$/;"	m	struct:ccls::Config::Completion
filterCandidates	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^void filterCandidates(CompletionList &result, const std::string &complete_text,$/;"	f	namespace:ccls::__anon20
filterText	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string filterText;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
filterValueDepth_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    unsigned filterValueDepth_;$/;"	m	class:FilterKeyHandler	file:
filterValueDepth_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    unsigned filterValueDepth_;$/;"	m	class:FilterKeyHandler	file:
filteredKeyCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    std::stack<SizeType> filteredKeyCount_;$/;"	m	class:FilterKeyHandler	file:
filteredKeyCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    std::stack<SizeType> filteredKeyCount_;$/;"	m	class:FilterKeyHandler	file:
findCompletionItemForAbsolutePath	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^IncludeComplete::findCompletionItemForAbsolutePath($/;"	f	class:ccls::IncludeComplete
findDbForPathEnding	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^findDbForPathEnding(const std::string &path,$/;"	f	namespace:ccls
findEntry	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^Project::Entry Project::findEntry(const std::string &path, bool can_redirect,$/;"	f	class:ccls::Project
findExpectedOutputForFilename	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^std::string findExpectedOutputForFilename($/;"	f	namespace:ccls
findFile	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^QueryFile *MessageHandler::findFile(const std::string &path, int *out_file_id) {$/;"	f	class:ccls::MessageHandler
findMatchingLine	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^findMatchingLine(const std::vector<std::string> &index_lines,$/;"	f	namespace:ccls::__anon37
findOrFail	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^MessageHandler::findOrFail(const std::string &path, ReplyOnce &reply,$/;"	f	class:ccls::MessageHandler
findParent	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^Maybe<Range> findParent(QueryFile *file, Pos pos) {$/;"	f	namespace:ccls::__anon13
findSymbolsAtLocation	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<SymbolRef> findSymbolsAtLocation(WorkingFile *wfile,$/;"	f	namespace:ccls
finish_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    std::condition_variable finish_;$/;"	m	class:AsyncDocumentParser	file:
firstTriggerCharacter	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      std::string firstTriggerCharacter = "}";$/;"	m	struct:ccls::Config::ServerCap::DocumentOnTypeFormattingOptions
first_error	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::string first_error;$/;"	m	struct:ccls::IndexResult
fixits_	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::vector<TextEdit> fixits_;$/;"	m	struct:ccls::MessageType::Diagnostic
flags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        uint16_t flags;$/;"	m	struct:GenericValue::Flag
flags_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    unsigned flags_;$/;"	m	class:GenericSchemaValidator
flatten	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^flatten = subparsers.add_parser($/;"	v
flattenHierarchy	/home/yl/vim/vim/ccls/ccls/src/hierarchy.hh	/^std::vector<Location> flattenHierarchy(const std::optional<Node> &root) {$/;"	f	namespace:ccls
flush	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  void flush() {$/;"	f	class:clang::ccls::__anon36::StoreDiags	file:
fnmatch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import fnmatch$/;"	i
folder	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  Project::Folder &folder;$/;"	m	struct:ccls::__anon33::ProjectProcessor	file:
folders	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::vector<std::string> folders;$/;"	m	struct:ccls::InsertTextFormat::WorkspaceSymbolParam
folders	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^  std::vector<std::string> folders;$/;"	m	struct:ccls::__anon27::ReferenceParam	file:
foldingRangeProvider	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool foldingRangeProvider = true;$/;"	m	struct:ccls::Config::ServerCap
foldingRangeProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool foldingRangeProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
font-size: 15px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-size: 15px;$/;"	s
font-size: 16px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-size: 16px;$/;"	s
font-size: 38px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-size: 38px;$/;"	s
font-weight: bold	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-weight: bold;$/;"	s
foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/constructor.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/destructor.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/class_member.cc	/^  int foo;$/;"	m	class:Foo	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/class_member_static.cc	/^  static int foo;$/;"	m	class:Foo	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/class_member_static.cc	/^int Foo::foo;$/;"	m	class:Foo	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/func.cc	/^void foo() {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/declaration_vs_definition/func_associated_function_params.cc	/^int foo(int a, int b) { return 0; }$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/function_declaration_definition.cc	/^void foo() {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/function_definition.cc	/^void foo() {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/lambdas/lambda.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/method_definition.cc	/^void Foo::foo() const {}$/;"	f	class:Foo
foo	/home/yl/vim/vim/ccls/ccls/index_tests/method_inline_declaration.cc	/^  void foo() {}$/;"	f	class:Foo	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/function_definition.cc	/^void foo() {}$/;"	f	namespace:hello
foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_definition.cc	/^void Foo::foo() {}$/;"	f	class:hello::Foo
foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_inline_declaration.cc	/^  void foo() {}$/;"	f	class:hello::Foo	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_alias.cc	/^namespace foo {$/;"	n	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/member_ref_in_template.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_class_template_func_usage_folded_into_one.cc	/^    static int foo() {$/;"	f	struct:ns::Foo
foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^void foo(T Value) {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_func_usage_folded_into_one.cc	/^  static int foo() {$/;"	f	struct:Foo
foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_template_func_usage_folded_into_one.cc	/^  static int foo() {$/;"	f	struct:Foo
foo	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_func_usage_folded_into_one.cc	/^static int foo() {$/;"	f	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_called_from_template.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_template_func.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_complex.cc	/^unique_ptr<S1, S2>* Foo::foo() { return nullptr; }$/;"	f	class:Foo
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_simple.cc	/^static unique_ptr<S> foo;$/;"	v	file:
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_param.cc	/^void foo(ForwardType* f, ImplementedType a) {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_param_prototype.cc	/^void foo(Foo* f, Foo*) {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_param_unnamed.cc	/^void foo(ForwardType*) {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_qualifiers.cc	/^void foo(Type& a0, const Type& a1) {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_on_return_type.cc	/^Type* foo() { return nullptr; }$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call_simple.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member_static.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_extern.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_func_parameter.cc	/^void foo(int a) {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_local.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_shadowed_local.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_shadowed_parameter.cc	/^void foo(int a) {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_static.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/function_local.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/function_param.cc	/^void foo(Foo* p0, Foo* p1) {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/function_param_unnamed.cc	/^void foo(int, int) {}$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/function_shadow_local.cc	/^void foo() {$/;"	f
foo	/home/yl/vim/vim/ccls/ccls/index_tests/vars/function_shadow_param.cc	/^void foo(int p) {$/;"	f
for_stdout	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^ThreadedQueue<std::string> *for_stdout;$/;"	m	namespace:ccls::pipeline::__anon32	file:
format	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    SerializeFormat format = SerializeFormat::Binary;$/;"	m	struct:ccls::Config::Cache
format	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^void format(ReplyOnce &reply, WorkingFile *wfile, tooling::Range range) {$/;"	f	namespace:ccls::__anon25
formatCode	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^llvm::Expected<tooling::Replacements> formatCode(StringRef code, StringRef file,$/;"	f	namespace:ccls::__anon25
formatOptions_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    PrettyFormatOptions formatOptions_;$/;"	m	class:PrettyWriter
fp_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    std::FILE* fp_;$/;"	m	class:FileReadStream
fp_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filewritestream.h	/^    std::FILE* fp_;$/;"	m	class:FileWriteStream
frag_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* frag_;   \/\/ Includes the #$/;"	m	class:GenericUri
freeUnusedMemory	/home/yl/vim/vim/ccls/ccls/src/platform_posix.cc	/^void freeUnusedMemory() {$/;"	f	namespace:ccls
freeUnusedMemory	/home/yl/vim/vim/ccls/ccls/src/platform_win.cc	/^void freeUnusedMemory() {}$/;"	f	namespace:ccls
freesans	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	s
from	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^    std::string from;$/;"	m	struct:ccls::TextReplacer::Replacement	file:
fromCharSourceRange	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^Range fromCharSourceRange(const SourceManager &sm, const LangOptions &lang,$/;"	f	namespace:ccls
fromPath	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^DocumentUri DocumentUri::fromPath(const std::string &path) {$/;"	f	class:ccls::DocumentUri
fromString	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^Pos Pos::fromString(const std::string &encoded) {$/;"	f	class:ccls::Pos
fromString	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^Range Range::fromString(const std::string &encoded) {$/;"	f	class:ccls::Range
fromTokenRange	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^Range fromTokenRange(const SourceManager &sm, const LangOptions &lang,$/;"	f	namespace:ccls
fromTokenRangeDefaulted	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^Range fromTokenRangeDefaulted(const SourceManager &sm, const LangOptions &lang,$/;"	f	namespace:ccls
from_cache	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  bool from_cache;$/;"	m	class:ccls::__anon20::CompletionConsumer	file:
from_cache	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  bool from_cache;$/;"	m	class:ccls::__anon29::SignatureHelpConsumer	file:
from_diag	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    bool from_diag = false;$/;"	m	struct:ccls::SemaManager::PreambleTask
fs	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem> fs =$/;"	m	struct:ccls::Session
func	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_alias.cc	/^void func() {$/;"	f
func	/home/yl/vim/vim/ccls/ccls/index_tests/types/typedefs.cc	/^typedef int (func)(const int *a, const int *b);$/;"	t	file:
func_usr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::DenseMap<Usr, int, DenseMapInfoForUsr> func_usr, type_usr, var_usr;$/;"	m	struct:ccls::DB
funcs	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<Usr> funcs;$/;"	m	struct:ccls::TypeDef
funcs	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int files, funcs, types, vars;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::DB	file:
funcs	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::SmallVector<QueryFunc, 0> funcs;$/;"	m	struct:ccls::DB
funcs_declarations	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<DeclRef> funcs_declarations;$/;"	m	struct:ccls::IndexUpdate
funcs_def_update	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<std::pair<Usr, QueryFunc::Def>> funcs_def_update;$/;"	m	struct:ccls::IndexUpdate
funcs_derived	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<Usr> funcs_derived;$/;"	m	struct:ccls::IndexUpdate
funcs_hint	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  int funcs_hint;$/;"	m	struct:ccls::IndexUpdate
funcs_removed	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<std::pair<Usr, QueryFunc::Def>> funcs_removed;$/;"	m	struct:ccls::IndexUpdate
funcs_uses	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<Use> funcs_uses;$/;"	m	struct:ccls::IndexUpdate
function	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^class function<T(Args...)> {};$/;"	c	file:
g	/home/yl/vim/vim/ccls/ccls/index_tests/types/typedefs.cc	/^static func	g;$/;"	v	file:
g_config	/home/yl/vim/vim/ccls/ccls/src/config.cc	/^Config *g_config;$/;"	m	namespace:ccls	file:
g_index	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::unordered_map<std::string, InMemoryIndexFile> g_index;$/;"	m	namespace:ccls::pipeline::__anon32	file:
g_index_mutex	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::shared_mutex g_index_mutex;$/;"	m	namespace:ccls::pipeline::__anon32	file:
g_init_options	/home/yl/vim/vim/ccls/ccls/src/main.cc	/^std::vector<std::string> g_init_options;$/;"	m	namespace:ccls	file:
g_quit	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::atomic<bool> g_quit;$/;"	m	namespace:ccls::pipeline	file:
gen	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call_simple.cc	/^int gen() { return 1; }$/;"	f
get	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::shared_ptr<V> get(const K &key) {$/;"	f	struct:ccls::LruCache
get	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  template <typename T> T get() {$/;"	f	struct:ccls::BinaryReader
getAdjustedDecl	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^const Decl *getAdjustedDecl(const Decl *d) {$/;"	f	namespace:ccls::__anon5
getBaseType	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^QualType getBaseType(QualType t, bool deduce_auto) {$/;"	f	namespace:ccls::__anon5
getBufferPosFromIndexPos	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^std::optional<int> WorkingFile::getBufferPosFromIndexPos(int line, int *column,$/;"	f	class:ccls::WorkingFile
getCachePath	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::string getCachePath(std::string src) {$/;"	f	namespace:ccls::pipeline::__anon32
getCharClass	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^CharClass getCharClass(int c) {$/;"	f	namespace:ccls::__anon3
getComment	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::string getComment(const Decl *d) {$/;"	f	class:ccls::__anon5::IndexDataConsumer
getCompletionKind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^CompletionItemKind getCompletionKind(CodeCompletionContext::Kind k,$/;"	f	namespace:ccls::__anon20
getCompletionPosition	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^Position WorkingFile::getCompletionPosition(Position pos, std::string *filter) const {$/;"	f	class:ccls::WorkingFile
getContent	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^std::string WorkingFiles::getContent(const std::string &path) {$/;"	f	class:ccls::WorkingFiles
getDeclLanguage	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^LanguageId getDeclLanguage(const Decl *d) {$/;"	f	namespace:ccls::__anon5
getDeclarations	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^getDeclarations(llvm::DenseMap<Usr, int, DenseMapInfoForUsr> &entity_usr,$/;"	f	namespace:ccls::__anon35
getDefaultPolicy	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  PrintingPolicy getDefaultPolicy() const {$/;"	f	class:ccls::__anon5::IndexDataConsumer
getDefaultResourceDirectory	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::string getDefaultResourceDirectory() { return CLANG_RESOURCE_DIRECTORY; }$/;"	f	namespace:ccls
getDefinitionSpell	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^Maybe<DeclRef> getDefinitionSpell(DB *db, SymbolIdx sym) {$/;"	f	namespace:ccls
getEmptyKey	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static inline Usr getEmptyKey() { return 0; }$/;"	f	struct:ccls::DenseMapInfoForUsr
getEmptyKey	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static inline ccls::ExtentRef getEmptyKey() { return {}; }$/;"	f	struct:llvm::DenseMapInfo
getFallback	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^std::vector<const char *> getFallback(const std::string &path) {$/;"	f	namespace:ccls::__anon33
getFile	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryFile &getFile(SymbolIdx ref) { return files[ref.usr]; }$/;"	f	struct:ccls::DB
getFile	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^WorkingFile *WorkingFiles::getFile(const std::string &path) {$/;"	f	class:ccls::WorkingFiles
getFileId	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^int DB::getFileId(const std::string &path) {$/;"	f	class:ccls::DB
getFileLID	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  static int getFileLID(IndexFile *db, SourceManager &sm, FileID fid) {$/;"	f	class:ccls::__anon5::IndexDataConsumer
getFileMutex	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::mutex &getFileMutex(const std::string &path) {$/;"	f	namespace:ccls::pipeline::__anon32
getFileSet	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<uint8_t> DB::getFileSet(const std::vector<std::string> &folders) {$/;"	f	class:ccls::DB
getFileUnlocked	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^WorkingFile *WorkingFiles::getFileUnlocked(const std::string &path) {$/;"	f	class:ccls::WorkingFiles
getFilesInFolder	/home/yl/vim/vim/ccls/ccls/src/filesystem.cc	/^void getFilesInFolder(std::string folder, bool recursive, bool dir_prefix,$/;"	f
getFunc	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryFunc &getFunc(SymbolIdx ref) { return getFunc(ref.usr); }$/;"	f	struct:ccls::DB
getFunc	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryFunc &getFunc(Usr usr) { return funcs[func_usr[usr]]; }$/;"	f	struct:ccls::DB
getFuncDeclarations	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<Use> getFuncDeclarations(DB *db, const Vec<Usr> &usrs) {$/;"	f	namespace:ccls
getFuncDeclarations	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<Use> getFuncDeclarations(DB *db, const std::vector<Usr> &usrs) {$/;"	f	namespace:ccls
getHashValue	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static unsigned getHashValue(Usr w) { return w; }$/;"	f	struct:ccls::DenseMapInfoForUsr
getHashValue	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static unsigned getHashValue(ccls::ExtentRef sym) {$/;"	f	struct:llvm::DenseMapInfo
getHover	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^getHover(DB *db, LanguageId lang, SymbolRef sym, int file_id) {$/;"	f	namespace:ccls::__anon26
getIndexPosFromBufferPos	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^std::optional<int> WorkingFile::getIndexPosFromBufferPos(int line, int *column,$/;"	f	class:ccls::WorkingFile
getKind	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^Kind getKind(const Decl *d, SymbolKind &kind) {$/;"	f	namespace:ccls::__anon5
getLocationLink	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^LocationLink getLocationLink(DB *db, WorkingFiles *wfiles, DeclRef dr) {$/;"	f	namespace:ccls
getLsDocumentUri	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^DocumentUri getLsDocumentUri(DB *db, int file_id) {$/;"	f	namespace:ccls
getLsDocumentUri	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^DocumentUri getLsDocumentUri(DB *db, int file_id, std::string *path) {$/;"	f	namespace:ccls
getLsLocation	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::optional<Location> getLsLocation(DB *db, WorkingFiles *wfiles, Use use) {$/;"	f	namespace:ccls
getLsLocation	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::optional<Location> getLsLocation(DB *db, WorkingFiles *wfiles,$/;"	f	namespace:ccls
getLsRange	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::optional<lsRange> getLsRange(WorkingFile *wfile, const Range &location) {$/;"	f	namespace:ccls
getMacro	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::pair<StringRef, Usr> getMacro(const Token &tok) const {$/;"	f	class:ccls::__anon5::IndexPPCallbacks	file:
getNonDefDeclarations	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<DeclRef> &getNonDefDeclarations(DB *db, SymbolIdx sym) {$/;"	f	namespace:ccls
getOffsetForPosition	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^int getOffsetForPosition(Position pos, std::string_view content) {$/;"	f	namespace:ccls
getPath	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^std::string DocumentUri::getPath() const {$/;"	f	class:ccls::DocumentUri
getPath	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^std::string JsonReader::getPath() const {$/;"	f	class:ccls::JsonReader
getPositionForOffset	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^Position getPositionForOffset(const std::string &content, int offset) {$/;"	f	namespace:ccls::__anon37
getPreamble	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^std::shared_ptr<PreambleData> Session::getPreamble() {$/;"	f	class:clang::ccls::Session
getSearchDirs	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  void getSearchDirs(Project::Entry &entry) {$/;"	f	struct:ccls::__anon33::ProjectProcessor
getSourceInRange	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^StringRef getSourceInRange(const SourceManager &sm, const LangOptions &langOpts,$/;"	f	namespace:ccls::__anon5
getString	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^std::string JsonReader::getString() { return m->GetString(); }$/;"	f	class:ccls::JsonReader
getString	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  const char *getString() {$/;"	f	struct:ccls::BinaryReader
getSymbolInfo	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::optional<SymbolInformation> getSymbolInfo(DB *db, SymbolIdx sym,$/;"	f	namespace:ccls
getSymbolKind	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^SymbolKind getSymbolKind(DB *db, SymbolIdx sym) {$/;"	f	namespace:ccls
getSymbolName	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::string_view DB::getSymbolName(SymbolIdx sym, bool qualified) {$/;"	f	class:ccls::DB
getTombstoneKey	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static inline Usr getTombstoneKey() { return ~0ULL; }$/;"	f	struct:ccls::DenseMapInfoForUsr
getTombstoneKey	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static inline ccls::ExtentRef getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getType	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryType &getType(SymbolIdx ref) { return getType(ref.usr); }$/;"	f	struct:ccls::DB
getType	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryType &getType(Usr usr) { return types[type_usr[usr]]; }$/;"	f	struct:ccls::DB
getTypeDecl	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^const Decl *getTypeDecl(QualType t, bool *specialization = nullptr) {$/;"	f	namespace:ccls::__anon5
getTypeDeclarations	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<Use> getTypeDeclarations(DB *db, const std::vector<Usr> &usrs) {$/;"	f	namespace:ccls
getUnderlyingFS	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  FileSystem &getUnderlyingFS() { return *FS; }$/;"	f	struct:clang::vfs::ProxyFileSystem
getUsesForAllBases	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<Use> getUsesForAllBases(DB *db, QueryFunc &root) {$/;"	f	namespace:ccls
getUsesForAllDerived	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<Use> getUsesForAllDerived(DB *db, QueryFunc &root) {$/;"	f	namespace:ccls
getUsr	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  Usr getUsr(const Decl *d, IndexParam::DeclInfo **info = nullptr) const {$/;"	f	class:ccls::__anon5::IndexDataConsumer
getVar	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryVar &getVar(SymbolIdx ref) { return getVar(ref.usr); }$/;"	f	struct:ccls::DB
getVar	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  QueryVar &getVar(Usr usr) { return vars[var_usr[usr]]; }$/;"	f	struct:ccls::DB
getVarDeclarations	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^std::vector<DeclRef> getVarDeclarations(DB *db, const std::vector<Usr> &usrs,$/;"	f	namespace:ccls
gh_pages_commit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^gh_pages_commit() {$/;"	f
gh_pages_prepare	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^gh_pages_prepare()$/;"	f
gh_pages_push	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^gh_pages_push() {$/;"	f
gh_setup_askpass	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^gh_setup_askpass() {$/;"	f
globPattern	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::string globPattern = "**\/*";$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::FileSystemWatcher	file:
global	/home/yl/vim/vim/ccls/ccls/index_tests/vars/global_variable.cc	/^static int global = 0;$/;"	v	file:
groupName	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    std::string groupName;$/;"	m	struct:Group	file:
groups	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^def groups(paths):$/;"	f
handleDeclOccurrence	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	693;"	d	file:
handler	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  MessageHandler &handler;$/;"	m	struct:ccls::InsertTextFormat::ReplyOnce
hasBOM_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    bool hasBOM_;$/;"	m	class:AutoUTFInputStream
hasDependencies_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool hasDependencies_;$/;"	m	class:internal::Schema
hasFunc	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  bool hasFunc(Usr usr) const { return func_usr.count(usr); }$/;"	f	struct:ccls::DB
hasName_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    bool hasName_;$/;"	m	class:JsonxWriter	file:
hasRequired_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool hasRequired_;$/;"	m	class:internal::Schema
hasRoot_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    bool hasRoot_;$/;"	m	class:Writer
hasSchemaDependencies_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool hasSchemaDependencies_;$/;"	m	class:internal::Schema
hasState	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  static bool hasState(std::initializer_list<BaseThreadQueue *> queues) {$/;"	f	struct:ccls::MultiQueueWaiter
hasType	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  bool hasType(Usr usr) const { return type_usr.count(usr); }$/;"	f	struct:ccls::DB
hasVar	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  bool hasVar(Usr usr) const { return var_usr.count(usr); }$/;"	f	struct:ccls::DB
hash	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^template <> struct hash<clang::FileID> {$/;"	s	namespace:std
hash	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^template <> struct hash<ccls::Range> {$/;"	s	namespace:std
hashUsr	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^uint64_t hashUsr(llvm::StringRef s) {$/;"	f	namespace:ccls
hash_combine	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^inline void hash_combine(std::size_t &seed) {}$/;"	f	namespace:ccls
hash_combine	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^inline void hash_combine(std::size_t &seed, const T &v, Rest... rest) {$/;"	f	namespace:ccls
hashcode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        SizeType hashcode;  \/\/!< reserved$/;"	m	struct:GenericValue::String
hasher	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    void* hasher; \/\/ Only validator access$/;"	m	struct:internal::SchemaValidationContext
head_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        const Ch* head_;    \/\/!< Original head of the string.$/;"	m	class:GenericPointer::PercentDecodeStream
head_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* head_;$/;"	m	struct:GenericInsituStringStream
head_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    const Ch* head_;    \/\/!< Original head of the string.$/;"	m	struct:GenericStringStream
head_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const Ch* head_;    \/\/!< Original head of the string.$/;"	m	class:CustomStringStream	file:
height	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    double height;$/;"	m	struct:Student	file:
height: 100	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	height: 100% !important;$/;"	s
height_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    double width_, height_;$/;"	m	class:Box	file:
hello	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/function_declaration.cc	/^namespace hello {$/;"	n	file:
hello	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/function_definition.cc	/^namespace hello {$/;"	n	file:
hello	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_declaration.cc	/^namespace hello {$/;"	n	file:
hello	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_definition.cc	/^namespace hello {$/;"	n	file:
hello	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/method_inline_declaration.cc	/^namespace hello {$/;"	n	file:
help	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    help="Output a flattened file containing a selected version's test cases."$/;"	v
help	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    help="Output the expected URLs and their associated schemas for remote "$/;"	v
help	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    help="Randomize the order of the outputted cases.",$/;"	v
help	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    help="Start a webserver to serve schemas used by remote ref tests."$/;"	v
help	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    help="The output directory to create as the root of the file tree",$/;"	v
help	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    help="Update the remotes in an existing directory.",$/;"	v
helper	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_class_inline_var_def.cc	/^static int helper() {$/;"	f	file:
hierarchicalDocumentSymbolSupport	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool hierarchicalDocumentSymbolSupport = true;$/;"	m	struct:ccls::Config::ClientCapability
hierarchicalDocumentSymbolSupport	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool hierarchicalDocumentSymbolSupport = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::DocumentSymbol	file:
hierarchicalPath	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool hierarchicalPath = false;$/;"	m	struct:ccls::Config::Cache
hierarchy	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  bool hierarchy = false;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
hierarchy	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  bool hierarchy = false;$/;"	m	struct:ccls::__anon11::Param	file:
hierarchy	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  bool hierarchy = false;$/;"	m	struct:ccls::__anon12::Param	file:
highlight	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } highlight;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Highlight
hover	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *hover = "";$/;"	m	struct:ccls::FuncDef
hover	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *hover = "";$/;"	m	struct:ccls::TypeDef
hover	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *hover = "";$/;"	m	struct:ccls::VarDef
hoverProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool hoverProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
href 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.contents a[href ^= "http"]:after {$/;"	s
http	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^div.contents a[href ^= "http"]:after {$/;"	s
i	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^            int i;$/;"	m	struct:GenericValue::Number::I
i	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        }i;$/;"	m	union:GenericValue::Number	typeref:struct:GenericValue::Number::I
i	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^            int64_t i;$/;"	m	union:internal::Hasher::Number::U
i32toa	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	/^inline char* i32toa(int32_t value, char* buffer) {$/;"	f	namespace:internal
i32toa_naive	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^static void i32toa_naive(int32_t value, char* buffer) {$/;"	f	file:
i64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        int64_t i64;$/;"	m	union:GenericValue::Number
i64toa	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	/^inline char* i64toa(int64_t value, char* buffer) {$/;"	f	namespace:internal
i64toa_naive	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^static void i64toa_naive(int64_t value, char* buffer) {$/;"	f	file:
id	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  RequestId id;$/;"	m	struct:ccls::InMessage
id	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  int id = 0;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlightSymbol	file:
id	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  int id;$/;"	m	struct:ccls::__anon7::ScanLineEvent	file:
id	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  RequestId id;$/;"	m	struct:ccls::InsertTextFormat::ReplyOnce
id	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  std::string id;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
id	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  std::string id;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
id	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  std::string id;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
id	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  std::string id;$/;"	m	struct:ccls::__anon11::Param	file:
id	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  std::string id;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
id	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  std::string id;$/;"	m	struct:ccls::__anon12::Param	file:
id	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::string id = "didChangeWatchedFiles";$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::DidChangeWatchedFilesRegistration	file:
id	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  RequestId id;$/;"	m	struct:ccls::pipeline::__anon32::IndexRequest	file:
id	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    int id = -1;$/;"	m	struct:ccls::Project::Entry
id	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  int id = -1;$/;"	m	struct:ccls::QueryFile
id	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    RequestId id;$/;"	m	struct:ccls::SemaManager::CompTask
id_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    UriType id_;$/;"	m	class:internal::Schema
idx	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^namespace idx {$/;"	n	namespace:ccls	file:
idx	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^namespace idx {$/;"	n	namespace:ccls
ignore	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^template <> bool ignore(const QueryType::Def *def) {$/;"	f	namespace:ccls::__anon23
ignore	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^template <> bool ignore(const QueryVar::Def *def) {$/;"	f	namespace:ccls::__anon23
ignore	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^template <typename Def> bool ignore(const Def *def) { return false; }$/;"	f	namespace:ccls::__anon23
imaxabs	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	279;"	d
imaxdiv	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	/^imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom)$/;"	f
imaxdiv_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	/^} imaxdiv_t;$/;"	t	typeref:struct:__anon47
impl	/home/yl/vim/vim/ccls/ccls/index_tests/multi_file/simple_impl.cc	/^void impl() {$/;"	f
impl	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  std::unique_ptr<Impl> impl;$/;"	m	struct:ccls::Matcher
implementationProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool implementationProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
import_file	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::string import_file;$/;"	m	struct:ccls::IndexFile
important	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	height: 100% !important;$/;"	s
important	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	left: 45px !important;$/;"	s
important	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	width: 250px !important;$/;"	s
inArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool inArray;$/;"	m	struct:internal::SchemaValidationContext
inArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^        bool inArray;       \/\/!< true if in array, otherwise in object$/;"	m	struct:Writer::Level
include	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    } include;$/;"	m	struct:ccls::Config::Completion	typeref:struct:ccls::Config::Completion::Include
includeDeclaration	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^    bool includeDeclaration = false;$/;"	m	struct:ccls::__anon27::ReferenceParam::Context	file:
includeText	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool includeText = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::SaveOptions	file:
include_complete	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  IncludeComplete *include_complete = nullptr;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
includes	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<IndexInclude> includes;$/;"	m	struct:ccls::IndexFile
includes	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool includes(const lsRange &o) const {$/;"	f	struct:ccls::lsRange
includes	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  bool includes = false;$/;"	m	struct:ccls::FileInfoParam	file:
includes	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^    std::vector<IndexInclude> includes;$/;"	m	struct:ccls::QueryFile::Def
includes	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  IncludeStructure includes;$/;"	m	class:clang::ccls::__anon36::CclsPreambleCallbacks	file:
includes	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  IncludeStructure includes;$/;"	m	struct:clang::ccls::PreambleData	file:
indentCharCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    unsigned indentCharCount_;$/;"	m	class:PrettyWriter
indentChar_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    Ch indentChar_;$/;"	m	class:PrettyWriter
index	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } index;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Index
index	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^index(SemaManager *manager, WorkingFiles *wfiles, VFS *vfs,$/;"	f	namespace:ccls::idx
index	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  IndexFile index;$/;"	m	struct:ccls::pipeline::__anon32::InMemoryIndexFile	file:
index	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void index(const std::string &path, const std::vector<const char *> &args,$/;"	f	namespace:ccls::pipeline
index	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^void Project::index(WorkingFiles *wfiles, const RequestId &id) {$/;"	f	class:ccls::Project
index	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^    SizeType index;   \/\/ For array iteration$/;"	m	struct:JsonReaderStackItem	file:
index	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        SizeType index;             \/\/!< A valid array index, if it is not equal to kPointerInvalidIndex.$/;"	m	struct:GenericPointer::Token
indexOpts	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  const index::IndexingOptions &indexOpts;$/;"	m	class:ccls::__anon5::IndexFrontendAction	file:
indexRelated	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^void Project::indexRelated(const std::string &path) {$/;"	f	class:ccls::Project
index_lines	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::vector<std::string> index_lines;$/;"	m	struct:ccls::WorkingFile
index_progress_token	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^constexpr char index_progress_token[] = "index";$/;"	m	namespace:ccls::__anon31	file:
index_request	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^ThreadedQueue<IndexRequest> *index_request;$/;"	m	namespace:ccls::pipeline::__anon32	file:
index_to_buffer	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::vector<int> index_to_buffer;$/;"	m	struct:ccls::WorkingFile
indexer	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void *indexer(void *arg_) {$/;"	f	class:ccls::__anon17::TextDocumentSyncKind	file:
indexer_Main	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void indexer_Main(SemaManager *manager, VFS *vfs, Project *project,$/;"	f	namespace:ccls::pipeline
indexer_Parse	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^bool indexer_Parse(SemaManager *completion, WorkingFiles *wfiles,$/;"	f	namespace:ccls::pipeline::__anon32
indexer_waiter	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^MultiQueueWaiter *indexer_waiter;$/;"	m	namespace:ccls::pipeline::__anon32	file:
indexes	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<std::unique_ptr<IndexFile>> indexes;$/;"	m	struct:ccls::IndexResult
inferred	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  bool inferred = false;$/;"	m	struct:ccls::Session
info_arch	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
inheritance	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^void inheritance(MessageHandler *m, Param &param, ReplyOnce &reply) {$/;"	f	namespace:ccls::__anon11
init	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void init() {$/;"	f	namespace:ccls::idx
init	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void init() {$/;"	f	namespace:ccls::pipeline
initialBlacklist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> initialBlacklist;$/;"	m	struct:ccls::Config::Index
initialCapacity_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    size_t initialCapacity_;$/;"	m	class:internal::Stack
initialNoLinkage	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool initialNoLinkage = false;$/;"	m	struct:ccls::Config::Index
initialWhitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> initialWhitelist;$/;"	m	struct:ccls::Config::Index
initializationOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  Config initializationOptions;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeParam	file:
initialize	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void MessageHandler::initialize(JsonReader &reader, ReplyOnce &reply) {$/;"	f	class:ccls::__anon17::MessageHandler
initialized	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void MessageHandler::initialized(EmptyParam &) {$/;"	f	class:ccls::__anon17::MessageHandler
insert	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  void insert(const K &key, std::shared_ptr<V> value) {$/;"	f	struct:ccls::LruCache
insertCompletionItem	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^void IncludeComplete::insertCompletionItem(const std::string &absolute_path,$/;"	f	class:ccls::IncludeComplete
insertSpaces	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  bool insertSpaces;$/;"	m	struct:ccls::InsertTextFormat::FormattingOptions
insertTextFormat	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  InsertTextFormat insertTextFormat = InsertTextFormat::PlainText;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
inserted_paths	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  std::unordered_map<std::string, int> inserted_paths;$/;"	m	struct:ccls::IncludeComplete
insitustringstream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    InsituStringStream* insitustringstream;$/;"	m	struct:Foo	file:
instances	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Usr> instances;$/;"	m	struct:ccls::IndexType
instances	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<Usr> instances;$/;"	m	struct:ccls::QueryType
int16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed __int16    int16_t;$/;"	t
int16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed short      int16_t;$/;"	t
int32_t	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_inherit.cc	/^typedef int int32_t;$/;"	t	file:
int32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed __int32    int32_t;$/;"	t
int32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed int        int32_t;$/;"	t
int64	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::int64(int64_t v) { m->Int64(v); }$/;"	f	class:ccls::JsonWriter
int64_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef signed __int64       int64_t;$/;"	t
int8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed __int8     int8_t;$/;"	t
int8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed char       int8_t;$/;"	t
int_fast16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int16_t   int_fast16_t;$/;"	t
int_fast32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int32_t   int_fast32_t;$/;"	t
int_fast64_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int64_t   int_fast64_t;$/;"	t
int_fast8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int8_t    int_fast8_t;$/;"	t
int_least16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int16_t   int_least16_t;$/;"	t
int_least32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int32_t   int_least32_t;$/;"	t
int_least64_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int64_t   int_least64_t;$/;"	t
int_least8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int8_t    int_least8_t;$/;"	t
intern	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^const char *intern(StringRef s) { return internH(s).val().data(); }$/;"	f	namespace:ccls
internH	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^CachedHashStringRef internH(StringRef s) {$/;"	f	namespace:ccls
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/clzll.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/dtoa.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/meta.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/pow10.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strfunc.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/strtod.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/swap.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^namespace internal {$/;"	n
internal	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^namespace internal {$/;"	n
intersects	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool intersects(const lsRange &o) const {$/;"	f	struct:ccls::lsRange
intmax_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef int64_t   intmax_t;$/;"	t
intptr_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef _W64 signed int   intptr_t;$/;"	t
intptr_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef signed __int64    intptr_t;$/;"	t
invalidCode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValidateErrorCode invalidCode;$/;"	m	struct:internal::SchemaValidationContext
invalidDocumentPointer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PointerType invalidDocumentPointer_;$/;"	m	class:SchemaValidatingReader
invalidKeyword	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const Ch* invalidKeyword;$/;"	m	struct:internal::SchemaValidationContext
invalidSchemaCode_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValidateErrorCode invalidSchemaCode_;$/;"	m	class:SchemaValidatingReader
invalidSchemaKeyword_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const Ch* invalidSchemaKeyword_;$/;"	m	class:SchemaValidatingReader
invalidSchemaPointer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PointerType invalidSchemaPointer_;$/;"	m	class:SchemaValidatingReader
is	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        InputStream& is;$/;"	m	class:GenericReader::NumberStream
isAsciiIdentifierContinue	/home/yl/vim/vim/ccls/ccls/src/clang_tu.hh	21;"	d
isAsciiIdentifierContinue	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	346;"	d	file:
isCacheValid	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  bool isCacheValid(const std::string &path, const std::string &line,$/;"	f	struct:ccls::CompleteConsumerCache
isConcerned	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  bool isConcerned(const SourceManager &sm, SourceLocation l) {$/;"	f	class:clang::ccls::__anon36::StoreDiags
isEmpty	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  bool isEmpty() { return total_count_ == 0; }$/;"	f	struct:ccls::ThreadedQueue
isEqual	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static bool isEqual(Usr l, Usr r) { return l == r; }$/;"	f	struct:ccls::DenseMapInfoForUsr
isEqual	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  static bool isEqual(ccls::ExtentRef l, ccls::ExtentRef r) { return l == r; }$/;"	f	struct:llvm::DenseMapInfo
isIncomplete	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  bool isIncomplete = false;$/;"	m	struct:ccls::__anon20::CompletionList	file:
isInsideMainFile	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^bool isInsideMainFile(const SourceManager &sm, SourceLocation sl) {$/;"	f	namespace:ccls
isNull	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^bool JsonReader::isNull() { return m->IsNull(); }$/;"	f	class:ccls::JsonReader
isValid_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool isValid_;$/;"	m	class:SchemaValidatingReader
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    InputStream& is_;$/;"	m	class:FilterKeyReader	file:
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    InputByteStream& is_;$/;"	m	class:EncodedInputStream
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    InputByteStream* is_;$/;"	m	class:AutoUTFInputStream
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    MemoryStream& is_;$/;"	m	class:EncodedInputStream
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    InputStream& is_;$/;"	m	class:SchemaValidatingReader
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    InputStream& is_;$/;"	m	class:GenericStreamWrapper
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    std::istream& is_;$/;"	m	class:IStreamWrapper	file:
is_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^  std::wistream& is_;$/;"	m	class:WIStreamWrapper	file:
is_inferred	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    bool is_inferred = false;$/;"	m	struct:ccls::Project::Entry
is_local	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool is_local() const {$/;"	f	struct:ccls::VarDef
is_scanning	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  std::atomic<bool> is_scanning;$/;"	m	struct:ccls::IncludeComplete
items	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::vector<CompletionItem> items;$/;"	m	struct:ccls::__anon20::CompletionList	file:
items	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::vector<std::pair<K, std::shared_ptr<V>>> items;$/;"	m	struct:ccls::LruCache
itemsList_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* itemsList_;$/;"	m	class:internal::Schema
itemsTupleCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType itemsTupleCount_;$/;"	m	class:internal::Schema
itemsTuple_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType** itemsTuple_;$/;"	m	class:internal::Schema
iterArray	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonReader::iterArray(llvm::function_ref<void()> fn) {$/;"	f	class:ccls::JsonReader
iterate	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  template <typename Fn> void iterate(Fn fn) {$/;"	f	struct:ccls::ThreadedQueue
iterator_category	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:GenericMemberIterator
itoa64_Writer_InsituStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa64_Writer_InsituStringStream() {$/;"	f
itoa64_Writer_InsituStringStreamVerify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa64_Writer_InsituStringStreamVerify() {$/;"	f
itoa64_Writer_StringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa64_Writer_StringBuffer() {$/;"	f
itoa64_Writer_StringBufferVerify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa64_Writer_StringBufferVerify() {$/;"	f
itoa_Writer_InsituStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa_Writer_InsituStringStream() {$/;"	f
itoa_Writer_InsituStringStreamVerify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa_Writer_InsituStringStreamVerify() {$/;"	f
itoa_Writer_StringBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa_Writer_StringBuffer() {$/;"	f
itoa_Writer_StringBufferVerify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^void itoa_Writer_StringBufferVerify() {$/;"	f
json	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import json$/;"	i
json	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/namespacetest.cpp	/^static const char json[] = "{\\"hello\\":\\"world\\",\\"t\\":true,\\"f\\":false,\\"n\\":null,\\"i\\":123,\\"pi\\":3.1416,\\"a\\":[1,2,3,4]}";$/;"	v	file:
json_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    char *json_;$/;"	m	class:PerfTest
json_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    char *json_;$/;"	m	class:EncodedStreamTest	file:
json_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    char *json_;$/;"	m	class:FileStreamTest	file:
jsonify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^            from flask import Flask, jsonify$/;"	i
jsonschema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    import jsonschema$/;"	i
jsonschema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    jsonschema = None$/;"	v
kAlternation	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        kAlternation,$/;"	e	enum:internal::GenericRegex::Operator
kAnyCharacterClass	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    static const unsigned kAnyCharacterClass = 0xFFFFFFFF;   \/\/!< For '.'$/;"	m	class:internal::GenericRegex
kArrayFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kArrayFlag = kArrayType,$/;"	e	enum:GenericValue::__anon38
kArraySchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kArraySchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kArrayType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kArrayType = 4,     \/\/!< array $/;"	e	enum:Type
kBitCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    static const size_t kBitCount = 3328;  \/\/ 64bit * 54 > 10^1000$/;"	m	class:internal::BigInteger
kBoolFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kBoolFlag       = 0x0008,$/;"	e	enum:GenericValue::__anon38
kBooleanSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kBooleanSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kBufferSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kBufferSize = 11 };$/;"	e	enum:Traits::__anon52	file:
kBufferSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kBufferSize = 12 };$/;"	e	enum:Traits::__anon54	file:
kBufferSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kBufferSize = 21 };$/;"	e	enum:Traits::__anon56	file:
kBufferSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kBufferSize = 22 };$/;"	e	enum:Traits::__anon58	file:
kCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    static const size_t kCapacity = kBitCount \/ sizeof(Type);$/;"	m	class:internal::BigInteger
kCodepointRanges	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^static const unsigned kCodepointRanges[] = {$/;"	v	file:
kConcatenation	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        kConcatenation,$/;"	e	enum:internal::GenericRegex::Operator
kConstStringFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kConstStringFlag = static_cast<int>(kStringType) | static_cast<int>(kStringFlag),$/;"	e	enum:GenericValue::__anon38
kCopyFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kCopyFlag       = 0x0800,$/;"	e	enum:GenericValue::__anon38
kCopyStringFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kCopyStringFlag = static_cast<int>(kStringType) | static_cast<int>(kStringFlag | kCopyFlag),$/;"	e	enum:GenericValue::__anon38
kCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    static const size_t kCount = 5;$/;"	m	class:RemoteSchemaDocumentProvider	file:
kDefaultArrayCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static const SizeType kDefaultArrayCapacity = RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY;$/;"	m	class:GenericValue
kDefaultCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    static const size_t kDefaultCapacity = 256;$/;"	m	struct:GenericMemoryBuffer
kDefaultCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    static const size_t kDefaultCapacity = 256;$/;"	m	class:GenericStringBuffer
kDefaultChunkCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const size_t kDefaultChunkCapacity = RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY; \/\/!< Default chunk capacity.$/;"	m	class:MemoryPoolAllocator
kDefaultDocumentStackCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const size_t kDefaultDocumentStackCapacity = 256;$/;"	m	class:GenericSchemaValidator
kDefaultLevelDepth	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    static const size_t kDefaultLevelDepth = 32;$/;"	m	class:Writer
kDefaultMaxDecimalPlaces	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    static const int kDefaultMaxDecimalPlaces = 324;$/;"	m	class:Writer
kDefaultObjectCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static const SizeType kDefaultObjectCapacity = RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY;$/;"	m	class:GenericValue
kDefaultSchemaStackCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const size_t kDefaultSchemaStackCapacity = 1024;$/;"	m	class:GenericSchemaValidator
kDefaultSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const size_t kDefaultSize = 256;$/;"	m	class:internal::Hasher
kDefaultStackCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    static const size_t kDefaultStackCapacity = 1024;$/;"	m	class:GenericDocument
kDefaultStackCapacity	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    static const size_t kDefaultStackCapacity = 256;    \/\/!< Default stack capacity in bytes for storing a single decoded string.$/;"	m	class:GenericReader
kDenormalExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const int kDenormalExponent = 1 - kExponentBias;$/;"	m	class:internal::Double
kDiySignificandSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const int kDiySignificandSize = 64;$/;"	m	struct:internal::DiyFp
kDoubleFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kDoubleFlag     = 0x0200,$/;"	e	enum:GenericValue::__anon38
kDpDenormalExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const int kDpDenormalExponent = -kDpExponentBias + 1;$/;"	m	struct:internal::DiyFp
kDpExponentBias	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const int kDpExponentBias = 0x3FF + kDpSignificandSize;$/;"	m	struct:internal::DiyFp
kDpExponentMask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const uint64_t kDpExponentMask = RAPIDJSON_UINT64_C2(0x7FF00000, 0x00000000);$/;"	m	struct:internal::DiyFp
kDpHiddenBit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const uint64_t kDpHiddenBit = RAPIDJSON_UINT64_C2(0x00100000, 0x00000000);$/;"	m	struct:internal::DiyFp
kDpMaxExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const int kDpMaxExponent = 0x7FF - kDpExponentBias;$/;"	m	struct:internal::DiyFp
kDpMinExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const int kDpMinExponent = -kDpExponentBias;$/;"	m	struct:internal::DiyFp
kDpSignificandMask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const uint64_t kDpSignificandMask = RAPIDJSON_UINT64_C2(0x000FFFFF, 0xFFFFFFFF);$/;"	m	struct:internal::DiyFp
kDpSignificandSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    static const int kDpSignificandSize = 52;$/;"	m	struct:internal::DiyFp
kEnteringArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kEnteringArray,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kEnteringObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kEnteringObject,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kError,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kExitingArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kExitingArray$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kExitingObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kExitingObject,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kExpectNameOrObjectEnd	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^        kExpectNameOrObjectEnd,$/;"	e	enum:MessageHandler::State	file:
kExpectObjectStart	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^        kExpectObjectStart,$/;"	e	enum:MessageHandler::State	file:
kExpectValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^        kExpectValue$/;"	e	enum:MessageHandler::State	file:
kExponentBias	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const int kExponentBias = 0x3FF;$/;"	m	class:internal::Double
kExponentMask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const uint64_t kExponentMask = RAPIDJSON_UINT64_C2(0x7FF00000, 0x00000000);$/;"	m	class:internal::Double
kFalseFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kFalseFlag = static_cast<int>(kFalseType) | static_cast<int>(kBoolFlag),$/;"	e	enum:GenericValue::__anon38
kFalseType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kFalseType = 1,     \/\/!< false$/;"	e	enum:Type
kFormatDefault	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    kFormatDefault = 0,         \/\/!< Default pretty formatting.$/;"	e	enum:PrettyFormatOptions
kFormatSingleLineArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/prettywriter.h	/^    kFormatSingleLineArray = 1  \/\/!< Format arrays on a single line.$/;"	e	enum:PrettyFormatOptions
kHasBool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kHasBool,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kHasKey	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kHasKey,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kHasNull	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kHasNull,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kHasNumber	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kHasNumber,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kHasString	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kHasString,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kHiddenBit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const uint64_t kHiddenBit = RAPIDJSON_UINT64_C2(0x00100000, 0x00000000);$/;"	m	class:internal::Double
kInfinityQuantifier	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    static const unsigned kInfinityQuantifier = ~0u;$/;"	m	class:internal::GenericRegex
kInit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^        kInit,$/;"	e	enum:LookaheadParserHandler::LookaheadParsingState	file:
kInitialSchemaMapSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const size_t kInitialSchemaMapSize = 64;$/;"	m	class:GenericSchemaDocument
kInitialSchemaRefSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    static const size_t kInitialSchemaRefSize = 64;$/;"	m	class:GenericSchemaDocument
kInlineStrFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kInlineStrFlag  = 0x1000,$/;"	e	enum:GenericValue::__anon38
kInt	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  enum Type { kNone, kInt, kString };$/;"	e	enum:ccls::RequestId::Type
kInt64Flag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kInt64Flag      = 0x0080,$/;"	e	enum:GenericValue::__anon38
kIntFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kIntFlag        = 0x0020,$/;"	e	enum:GenericValue::__anon38
kIntegerSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kIntegerSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kItoaTrialCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static const size_t kItoaTrialCount = 10000;$/;"	v	file:
kJson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^static const char kJson[] = "{\\n"$/;"	v	file:
kJson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^static const char kJson[] = "{\\"hello\\":\\"world\\",\\"t\\":true,\\"f\\":false,\\"n\\":null,\\"i\\":123,\\"pi\\":3.1416,\\"a\\":[1,2,3,-1],\\"u64\\":1234567890123456789,\\"i64\\":-1234567890123456789}";$/;"	v	file:
kJsonIds	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^static const char kJsonIds[] = "{\\n"$/;"	v	file:
kLeftParenthesis	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        kLeftParenthesis$/;"	e	enum:internal::GenericRegex::Operator
kMajorVersion	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^const int IndexFile::kMajorVersion = 21;$/;"	m	class:ccls::IndexFile	file:
kMajorVersion	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  static const int kMajorVersion;$/;"	m	struct:ccls::IndexFile
kMaxColumnAlignSize	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^constexpr int kMaxColumnAlignSize = 200;$/;"	m	namespace:ccls::__anon37	file:
kMaxDiff	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^constexpr int kMaxDiff = 20;$/;"	m	namespace:ccls::__anon37	file:
kMaxDigit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kMaxDigit = 10 };$/;"	e	enum:Traits::__anon53	file:
kMaxDigit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kMaxDigit = 10 };$/;"	e	enum:Traits::__anon55	file:
kMaxDigit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kMaxDigit = 20 };$/;"	e	enum:Traits::__anon57	file:
kMaxDigit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^    enum { kMaxDigit = 20 };$/;"	e	enum:Traits::__anon59	file:
kMaxPat	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  constexpr static int kMaxPat = 100;$/;"	m	class:ccls::FuzzyMatcher
kMaxText	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  constexpr static int kMaxText = 200;$/;"	m	class:ccls::FuzzyMatcher
kMinScore	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  constexpr static int kMinScore = INT_MIN \/ 4;$/;"	m	class:ccls::FuzzyMatcher
kMinorVersion	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^const int IndexFile::kMinorVersion = 0;$/;"	m	class:ccls::IndexFile	file:
kMinorVersion	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  static const int kMinorVersion;$/;"	m	struct:ccls::IndexFile
kNeedFree	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const bool kNeedFree = BaseAllocator::kNeedFree;$/;"	m	class:StdAllocator
kNeedFree	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const bool kNeedFree = false;    \/\/!< Tell users that no need to call Free() with this allocator. (concept Allocator)$/;"	m	class:MemoryPoolAllocator
kNeedFree	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const bool kNeedFree = true;$/;"	m	class:CrtAllocator
kNeedFree	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^    static const bool kNeedFree = true;$/;"	m	class:myjson::MyAllocator	file:
kNone	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  enum Type { kNone, kInt, kString };$/;"	e	enum:ccls::RequestId::Type
kNullFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNullFlag = kNullType,$/;"	e	enum:GenericValue::__anon38
kNullSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kNullSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kNullType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kNullType = 0,      \/\/!< null$/;"	e	enum:Type
kNumberAnyFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberAnyFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kIntFlag | kInt64Flag | kUintFlag | kUint64Flag | kDoubleFlag),$/;"	e	enum:GenericValue::__anon38
kNumberDoubleFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberDoubleFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kDoubleFlag),$/;"	e	enum:GenericValue::__anon38
kNumberFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberFlag     = 0x0010,$/;"	e	enum:GenericValue::__anon38
kNumberInt64Flag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberInt64Flag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kInt64Flag),$/;"	e	enum:GenericValue::__anon38
kNumberIntFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberIntFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kIntFlag | kInt64Flag),$/;"	e	enum:GenericValue::__anon38
kNumberSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kNumberSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kNumberType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kNumberType = 6     \/\/!< number$/;"	e	enum:Type
kNumberUint64Flag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberUint64Flag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kUint64Flag),$/;"	e	enum:GenericValue::__anon38
kNumberUintFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kNumberUintFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kUintFlag | kUint64Flag | kInt64Flag),$/;"	e	enum:GenericValue::__anon38
kObjectFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kObjectFlag = kObjectType,$/;"	e	enum:GenericValue::__anon38
kObjectSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kObjectSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kObjectType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kObjectType = 3,    \/\/!< object$/;"	e	enum:Type
kOneOrMore	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        kOneOrMore,$/;"	e	enum:internal::GenericRegex::Operator
kOnst	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^static const int kOnst = 7;$/;"	v	file:
kParseCommentsFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseCommentsFlag = 32,        \/\/!< Allow one-line (\/\/) and multi-line (\/**\/) comments.$/;"	e	enum:ParseFlag
kParseDefaultFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseDefaultFlags = RAPIDJSON_PARSE_DEFAULT_FLAGS  \/\/!< Default parse flags. Can be customized by defining RAPIDJSON_PARSE_DEFAULT_FLAGS$/;"	e	enum:ParseFlag
kParseErrorArrayMissCommaOrSquareBracket	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorArrayMissCommaOrSquareBracket,   \/\/!< Missing a comma or ']' after an array element.$/;"	e	enum:ParseErrorCode
kParseErrorDocumentEmpty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorDocumentEmpty,                   \/\/!< The document is empty.$/;"	e	enum:ParseErrorCode
kParseErrorDocumentRootNotSingular	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorDocumentRootNotSingular,         \/\/!< The document root must not follow by other values.$/;"	e	enum:ParseErrorCode
kParseErrorNone	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorNone = 0,                        \/\/!< No error.$/;"	e	enum:ParseErrorCode
kParseErrorNumberMissExponent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorNumberMissExponent,              \/\/!< Miss exponent in number.$/;"	e	enum:ParseErrorCode
kParseErrorNumberMissFraction	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorNumberMissFraction,              \/\/!< Miss fraction part in number.$/;"	e	enum:ParseErrorCode
kParseErrorNumberTooBig	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorNumberTooBig,                    \/\/!< Number too big to be stored in double.$/;"	e	enum:ParseErrorCode
kParseErrorObjectMissColon	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorObjectMissColon,                 \/\/!< Missing a colon after a name of object member.$/;"	e	enum:ParseErrorCode
kParseErrorObjectMissCommaOrCurlyBracket	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorObjectMissCommaOrCurlyBracket,   \/\/!< Missing a comma or '}' after an object member.$/;"	e	enum:ParseErrorCode
kParseErrorObjectMissName	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorObjectMissName,                  \/\/!< Missing a name for object member.$/;"	e	enum:ParseErrorCode
kParseErrorStringEscapeInvalid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorStringEscapeInvalid,             \/\/!< Invalid escape character in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringInvalidEncoding	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorStringInvalidEncoding,           \/\/!< Invalid encoding in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringMissQuotationMark	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorStringMissQuotationMark,         \/\/!< Missing a closing quotation mark in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringUnicodeEscapeInvalidHex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorStringUnicodeEscapeInvalidHex,   \/\/!< Incorrect hex digit after \\\\u escape in string.$/;"	e	enum:ParseErrorCode
kParseErrorStringUnicodeSurrogateInvalid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorStringUnicodeSurrogateInvalid,   \/\/!< The surrogate pair in string is invalid.$/;"	e	enum:ParseErrorCode
kParseErrorTermination	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorTermination,                     \/\/!< Parsing was terminated.$/;"	e	enum:ParseErrorCode
kParseErrorUnspecificSyntaxError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorUnspecificSyntaxError            \/\/!< Unspecific syntax error.$/;"	e	enum:ParseErrorCode
kParseErrorValueInvalid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kParseErrorValueInvalid,                    \/\/!< Invalid value.$/;"	e	enum:ParseErrorCode
kParseEscapedApostropheFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseEscapedApostropheFlag = 512,  \/\/!< Allow escaped apostrophe in strings.$/;"	e	enum:ParseFlag
kParseFullPrecisionFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseFullPrecisionFlag = 16,   \/\/!< Parse number in full precision (but slower).$/;"	e	enum:ParseFlag
kParseInsituFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseInsituFlag = 1,           \/\/!< In-situ(destructive) parsing.$/;"	e	enum:ParseFlag
kParseIterativeFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseIterativeFlag = 4,        \/\/!< Iterative(constant complexity in terms of function call stack size) parsing.$/;"	e	enum:ParseFlag
kParseNanAndInfFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseNanAndInfFlag = 256,      \/\/!< Allow parsing NaN, Inf, Infinity, -Inf and -Infinity as doubles.$/;"	e	enum:ParseFlag
kParseNoFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseNoFlags = 0,              \/\/!< No flags are set.$/;"	e	enum:ParseFlag
kParseNumbersAsStringsFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseNumbersAsStringsFlag = 64,    \/\/!< Parse all numbers (ints\/doubles) as strings.$/;"	e	enum:ParseFlag
kParseStopWhenDoneFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseStopWhenDoneFlag = 8,     \/\/!< After parsing a complete JSON root from stream, stop further processing the rest of stream. When this flag is used, parser will not generate kParseErrorDocumentRootNotSingular error.$/;"	e	enum:ParseFlag
kParseTrailingCommasFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseTrailingCommasFlag = 128, \/\/!< Allow trailing commas at the end of objects and arrays.$/;"	e	enum:ParseFlag
kParseValidateEncodingFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    kParseValidateEncodingFlag = 2, \/\/!< Validate encoding of JSON strings.$/;"	e	enum:ParseFlag
kPatternValidatorOnly	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kPatternValidatorOnly,$/;"	e	enum:internal::SchemaValidationContext::PatternValidatorType
kPatternValidatorWithAdditionalProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kPatternValidatorWithAdditionalProperty$/;"	e	enum:internal::SchemaValidationContext::PatternValidatorType
kPatternValidatorWithProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kPatternValidatorWithProperty,$/;"	e	enum:internal::SchemaValidationContext::PatternValidatorType
kPointerInvalidIndex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^static const SizeType kPointerInvalidIndex = ~SizeType(0);  \/\/!< Represents an invalid index in GenericPointer::Token$/;"	v
kPointerParseErrorCharacterMustPercentEncode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    kPointerParseErrorCharacterMustPercentEncode    \/\/!< A character must percent encoded in URI fragment$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorInvalidEscape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    kPointerParseErrorInvalidEscape,                \/\/!< Invalid escape$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorInvalidPercentEncoding	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    kPointerParseErrorInvalidPercentEncoding,       \/\/!< Invalid percent encoding in URI fragment$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorNone	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    kPointerParseErrorNone = 0,                     \/\/!< The parse is successful$/;"	e	enum:PointerParseErrorCode
kPointerParseErrorTokenMustBeginWithSolidus	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    kPointerParseErrorTokenMustBeginWithSolidus,    \/\/!< A token must begin with a '\/'$/;"	e	enum:PointerParseErrorCode
kPrettyJson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^static const char kPrettyJson[] =$/;"	v	file:
kPrettyJson_FormatOptions_SLA	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^static const char kPrettyJson_FormatOptions_SLA[] =$/;"	v	file:
kRangeCharacterClass	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    static const unsigned kRangeCharacterClass = 0xFFFFFFFE;$/;"	m	class:internal::GenericRegex
kRangeNegationFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    static const unsigned kRangeNegationFlag = 0x80000000;$/;"	m	class:internal::GenericRegex
kRefCounted	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const bool kRefCounted = internal::IsRefCounted<BaseAllocator>::Value;$/;"	m	class:StdAllocator
kRefCounted	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    static const bool kRefCounted = true;   \/\/!< Tell users that this allocator is reference counted on copy$/;"	m	class:MemoryPoolAllocator
kRegexInvalidRange	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^static const SizeType kRegexInvalidRange = ~SizeType(0);$/;"	m	namespace:internal
kRegexInvalidState	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^static const SizeType kRegexInvalidState = ~SizeType(0);  \/\/!< Represents an invalid index in GenericRegex::State::out, out1$/;"	m	namespace:internal
kShortStringFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kShortStringFlag = static_cast<int>(kStringType) | static_cast<int>(kStringFlag | kCopyFlag | kInlineStrFlag),$/;"	e	enum:GenericValue::__anon38
kSignMask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const uint64_t kSignMask = RAPIDJSON_UINT64_C2(0x80000000, 0x00000000);$/;"	m	class:internal::Double
kSignificandMask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const uint64_t kSignificandMask = RAPIDJSON_UINT64_C2(0x000FFFFF, 0xFFFFFFFF);$/;"	m	class:internal::Double
kSignificandSize	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^    static const int kSignificandSize = 52;$/;"	m	class:internal::Double
kString	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  enum Type { kNone, kInt, kString };$/;"	e	enum:ccls::RequestId::Type
kStringFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kStringFlag     = 0x0400,$/;"	e	enum:GenericValue::__anon38
kStringSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kStringSchemaType,$/;"	e	enum:internal::Schema::SchemaValueType
kStringType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kStringType = 5,    \/\/!< string$/;"	e	enum:Type
kTokenCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        kTokenCount$/;"	e	enum:GenericReader::Token
kTokens	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^static const Pointer::Token kTokens[] = { NAME("foo"), INDEX(0) }; \/\/ equivalent to "\/foo\/0"$/;"	v	file:
kTotalSchemaType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        kTotalSchemaType$/;"	e	enum:internal::Schema::SchemaValueType
kTrialCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    static const size_t kTrialCount = 1000;$/;"	m	class:PerfTest
kTrueFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kTrueFlag = static_cast<int>(kTrueType) | static_cast<int>(kBoolFlag),$/;"	e	enum:GenericValue::__anon38
kTrueType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^    kTrueType = 2,      \/\/!< true$/;"	e	enum:Type
kTwo64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^static const BigInteger kTwo64 = BIGINTEGER_LITERAL("18446744073709551616");$/;"	v	file:
kTypeBit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    static const size_t kTypeBit = sizeof(Type) * 8;$/;"	m	class:internal::BigInteger
kTypeMask	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kTypeMask = 0x07$/;"	e	enum:GenericValue::__anon38
kUTF16BE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    kUTF16BE = 2,   \/\/!< UTF-16 big endian.$/;"	e	enum:UTFType
kUTF16LE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    kUTF16LE = 1,   \/\/!< UTF-16 little endian.$/;"	e	enum:UTFType
kUTF32BE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    kUTF32BE = 4    \/\/!< UTF-32 big endian.$/;"	e	enum:UTFType
kUTF32LE	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    kUTF32LE = 3,   \/\/!< UTF-32 little endian.$/;"	e	enum:UTFType
kUTF8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    kUTF8 = 0,      \/\/!< UTF-8.$/;"	e	enum:UTFType
kUint64Flag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kUint64Flag     = 0x0100,$/;"	e	enum:GenericValue::__anon38
kUint64Max	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/bigintegertest.cpp	/^static const BigInteger kUint64Max = BIGINTEGER_LITERAL("18446744073709551615");$/;"	v	file:
kUintFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        kUintFlag       = 0x0040,$/;"	e	enum:GenericValue::__anon38
kValidateContinueOnErrorFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    kValidateContinueOnErrorFlag = 1,                           \/\/!< Don't stop after first validation error.$/;"	e	enum:ValidateFlag
kValidateDefaultFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    kValidateDefaultFlags = RAPIDJSON_VALIDATE_DEFAULT_FLAGS    \/\/!< Default validate flags. Can be customized by defining RAPIDJSON_VALIDATE_DEFAULT_FLAGS$/;"	e	enum:ValidateFlag
kValidateErrorAdditionalItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorAdditionalItems,             \/\/!< Array has additional items that are not allowed by the schema.$/;"	e	enum:ValidateErrorCode
kValidateErrorAdditionalProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorAdditionalProperties,        \/\/!< Object has additional members that are not allowed by the schema.$/;"	e	enum:ValidateErrorCode
kValidateErrorAllOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorAllOf,                       \/\/!< Property did not match all of the sub-schemas specified by 'allOf'.$/;"	e	enum:ValidateErrorCode
kValidateErrorAnyOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorAnyOf,                       \/\/!< Property did not match any of the sub-schemas specified by 'anyOf'.$/;"	e	enum:ValidateErrorCode
kValidateErrorDependencies	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorDependencies,                \/\/!< Object has missing property or schema dependencies.$/;"	e	enum:ValidateErrorCode
kValidateErrorEnum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorEnum,                        \/\/!< Property has a value that is not one of its allowed enumerated values$/;"	e	enum:ValidateErrorCode
kValidateErrorExclusiveMaximum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorExclusiveMaximum,            \/\/!< Number is greater than or equal to the 'maximum' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorExclusiveMinimum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorExclusiveMinimum,            \/\/!< Number is less than or equal to the 'minimum' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMaxItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMaxItems,                    \/\/!< Array is longer than the 'maxItems' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMaxLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMaxLength,                   \/\/!< String is longer than the 'maxLength' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMaxProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMaxProperties,               \/\/!< Object has more members than 'maxProperties' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMaximum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMaximum,                     \/\/!< Number is greater than the 'maximum' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMinItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMinItems,                    \/\/!< Array is shorter than the 'minItems' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMinLength	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMinLength,                   \/\/!< String is longer than the 'maxLength' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMinProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMinProperties,               \/\/!< Object has less members than 'minProperties' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMinimum	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMinimum,                     \/\/!< Number is less than the 'minimum' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorMultipleOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorMultipleOf,                  \/\/!< Number is not a multiple of the 'multipleOf' value.$/;"	e	enum:ValidateErrorCode
kValidateErrorNone	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorNone = 0,                    \/\/!< No error.$/;"	e	enum:ValidateErrorCode
kValidateErrorNot	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorNot                          \/\/!< Property matched the sub-schema specified by 'not'.$/;"	e	enum:ValidateErrorCode
kValidateErrorOneOf	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorOneOf,                       \/\/!< Property did not match any of the sub-schemas specified by 'oneOf'.$/;"	e	enum:ValidateErrorCode
kValidateErrorOneOfMatch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorOneOfMatch,                  \/\/!< Property matched more than one of the sub-schemas specified by 'oneOf'.$/;"	e	enum:ValidateErrorCode
kValidateErrorPattern	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorPattern,                     \/\/!< String does not match the 'pattern' regular expression.$/;"	e	enum:ValidateErrorCode
kValidateErrorPatternProperties	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorPatternProperties,           \/\/!< See other errors.$/;"	e	enum:ValidateErrorCode
kValidateErrorRequired	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorRequired,                    \/\/!< Object is missing one or more members required by the schema.$/;"	e	enum:ValidateErrorCode
kValidateErrorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorType,                        \/\/!< Property has a type that is not allowed by the schema..$/;"	e	enum:ValidateErrorCode
kValidateErrorUniqueItems	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrorUniqueItems,                 \/\/!< Array has duplicate items but 'uniqueItems' is true.$/;"	e	enum:ValidateErrorCode
kValidateErrors	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    kValidateErrors    = -1,                   \/\/!< Top level error code when kValidateContinueOnErrorsFlag set.$/;"	e	enum:ValidateErrorCode
kValidateNoFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    kValidateNoFlags = 0,                                       \/\/!< No flags are set.$/;"	e	enum:ValidateFlag
kWriteDefaultFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    kWriteDefaultFlags = RAPIDJSON_WRITE_DEFAULT_FLAGS  \/\/!< Default write flags. Can be customized by defining RAPIDJSON_WRITE_DEFAULT_FLAGS$/;"	e	enum:WriteFlag
kWriteNanAndInfFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    kWriteNanAndInfFlag = 2,        \/\/!< Allow writing of Infinity, -Infinity and NaN.$/;"	e	enum:WriteFlag
kWriteNoFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    kWriteNoFlags = 0,              \/\/!< No flags are set.$/;"	e	enum:WriteFlag
kWriteValidateEncodingFlag	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    kWriteValidateEncodingFlag = 1, \/\/!< Validate encoding of JSON strings.$/;"	e	enum:WriteFlag
kZeroOrMore	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        kZeroOrMore,$/;"	e	enum:internal::GenericRegex::Operator
kZeroOrOne	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        kZeroOrOne,$/;"	e	enum:internal::GenericRegex::Operator
key	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::key(const char *name) { m->Key(name); }$/;"	f	class:ccls::JsonWriter
keyLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    const SizeType keyLength_;$/;"	m	class:FilterKeyHandler	file:
keyLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    const SizeType keyLength_;$/;"	m	class:FilterKeyHandler	file:
keyLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    const SizeType keyLength_;$/;"	m	class:FilterKeyReader	file:
keyString_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    const char* keyString_;$/;"	m	class:FilterKeyHandler	file:
keyString_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    const char* keyString_;$/;"	m	class:FilterKeyHandler	file:
keyString_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    const char* keyString_;$/;"	m	class:FilterKeyReader	file:
keyword	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::string keyword;$/;"	m	struct:ccls::__anon20::ParseIncludeLineResult	file:
kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Kind kind;$/;"	m	struct:ccls::SymbolIdx
kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Kind kind;$/;"	m	struct:ccls::SymbolRef
kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  SymbolKind kind = SymbolKind::Unknown;$/;"	m	struct:ccls::FuncDef
kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  SymbolKind kind = SymbolKind::Unknown;$/;"	m	struct:ccls::TypeDef
kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  SymbolKind kind = SymbolKind::Unknown;$/;"	m	struct:ccls::VarDef
kind	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  SymbolKind kind;$/;"	m	struct:ccls::SymbolInformation
kind	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  const char *kind;$/;"	m	struct:ccls::WorkDoneProgress
kind	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  SymbolKind kind;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlightSymbol	file:
kind	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  CompletionItemKind kind = CompletionItemKind::Text;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
kind	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  Kind kind = Kind::Invalid;$/;"	m	struct:ccls::__anon11::Param	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  Kind kind;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  Kind kind = Kind::Var;$/;"	m	struct:ccls::__anon12::Param	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_vars.cc	/^  unsigned kind = ~0u;$/;"	m	struct:ccls::__anon15::Param	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  Kind kind;$/;"	m	struct:ccls::__anon19::Cmd_xref	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  const char *kind = "quickfix";$/;"	m	struct:ccls::__anon18::CodeAction	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  SymbolKind kind;$/;"	m	struct:ccls::__anon23::DocumentSymbol	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  int kind = 1;$/;"	m	struct:ccls::__anon21::DocumentHighlight	file:
kind	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^  std::string kind = "region";$/;"	m	struct:ccls::__anon24::FoldingRange	file:
label	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string label;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
label	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  std::string label;$/;"	m	struct:ccls::__anon29::SignatureInformation	file:
label	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  std::vector<int> label;$/;"	m	struct:ccls::__anon29::ParameterInformation	file:
langOpts	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  const LangOptions *langOpts;$/;"	m	class:clang::ccls::__anon36::StoreDiags	file:
language	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  LanguageId language = LanguageId::C;$/;"	m	struct:ccls::IndexFile
language	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^  std::optional<std::string> language;$/;"	m	struct:ccls::__anon26::MarkedString	file:
language	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^    LanguageId language;$/;"	m	struct:ccls::QueryFile::Def
languageId	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string languageId;$/;"	m	struct:ccls::TextDocumentItem
languageIdentifier	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^const char *languageIdentifier(LanguageId lang) {$/;"	f	namespace:ccls::__anon26
largeFileSize	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int64_t largeFileSize = 2 * 1024 * 1024;$/;"	m	struct:ccls::Config::Highlight
last	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::optional<Diag> last;$/;"	m	class:clang::ccls::__anon36::StoreDiags	file:
lastIdle	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int64_t lastIdle, completed, enqueued;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::Pipeline	file:
lastWriteTime	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::optional<int64_t> lastWriteTime(const std::string &path) {$/;"	f	namespace:ccls
last_idle	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  std::atomic<int64_t> last_idle, completed, enqueued;$/;"	m	struct:ccls::IndexStats
launchStdin	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void launchStdin() {$/;"	f	namespace:ccls::pipeline
launchStdout	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void launchStdout() {$/;"	f	namespace:ccls::pipeline
left: 40px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	left: 40px;$/;"	s
left: auto	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	left: auto;$/;"	s
length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        SizeType length;$/;"	m	struct:GenericValue::String
length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    const SizeType length; \/\/!< length of the string (excluding the trailing NULL terminator)$/;"	m	struct:GenericStringRef
length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        SizeType length;            \/\/!< Length of the name.$/;"	m	struct:GenericPointer::Token
length_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        SizeType length_;$/;"	m	class:GenericReader::StackStream
length_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    size_t length_;$/;"	m	class:PerfTest
length_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^    size_t length_;$/;"	m	class:EncodedStreamTest	file:
length_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^    size_t length_;$/;"	m	class:FileStreamTest	file:
length_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    size_t length_;$/;"	m	struct:ParseStringHandler	file:
level	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  clang::DiagnosticsEngine::Level level = clang::DiagnosticsEngine::Note;$/;"	m	struct:ccls::DiagBase
level_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    unsigned level_;$/;"	m	class:JsonxWriter	file:
level_stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    internal::Stack<StackAllocator> level_stack_;$/;"	m	class:Writer
levels	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  int levels = 1;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
levels	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  int levels = 1;$/;"	m	struct:ccls::__anon11::Param	file:
levels	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  int levels = 1;$/;"	m	struct:ccls::__anon12::Param	file:
lexIdentifierAroundPos	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^std::string_view lexIdentifierAroundPos(Position position,$/;"	f	namespace:ccls
lid2path	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<std::pair<int, std::string>> lid2path;$/;"	m	struct:ccls::IndexFile
lid2path	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  decltype(IndexFile::lid2path) lid2path;$/;"	m	struct:ccls::IndexUpdate
line	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int line = 0;$/;"	m	struct:ccls::IndexInclude
line	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  int line = 0;$/;"	m	struct:ccls::Position
line	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  uint16_t line = 0;$/;"	m	struct:ccls::Pos
line	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::string line;$/;"	m	struct:ccls::CompleteConsumerCache
line-height: 22.4px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	line-height: 22.4px;$/;"	s
line-height: 25.5px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	line-height: 25.5px;	$/;"	s
line-height: 63.75px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	line-height: 63.75px;$/;"	s
line_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/cursorstreamwrapper.h	/^    size_t line_;   \/\/!< Current Line$/;"	m	class:CursorStreamWrapper
linkSupport	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool linkSupport = true;$/;"	m	struct:ccls::Config::ClientCapability
linkSupport	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool linkSupport = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::LinkSupport	file:
llvm	/home/yl/vim/vim/ccls/ccls/src/clang_tu.hh	/^namespace llvm {$/;"	n
llvm	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^namespace llvm {$/;"	n
llvm	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^namespace llvm {$/;"	n
llvm	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^namespace llvm {$/;"	n
load	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^void Project::load(const std::string &root) {$/;"	f	class:ccls::Project
loadDirectory	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^void Project::loadDirectory(const std::string &root, Project::Folder &folder) {$/;"	f	class:ccls::Project
loadDirectoryListing	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^void loadDirectoryListing(ProjectProcessor &proc, const std::string &root,$/;"	f	namespace:ccls::__anon33
loadIndexedContent	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::optional<std::string> loadIndexedContent(const std::string &path) {$/;"	f	namespace:ccls::pipeline
loaded	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^int VFS::loaded(const std::string &path) {$/;"	f	class:ccls::VFS
loaded	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^    int loaded;$/;"	m	struct:ccls::VFS::State
localVariables	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool localVariables = true;$/;"	m	struct:ccls::Config::CodeLens
location	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Location location;$/;"	m	struct:ccls::MessageType::DiagnosticRelatedInformation
location	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Location location;$/;"	m	struct:ccls::SymbolInformation
location	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  Location location;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
location	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  Location location;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
location	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  Location location;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
locationInRange	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^bool locationInRange(SourceLocation l, CharSourceRange r,$/;"	f	namespace:clang::ccls::__anon36
lock	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  void lock() { lock_impl(typename std::index_sequence_for<Queue...>{}); }$/;"	f	struct:ccls::MultiQueueLock
lock	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^template <typename Lockable> void lock(Lockable &l) { l.lock(); }$/;"	f	namespace:std
lock_impl	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  template <size_t... Is> void lock_impl(std::index_sequence<Is...>) {$/;"	f	struct:ccls::MultiQueueLock
log	/home/yl/vim/vim/ccls/ccls/src/log.cc	/^namespace ccls::log {$/;"	n	class:ccls	file:
log	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^namespace ccls::log {$/;"	n	class:ccls
lookupExtension	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^std::pair<LanguageId, bool> lookupExtension(std::string_view filename) {$/;"	f	namespace:ccls
low_pat	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  char low_pat[kMaxPat], low_text[kMaxText];$/;"	m	class:ccls::FuzzyMatcher
low_text	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  char low_pat[kMaxPat], low_text[kMaxText];$/;"	m	class:ccls::FuzzyMatcher
lowerPathIfInsensitive	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::string lowerPathIfInsensitive(const std::string &path) {$/;"	f	namespace:ccls
lsRange	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^struct lsRange {$/;"	s	namespace:ccls
lsRanges	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool lsRanges = false;$/;"	m	struct:ccls::Config::Highlight
lsRanges	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  std::vector<lsRange> lsRanges;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlightSymbol	file:
ls_items	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::vector<CompletionItem> ls_items;$/;"	m	class:ccls::__anon20::CompletionConsumer	file:
ls_sighelp	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  SignatureHelp ls_sighelp;$/;"	m	class:ccls::__anon29::SignatureHelpConsumer	file:
m	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  rapidjson::Value *m;$/;"	m	struct:ccls::JsonReader
mDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    void* mDocument;              \/\/\/< DOM result of parsing.$/;"	m	class:JsonReader
mError	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    bool mError;                  \/\/\/< Whether an error has occurred.$/;"	m	class:JsonReader
mSeed	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^    unsigned mSeed;$/;"	m	class:Random
mStack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    void* mStack;                 \/\/\/< Stack for iterating the DOM$/;"	m	class:JsonReader
mStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    void* mStream;      \/\/\/< Stream buffer.$/;"	m	class:JsonWriter
mWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    void* mWriter;      \/\/\/< JSON writer.$/;"	m	class:JsonWriter
maKE_NoRefs	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/make_functions.cc	/^T* maKE_NoRefs(Args... args) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	/home/yl/vim/vim/ccls/ccls/src/main.cc	/^int main(int argc, char **argv) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^def main(arguments):$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/condense/condense.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/pretty/pretty.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/prettyauto/prettyauto.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/schemavalidator/schemavalidator.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simpledom/simpledom.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplereader/simplereader.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplewriter/simplewriter.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/sortkeys/sortkeys.cpp	/^int main() {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/traverseaspointer.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/tutorial/tutorial.cpp	/^int main(int, char*[]) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.cpp	/^int main(int argc, char **argv) {$/;"	f
main	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.cpp	/^int main(int argc, char **argv) {$/;"	f
mainLoop	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void mainLoop() {$/;"	f	namespace:ccls::pipeline
main_OnIndexed	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void main_OnIndexed(DB *db, WorkingFiles *wfiles, IndexUpdate *update) {$/;"	f	namespace:ccls::pipeline
main_waiter	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^MultiQueueWaiter *main_waiter;$/;"	m	namespace:ccls::pipeline::__anon32	file:
make	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_various.cc	/^Foo* Foo::make() {$/;"	f	class:Foo
make1	/home/yl/vim/vim/ccls/ccls/index_tests/macros/complex.cc	/^int make1() {$/;"	f
make2	/home/yl/vim/vim/ccls/ccls/index_tests/macros/complex.cc	/^FOO(make1(), make2);$/;"	v
make2	/home/yl/vim/vim/ccls/ccls/index_tests/macros/complex.cc	/^const int make2 = 5;$/;"	v
manager	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  SemaManager *manager = nullptr;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
margin: 0px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	margin: 0px;$/;"	s
margin: 0px 0px 13px 0px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	margin: 0px 0px 13px 0px;$/;"	s
married_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    bool married_;$/;"	m	class:Employee	file:
match	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^int FuzzyMatcher::match(std::string_view text, bool strict) {$/;"	f	class:ccls::FuzzyMatcher
match	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::smatch match;$/;"	m	struct:ccls::__anon20::ParseIncludeLineResult	file:
matchScore	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^int FuzzyMatcher::matchScore(int i, int j, bool last) {$/;"	f	class:ccls::FuzzyMatcher
match_	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  std::unique_ptr<GroupMatch> match_;$/;"	m	struct:ccls::IncludeComplete
matches	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^bool GroupMatch::matches(const std::string &text,$/;"	f	class:ccls::GroupMatch
matches	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^bool Matcher::matches(const std::string &text) const {$/;"	f	class:ccls::Matcher
maxDecimalPlaces_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    int maxDecimalPlaces_;$/;"	m	class:Writer
maxInitializerLines	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int maxInitializerLines = 5;$/;"	m	struct:ccls::Config::Index
maxItems_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType maxItems_;$/;"	m	class:internal::Schema
maxLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType maxLength_;$/;"	m	class:internal::Schema
maxNum	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int maxNum = 1000;$/;"	m	struct:ccls::Config::WorkspaceSymbol
maxNum	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int maxNum = 100;$/;"	m	struct:ccls::Config::Completion
maxNum	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int maxNum = 10;$/;"	m	struct:ccls::Config::Session
maxNum	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int maxNum = 2000;$/;"	m	struct:ccls::Config::Xref
maxPathSize	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      int maxPathSize = 30;$/;"	m	struct:ccls::Config::Completion::Include
maxProperties_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType maxProperties_;$/;"	m	class:internal::Schema
max_visitable_members	/home/yl/vim/vim/ccls/ccls/third_party/macro_map.h	/^static constexpr const int max_visitable_members = 69;$/;"	v
maximum_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SValue maximum_;$/;"	m	class:internal::Schema
member	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_member.cc	/^  Foo* member;$/;"	m	class:Foo	file:
member	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_static_member.cc	/^  static Foo* member;$/;"	m	class:Foo	file:
member	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_static_member.cc	/^Foo* Foo::member = nullptr;$/;"	m	class:Foo	file:
member	/home/yl/vim/vim/ccls/ccls/index_tests/vars/class_static_member_decl_only.cc	/^  static int member;$/;"	m	class:Foo	file:
member	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonReader::member(const char *name, llvm::function_ref<void()> fn) {$/;"	f	class:ccls::JsonReader
members	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        Member* members;$/;"	m	struct:GenericValue::ObjectData
memorybuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    MemoryBuffer* memorybuffer;$/;"	m	struct:Foo	file:
memorypoolallocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    MemoryPoolAllocator<CrtAllocator>* memorypoolallocator;$/;"	m	struct:Foo	file:
memorystream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    MemoryStream* memorystream;$/;"	m	struct:Foo	file:
message	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  llvm::SmallString<64> message;$/;"	m	class:ccls::__anon5::IndexDiags	file:
message	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<std::string> message;$/;"	m	struct:ccls::WorkDoneProgress
message	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string message;$/;"	m	struct:ccls::MessageType::Diagnostic
message	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string message;$/;"	m	struct:ccls::MessageType::DiagnosticRelatedInformation
message	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string message;$/;"	m	struct:ccls::MessageType::ShowMessageParam
message	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string message;$/;"	m	struct:ccls::ResponseError
message	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::unique_ptr<char[]> message;$/;"	m	struct:ccls::InMessage
message	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::string message;$/;"	m	struct:ccls::DiagBase
messages_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    MessageMap messages_;$/;"	m	struct:MessageHandler	file:
method	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string method;$/;"	m	struct:ccls::InMessage
method	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::string method = "workspace\/didChangeWatchedFiles";$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::DidChangeWatchedFilesRegistration	file:
method2notification	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  llvm::StringMap<std::function<void(JsonReader &)>> method2notification;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
method2request	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^      method2request;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
minIndex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType minIndex;$/;"	m	struct:internal::GenericRegex::Frag
minItems_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType minItems_;$/;"	m	class:internal::Schema
minLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType minLength_;$/;"	m	class:internal::Schema
minProperties_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType minProperties_;$/;"	m	class:internal::Schema
minimum_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SValue minimum_;$/;"	m	class:internal::Schema
missScore	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.cc	/^int FuzzyMatcher::missScore(int j, bool last) {$/;"	f	class:ccls::FuzzyMatcher
missingDependents_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ValueType missingDependents_;$/;"	m	class:GenericSchemaValidator
mode	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  IndexMode mode;$/;"	m	struct:ccls::pipeline::__anon32::IndexRequest	file:
moreTriggerCharacter	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      std::vector<const char *> moreTriggerCharacter;$/;"	m	struct:ccls::Config::ServerCap::DocumentOnTypeFormattingOptions
move	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        baseAllocator_(std::move(rhs.baseAllocator_))$/;"	f	class:StdAllocator
move	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^          value(std::move(rhs.value))$/;"	f	class:GenericMember
mtime	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  int64_t mtime;$/;"	m	struct:ccls::__anon5::File	file:
mtime	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int64_t mtime = 0;$/;"	m	struct:ccls::IndexFile
mtx	/home/yl/vim/vim/ccls/ccls/src/log.cc	/^static std::mutex mtx;$/;"	m	namespace:ccls::log	file:
mtx	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^  std::mutex mtx;$/;"	m	struct:ccls::Project
multiVersion	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int multiVersion = 0;$/;"	m	struct:ccls::Config::Index
multiVersionBlacklist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> multiVersionBlacklist;$/;"	m	struct:ccls::Config::Index
multiVersionMatcher	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^GroupMatch *multiVersionMatcher;$/;"	m	namespace:ccls::__anon5	file:
multiVersionWhitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> multiVersionWhitelist;$/;"	m	struct:ccls::Config::Index
multipleOf_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SValue multipleOf_;$/;"	m	class:internal::Schema
must_exist	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  bool must_exist = false;$/;"	m	struct:ccls::pipeline::__anon32::IndexRequest	file:
mutex	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  std::mutex mutex;$/;"	m	struct:ccls::VFS
mutex	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::mutex mutex;$/;"	m	struct:ccls::CompleteConsumerCache
mutex	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::mutex mutex;$/;"	m	struct:ccls::SemaManager
mutex	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::mutex mutex;$/;"	m	struct:ccls::Session
mutex	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  std::mutex mutex;$/;"	m	struct:ccls::WorkingFiles
mutex_	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  mutable std::mutex mutex_;$/;"	m	struct:ccls::ThreadedQueue
mutex_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    std::mutex mutex_;$/;"	m	class:AsyncDocumentParser	file:
myersDiff	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^int myersDiff(const char *a, int la, const char *b, int lb, int threshold) {$/;"	f	namespace:ccls::__anon37
myersDiff	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^int myersDiff(const std::string &a, const std::string &b, int threshold) {$/;"	f	namespace:ccls::__anon37
myjson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/pointertest.cpp	/^namespace myjson {$/;"	n	file:
n	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        Number n;$/;"	m	union:GenericValue::Data
n_errs	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int n_errs = 0;$/;"	m	struct:ccls::IndexResult
name	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    } name;$/;"	m	struct:ccls::Config::Index	typeref:struct:ccls::Config::Index::Name
name	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::string_view name(bool qualified) const {$/;"	f	struct:ccls::NameMixin
name	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string name;$/;"	m	struct:ccls::WorkspaceFolder
name	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string_view name;$/;"	m	struct:ccls::SymbolInformation
name	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  std::string_view name;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
name	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  std::string_view name;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
name	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  std::string_view name;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
name	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    const char *name = "ccls";$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult::ServerInfo	file:
name	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  std::string name;$/;"	m	struct:ccls::__anon23::DocumentSymbol	file:
name	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::string name;$/;"	m	struct:ccls::Project::Folder
name	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    std::string name;$/;"	m	struct:Student	file:
name	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue<Encoding, Allocator> name;     \/\/!< name of member (must be a string)$/;"	m	class:GenericMember
name	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        const Ch* name;             \/\/!< Name of the token. It has null character at the end but it can contain null character.$/;"	m	struct:GenericPointer::Token
name	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SValue name;$/;"	m	struct:internal::Schema::Property
name2file_id	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::StringMap<int> name2file_id;$/;"	m	struct:ccls::DB
nameBuffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Ch* nameBuffer_;                        \/\/!< A buffer containing all names in tokens.$/;"	m	class:GenericPointer
name_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    StringBuffer name_;$/;"	m	class:JsonxWriter	file:
name_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    std::string name_;$/;"	m	struct:MessageHandler	file:
name_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    std::string name_;$/;"	m	class:Person	file:
newName	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string newName;$/;"	m	struct:ccls::RenameParam
newText	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string newText;$/;"	m	struct:ccls::TextEdit
next	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        ChunkHeader *next;  \/\/!< Next chunk in the linked list.$/;"	m	struct:MemoryPoolAllocator::ChunkHeader
next	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType next;$/;"	m	struct:internal::GenericRegex::Range
next_diag	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::unordered_map<std::string, int64_t> next_diag;$/;"	m	struct:ccls::SemaManager
no_active_threads	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::condition_variable no_active_threads;$/;"	m	namespace:ccls::pipeline::__anon32	file:
no_linkage	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  bool no_linkage;$/;"	m	struct:ccls::__anon5::IndexParam	file:
no_linkage	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool no_linkage;$/;"	m	struct:ccls::IndexFile
no_return_type	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_complex.cc	/^void no_return_type(int) {}$/;"	f
normalizeFolder	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^bool normalizeFolder(std::string &path) {$/;"	f	namespace:ccls
normalizePath	/home/yl/vim/vim/ccls/ccls/src/platform_posix.cc	/^std::string normalizePath(llvm::StringRef path) {$/;"	f	namespace:ccls
normalizePath	/home/yl/vim/vim/ccls/ccls/src/platform_win.cc	/^std::string normalizePath(llvm::StringRef path) {$/;"	f	namespace:ccls
notEmpty_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    std::condition_variable notEmpty_;$/;"	m	class:AsyncDocumentParser	file:
notOpened	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void ReplyOnce::notOpened(std::string_view path) {$/;"	f	class:ccls::ReplyOnce
notValidatorIndex_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType notValidatorIndex_;$/;"	m	class:internal::Schema
not_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* not_;$/;"	m	class:internal::Schema
notes	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::vector<Note> notes;$/;"	m	struct:ccls::Diag
notify	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^template <typename T> void notify(const char *method, T &result) {$/;"	f	namespace:ccls::pipeline
notifyOrRequest	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void notifyOrRequest(const char *method, bool request,$/;"	f	namespace:ccls::pipeline
ns	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_reference.cc	/^namespace ns {$/;"	n	file:
ns	/home/yl/vim/vim/ccls/ccls/index_tests/outline/static_function_in_type.cc	/^namespace ns {$/;"	n	file:
ns	/home/yl/vim/vim/ccls/ccls/index_tests/outline/static_function_in_type.h	/^namespace ns {$/;"	n
ns	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^namespace ns {$/;"	n	file:
ns	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_class_template_func_usage_folded_into_one.cc	/^namespace ns {$/;"	n	file:
ns	/home/yl/vim/vim/ccls/ccls/index_tests/templates/namespace_template_type_usage_folded_into_one.cc	/^namespace ns {$/;"	n	file:
null_	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::null_() { m->Null(); }$/;"	f	class:ccls::JsonWriter
numChildren	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  int numChildren;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
numChildren	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  int numChildren;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
numChildren	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  int numChildren = 0;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
o	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        ObjectData o;$/;"	m	union:GenericValue::Data
objectPatternValidatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PatternValidatorType objectPatternValidatorType;$/;"	m	struct:internal::SchemaValidationContext
offsetEncoding	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  const char *offsetEncoding = "utf-32";$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult	file:
offset_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    size_t offset_;$/;"	m	struct:ParseResult
ok	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  bool ok;$/;"	m	struct:ccls::__anon20::ParseIncludeLineResult	file:
onBufferContentUpdated	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^void WorkingFile::onBufferContentUpdated() {$/;"	f	class:ccls::WorkingFile
onChange	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool onChange = false;$/;"	m	struct:ccls::Config::Index
onChange	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int onChange = 1000;$/;"	m	struct:ccls::Config::Diagnostics
onChange	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^void WorkingFiles::onChange(const TextDocumentDidChangeParam &change) {$/;"	f	class:ccls::WorkingFiles
onClose	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void SemaManager::onClose(const std::string &path) {$/;"	f	class:clang::ccls::SemaManager
onClose	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^void WorkingFiles::onClose(const std::string &path) {$/;"	f	class:ccls::WorkingFiles
onOpen	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int onOpen = 0;$/;"	m	struct:ccls::Config::Diagnostics
onOpen	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^WorkingFile *WorkingFiles::onOpen(const TextDocumentItem &open) {$/;"	f	class:ccls::WorkingFiles
onSave	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int onSave = 0;$/;"	m	struct:ccls::Config::Diagnostics
onSave	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void SemaManager::onSave(const std::string &path) {$/;"	f	class:clang::ccls::SemaManager
onView	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void SemaManager::onView(const std::string &path) {$/;"	f	class:clang::ccls::SemaManager
on_complete	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    OnComplete on_complete;$/;"	m	struct:ccls::SemaManager::CompTask
on_diagnostic_	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  OnDiagnostic on_diagnostic_;$/;"	m	struct:ccls::SemaManager
on_dropped_	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  OnDropped on_dropped_;$/;"	m	struct:ccls::SemaManager
on_indexed	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^ThreadedQueue<IndexUpdate> *on_indexed;$/;"	m	namespace:ccls::pipeline::__anon32	file:
on_request	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^ThreadedQueue<InMessage> *on_request;$/;"	m	namespace:ccls::pipeline::__anon32	file:
oneOf_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaArray oneOf_;$/;"	m	class:internal::Schema
openClose	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool openClose = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::TextDocumentSyncOptions	file:
operator !=	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  bool operator!=(const Maybe &o) const { return !(*this == o); }$/;"	f	class:ccls::Maybe
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool operator!=(const Ch* rhs) const { return !(*this == rhs); }$/;"	f	class:GenericValue
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool operator!=(const GenericValue<Encoding, SourceAllocator>& rhs) const { return !(*this == rhs); }$/;"	f	class:GenericValue
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> bool operator!=(const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ != that.ptr_; }$/;"	f	class:GenericMemberIterator
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator!=(const T& rhs) const { return !(*this == rhs); }$/;"	f	class:GenericValue
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> friend RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator!=(const T& lhs, const GenericValue& rhs) { return !(rhs == lhs); }$/;"	f	class:GenericValue
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    bool operator!=(ParseErrorCode code) const { return !(*this == code); }$/;"	f	struct:ParseResult
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    bool operator!=(const ParseResult& that) const { return !(*this == that); }$/;"	f	struct:ParseResult
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    friend bool operator!=(ParseErrorCode code, const ParseResult & err) { return err != code; }$/;"	f	struct:ParseResult
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool operator!=(const GenericPointer& rhs) const { return !(*this == rhs); }$/;"	f	class:GenericPointer
operator !=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    bool operator!=(const GenericUri& rhs) const {$/;"	f	class:GenericUri
operator &	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^inline uint16_t operator&(Role lhs, Role rhs) {$/;"	f	namespace:ccls
operator &	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  void operator&(const std::ostream &) {}$/;"	f	struct:ccls::log::Voidify
operator &	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^bool operator&(CallType lhs, CallType rhs) {$/;"	f	class:ccls::__anon9::CallType	file:
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::operator&(bool& b) {$/;"	f	class:JsonReader
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::operator&(double& d) {$/;"	f	class:JsonReader
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::operator&(int& i) {$/;"	f	class:JsonReader
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::operator&(std::string& s) {$/;"	f	class:JsonReader
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader& JsonReader::operator&(unsigned& u) {$/;"	f	class:JsonReader
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::operator&(bool& b) {$/;"	f	class:JsonWriter
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::operator&(double& d) {$/;"	f	class:JsonWriter
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::operator&(int& i) {$/;"	f	class:JsonWriter
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::operator&(std::string& s) {$/;"	f	class:JsonWriter
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter& JsonWriter::operator&(unsigned& u) {$/;"	f	class:JsonWriter
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Box& b) {$/;"	f
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Canvas& c) {$/;"	f
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Circle& c) {$/;"	f
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Group& g) {$/;"	f
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Shape& s) {$/;"	f
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Shape*& shape) {$/;"	f
operator &	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^Archiver& operator&(Archiver& ar, Student& s) {$/;"	f
operator ()	/home/yl/vim/vim/ccls/ccls/index_tests/operators/operator.cc	/^  void operator()(int) { }$/;"	f	class:Foo	file:
operator ()	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::size_t operator()(clang::FileID fid) const { return fid.getHashValue(); }$/;"	f	struct:std::hash
operator ()	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  template <typename Res> void operator()(Res &&result) const {$/;"	f	struct:ccls::InsertTextFormat::ReplyOnce
operator ()	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  std::size_t operator()(ccls::Range x) const {$/;"	f	struct:std::hash
operator ()	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    bool operator()(Handler& handler) {$/;"	f	class:FilterKeyReader
operator ()	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/sortkeys/sortkeys.cpp	/^    bool operator()(const Value::Member &lhs, const Value::Member &rhs) const {$/;"	f	struct:NameComparator
operator ()	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^            bool operator()(const Data& s1, const Data& s2) const {$/;"	f	struct:GenericValue::MapTraits::Less
operator ()	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool operator()(Handler& handler) {$/;"	f	class:SchemaValidatingReader
operator ()	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.h	/^    unsigned operator()() {$/;"	f	class:Random
operator ()	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/valuetest.cpp	/^    bool operator()(const Value& lhs, const Value& rhs) const {$/;"	f	struct:ValueIntComparer
operator *	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  T &operator*() { return storage; }$/;"	f	class:ccls::Maybe
operator *	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  const T &operator*() const { return storage; }$/;"	f	class:ccls::Maybe
operator *	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Reference operator*() const { return *ptr_; }$/;"	f	class:GenericMemberIterator
operator *	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    DiyFp operator*(const DiyFp& rhs) const {$/;"	f	struct:internal::DiyFp
operator *=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& operator*=(uint32_t u) {$/;"	f	class:internal::BigInteger
operator *=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& operator*=(uint64_t u) {$/;"	f	class:internal::BigInteger
operator +	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator operator+(DifferenceType n) const { return Iterator(ptr_+n); }$/;"	f	class:GenericMemberIterator
operator ++	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator  operator++(int){ Iterator old(*this); ++ptr_; return old; }$/;"	f	class:GenericMemberIterator
operator ++	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator& operator++(){ ++ptr_; return *this; }$/;"	f	class:GenericMemberIterator
operator +=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator& operator+=(DifferenceType n) { ptr_+=n; return *this; }$/;"	f	class:GenericMemberIterator
operator +=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& operator+=(uint64_t u) {$/;"	f	class:internal::BigInteger
operator -	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    DifferenceType operator-(ConstIterator that) const { return ptr_-that.ptr_; }$/;"	f	class:GenericMemberIterator
operator -	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator operator-(DifferenceType n) const { return Iterator(ptr_-n); }$/;"	f	class:GenericMemberIterator
operator -	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/diyfp.h	/^    DiyFp operator-(const DiyFp& rhs) const {$/;"	f	struct:internal::DiyFp
operator --	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator  operator--(int){ Iterator old(*this); --ptr_; return old; }$/;"	f	class:GenericMemberIterator
operator --	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator& operator--(){ --ptr_; return *this; }$/;"	f	class:GenericMemberIterator
operator -=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator& operator-=(DifferenceType n) { ptr_-=n; return *this; }$/;"	f	class:GenericMemberIterator
operator ->	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  T *operator->() { return &storage; }$/;"	f	class:ccls::Maybe
operator ->	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  const T *operator->() const { return &storage; }$/;"	f	class:ccls::Maybe
operator ->	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Pointer   operator->() const { return ptr_; }$/;"	f	class:GenericMemberIterator
operator <	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator<(const Ref &o) const { return toTuple() < o.toTuple(); }$/;"	f	struct:ccls::Ref
operator <	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator<(const SymbolIdx &o) const {$/;"	f	struct:ccls::SymbolIdx
operator <	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator<(const DocumentUri &o) const { return raw_uri < o.raw_uri; }$/;"	f	struct:ccls::DocumentUri
operator <	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator<(const Location &o) const {$/;"	f	struct:ccls::Location
operator <	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator<(const LocationLink &o) const {$/;"	f	struct:ccls::LocationLink
operator <	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator<(const Position &o) const {$/;"	f	struct:ccls::Position
operator <	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator<(const lsRange &o) const {$/;"	f	struct:ccls::lsRange
operator <	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  bool operator<(const ScanLineEvent &o) const {$/;"	f	struct:ccls::__anon7::ScanLineEvent
operator <	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  bool operator<(const Out_cclsCall &o) const { return location < o.location; }$/;"	f	struct:ccls::__anon9::CallType::Out_cclsCall
operator <	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  bool operator<(const DocumentHighlight &o) const {$/;"	f	struct:ccls::__anon21::DocumentHighlight
operator <	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool operator<(const Pos &o) const {$/;"	f	struct:ccls::Pos
operator <	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool operator<(const Range &o) const {$/;"	f	struct:ccls::Range
operator <	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> bool operator< (const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ < that.ptr_; }$/;"	f	class:GenericMemberIterator
operator <	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool operator<(const GenericPointer& rhs) const {$/;"	f	class:GenericPointer
operator <<	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^std::ostream& operator<<(std::ostream& os, const Group& g) {$/;"	f
operator <<	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^std::ostream& operator<<(std::ostream& os, const Student& s) {$/;"	f
operator <<=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& operator<<=(size_t shift) {$/;"	f	class:internal::BigInteger
operator <=	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator<=(const Position &o) const {$/;"	f	struct:ccls::Position
operator <=	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool operator<=(const Pos &o) const { return !(o < *this); }$/;"	f	struct:ccls::Pos
operator <=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> bool operator<=(const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ <= that.ptr_; }$/;"	f	class:GenericMemberIterator
operator <=>	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> std::strong_ordering operator<=>(const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ <=> that.ptr_; }$/;"	f	class:GenericMemberIterator
operator =	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  Maybe &operator=(const T &x) {$/;"	f	class:ccls::Maybe
operator =	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  void operator=(std::optional<T> &&o) { storage = o ? *o : T(); }$/;"	f	class:ccls::Maybe
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Dependent& operator=(const Dependent& rhs) {$/;"	f	class:Dependent
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Employee& operator=(const Employee& rhs) {$/;"	f	class:Employee
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    Person& operator=(const Person& rhs) {$/;"	f	class:Person
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericArray& operator=(const GenericArray& rhs) { value_ = rhs.value_; return *this; }$/;"	f	class:GenericArray
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericObject& operator=(const GenericObject& rhs) { value_ = rhs.value_; return *this; }$/;"	f	class:GenericObject
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Iterator& operator=(const NonConstIterator & it) { ptr_ = it.ptr_; return *this; }$/;"	f	class:GenericMemberIterator
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    operator=(T value) {$/;"	f	class:GenericValue
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& operator=(const BigInteger &rhs)$/;"	f	class:internal::BigInteger
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    BigInteger& operator=(uint64_t u) {$/;"	f	class:internal::BigInteger
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    Stack& operator=(Stack&& rhs) {$/;"	f	class:internal::Stack
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    GenericPointer& operator=(const GenericPointer& rhs) {$/;"	f	class:GenericPointer
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    GenericStringBuffer& operator=(GenericStringBuffer&& rhs) {$/;"	f	class:GenericStringBuffer
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    GenericUri& operator=(const GenericUri& rhs) {$/;"	f	class:GenericUri
operator =	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^    TestStdAllocatorData& operator=(const TestStdAllocatorData& rhs)$/;"	f	struct:TestStdAllocatorData
operator ==	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator==(const ExtentRef &o) const { return toTuple() == o.toTuple(); }$/;"	f	struct:ccls::ExtentRef
operator ==	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator==(const Ref &o) const { return toTuple() == o.toTuple(); }$/;"	f	struct:ccls::Ref
operator ==	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator==(const SymbolIdx &o) const {$/;"	f	struct:ccls::SymbolIdx
operator ==	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator==(const SymbolRef &o) const { return toTuple() == o.toTuple(); }$/;"	f	struct:ccls::SymbolRef
operator ==	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool operator==(const Use &o) const {$/;"	f	struct:ccls::Use
operator ==	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator==(const DocumentUri &o) const { return raw_uri == o.raw_uri; }$/;"	f	struct:ccls::DocumentUri
operator ==	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator==(const Location &o) const {$/;"	f	struct:ccls::Location
operator ==	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator==(const LocationLink &o) const {$/;"	f	struct:ccls::LocationLink
operator ==	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator==(const Position &o) const {$/;"	f	struct:ccls::Position
operator ==	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool operator==(const lsRange &o) const {$/;"	f	struct:ccls::lsRange
operator ==	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  bool operator==(const Out_cclsCall &o) const {$/;"	f	struct:ccls::__anon9::CallType::Out_cclsCall
operator ==	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool operator==(const Pos &o) const {$/;"	f	struct:ccls::Pos
operator ==	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool operator==(const Range &o) const {$/;"	f	struct:ccls::Range
operator ==	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  bool operator==(const Maybe &o) const { return storage == o.storage; }$/;"	f	class:ccls::Maybe
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool operator==(const Ch* rhs) const { return *this == GenericValue(StringRef(rhs)); }$/;"	f	class:GenericValue
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool operator==(const GenericValue<Encoding, SourceAllocator>& rhs) const {$/;"	f	class:GenericValue
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    bool operator==(const std::basic_string<Ch>& rhs) const { return *this == GenericValue(StringRef(rhs)); }$/;"	f	class:GenericValue
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> bool operator==(const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ == that.ptr_; }$/;"	f	class:GenericMemberIterator
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>,internal::IsGenericValue<T> >), (bool)) operator==(const T& rhs) const { return *this == GenericValue(rhs); }$/;"	f	class:GenericValue
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> friend RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator==(const T& lhs, const GenericValue& rhs) { return rhs == lhs; }$/;"	f	class:GenericValue
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    bool operator==(ParseErrorCode code) const { return code_ == code; }$/;"	f	struct:ParseResult
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    bool operator==(const ParseResult& that) const { return code_ == that.code_; }$/;"	f	struct:ParseResult
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    friend bool operator==(ParseErrorCode code, const ParseResult & err) { return code == err.code_; }$/;"	f	struct:ParseResult
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    bool operator==(const BigInteger& rhs) const {$/;"	f	class:internal::BigInteger
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/biginteger.h	/^    bool operator==(const Type rhs) const {$/;"	f	class:internal::BigInteger
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    bool operator==(const GenericPointer& rhs) const {$/;"	f	class:GenericPointer
operator ==	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    bool operator==(const GenericUri& rhs) const {$/;"	f	class:GenericUri
operator >	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> bool operator> (const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ > that.ptr_; }$/;"	f	class:GenericMemberIterator
operator >=	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <bool Const_> bool operator>=(const GenericMemberIterator<Const_, Encoding, Allocator>& that) const { return ptr_ >= that.ptr_; }$/;"	f	class:GenericMemberIterator
operator BooleanType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/error/error.h	/^    operator BooleanType() const { return !IsError() ? &ParseResult::IsError : NULL; }$/;"	f	struct:ParseResult
operator Location	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  explicit operator Location() && {$/;"	f	struct:ccls::LocationLink
operator ParseResult	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    operator ParseResult() const { return parseResult_; }$/;"	f	class:GenericDocument
operator SymbolIdx	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  operator SymbolIdx() const { return {usr, kind}; }$/;"	f	struct:ccls::SymbolRef
operator ValueType&	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    operator ValueType&() const { return value_; }$/;"	f	class:GenericArray
operator ValueType&	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    operator ValueType&() const { return value_; }$/;"	f	class:GenericObject
operator []	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  T &operator[](size_t i) { return a.get()[i]; }$/;"	f	struct:ccls::Vec
operator []	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  const T &operator[](size_t i) const { return a.get()[i]; }$/;"	f	struct:ccls::Vec
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& operator[](SizeType index) {$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& operator[](const GenericValue<Encoding, SourceAllocator>& name) {$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue& operator[](const std::basic_string<Ch>& name) { return (*this)[GenericValue(StringRef(name))]; }$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_DISABLEIF_RETURN((internal::NotExpr<internal::IsSame<typename internal::RemoveConst<T>::Type, Ch> >),(GenericValue&)) operator[](T* name) {$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    RAPIDJSON_DISABLEIF_RETURN((internal::NotExpr<internal::IsSame<typename internal::RemoveConst<T>::Type, Ch> >),(const GenericValue&)) operator[](T* name) const { return const_cast<GenericValue&>(*this)[name]; }$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Reference operator[](DifferenceType n) const { return ptr_[n]; }$/;"	f	class:GenericMemberIterator
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueType& operator[](SizeType index) const {  return value_[index]; }$/;"	f	class:GenericArray
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueType& operator[](const std::basic_string<Ch>& name) const { return value_[name]; }$/;"	f	class:GenericObject
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    const GenericValue& operator[](SizeType index) const { return const_cast<GenericValue&>(*this)[index]; }$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    const GenericValue& operator[](const GenericValue<Encoding, SourceAllocator>& name) const { return const_cast<GenericValue&>(*this)[name]; }$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    const GenericValue& operator[](const std::basic_string<Ch>& name) const { return (*this)[GenericValue(StringRef(name))]; }$/;"	f	class:GenericValue
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename SourceAllocator> ValueType& operator[](const GenericValue<EncodingType, SourceAllocator>& name) const { return value_[name]; }$/;"	f	class:GenericObject
operator []	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    template <typename T> ValueType& operator[](T* name) const { return value_[name]; }$/;"	f	class:GenericObject
operator bool	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  explicit operator bool() const { return targetUri.size(); }$/;"	f	struct:ccls::LocationLink
operator bool	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  explicit operator bool() const { return valid(); }$/;"	f	class:ccls::Maybe
operator bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    operator bool() const { return !mError; }$/;"	f	class:JsonReader
operator bool	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.h	/^    operator bool() const { return true; }$/;"	f	class:JsonWriter
operator const Ch *	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    operator const Ch *() const { return s; }$/;"	f	struct:GenericStringRef
operator std::optional<T>	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  operator std::optional<T>() const {$/;"	f	class:ccls::Maybe
operator |	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^inline Role operator|(Role lhs, Role rhs) {$/;"	f	namespace:ccls
options	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  FormattingOptions options;$/;"	m	struct:ccls::InsertTextFormat::DocumentFormattingParam
options	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  FormattingOptions options;$/;"	m	struct:ccls::InsertTextFormat::DocumentOnTypeFormattingParam
options	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  FormattingOptions options;$/;"	m	struct:ccls::InsertTextFormat::DocumentRangeFormattingParam
original_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    Stream& original_;$/;"	m	class:internal::StreamLocalCopy
os	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import os$/;"	i
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/jsonx/jsonx.cpp	/^    OutputStream& os_;$/;"	m	class:JsonxWriter	file:
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    OutputByteStream& os_;$/;"	m	class:EncodedOutputStream
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    OutputByteStream* os_;$/;"	m	class:AutoUTFOutputStream
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        OutputStream& os_;$/;"	m	class:GenericPointer::PercentEncodeStream
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^    OutputStream* os_;$/;"	m	class:Writer
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    OutputStream* os_;$/;"	m	class:Writer1	file:
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    OutputStream* os_;$/;"	m	class:Writer2	file:
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    OutputStream* os_;$/;"	m	class:Writer3	file:
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^    OutputStream* os_;$/;"	m	class:Writer4	file:
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/prettywritertest.cpp	/^    std::ostream& os_;$/;"	m	class:OStreamWrapper	file:
os_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/writertest.cpp	/^    std::ostream& os_;$/;"	m	class:OStreamWrapper	file:
other	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        typedef StdAllocator<U, BaseAllocator> other;$/;"	t	struct:StdAllocator::rebind
out	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  IncludeStructure &out;$/;"	m	class:clang::ccls::__anon36::StoreInclude	file:
out	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType out;     \/\/!< Equals to kInvalid for matching state$/;"	m	struct:internal::GenericRegex::State
out	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType out; \/\/!< link-list of all output states$/;"	m	struct:internal::GenericRegex::Frag
out1	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType out1;    \/\/!< Equals to non-kInvalid for split$/;"	m	struct:internal::GenericRegex::State
out_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/capitalize/capitalize.cpp	/^    OutputHandler& out_;$/;"	m	struct:CapitalizeFilter	file:
output	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::vector<Diag> output;$/;"	m	class:clang::ccls::__anon36::StoreDiags	file:
outputHandler_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkey/filterkey.cpp	/^    OutputHandler& outputHandler_;$/;"	m	class:FilterKeyHandler	file:
outputHandler_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    OutputHandler& outputHandler_;$/;"	m	class:FilterKeyHandler	file:
outputHandler_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    OutputHandler* outputHandler_;$/;"	m	class:GenericSchemaValidator
overdue	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  bool overdue = false;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Allocator* ownAllocator_;$/;"	m	class:GenericDocument
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Allocator* ownAllocator_;$/;"	m	class:internal::GenericRegex
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Allocator* ownAllocator_;$/;"	m	class:internal::GenericRegexSearch
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    Allocator* ownAllocator_;$/;"	m	class:internal::Stack
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Allocator* ownAllocator_;               \/\/!< Allocator owned by this Pointer.$/;"	m	class:GenericPointer
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Allocator *ownAllocator_;$/;"	m	class:GenericSchemaDocument
ownAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Allocator* ownAllocator_;   \/\/!< Allocator owned by this Uri.$/;"	m	class:GenericUri
ownBaseAllocator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        BaseAllocator* ownBaseAllocator; \/\/!< base allocator created by this object.$/;"	m	struct:MemoryPoolAllocator::SharedData
ownBuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        bool ownBuffer;$/;"	m	struct:MemoryPoolAllocator::SharedData
ownStateAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    StateAllocator* ownStateAllocator_;$/;"	m	class:GenericSchemaValidator
owned	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        bool owned;$/;"	m	struct:GenericSchemaDocument::SchemaEntry
owned_waiter_	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::unique_ptr<MultiQueueWaiter> owned_waiter_;$/;"	m	struct:ccls::ThreadedQueue
p	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body, table, div, p, dl {$/;"	s
p_	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  const char *p_;$/;"	m	struct:ccls::BinaryReader
pack	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  template <typename T> void pack(T x) {$/;"	f	struct:ccls::BinaryWriter
padding	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^            char padding[4];$/;"	m	struct:GenericValue::Number::I
padding2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^            char padding2[4];$/;"	m	struct:GenericValue::Number::U
padding: 2px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	padding: 2px;$/;"	s
padding: 2px 0px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	padding: 2px 0px;$/;"	s
param	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexParam &param;$/;"	m	class:ccls::__anon5::IndexDataConsumer	file:
param	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexParam &param;$/;"	m	class:ccls::__anon5::IndexFrontendAction	file:
param	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  IndexParam &param;$/;"	m	class:ccls::__anon5::IndexPPCallbacks	file:
parameters	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  std::vector<ParameterInformation> parameters;$/;"	m	struct:ccls::__anon29::SignatureInformation	file:
parametersInDeclarations	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool parametersInDeclarations = true;$/;"	m	struct:ccls::Config::Index
parameters_	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::vector<std::string> parameters_;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
parentKind	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  SymbolKind parentKind;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlightSymbol	file:
parent_kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  SymbolKind parent_kind = SymbolKind::Unknown;$/;"	m	struct:ccls::FuncDef
parent_kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  SymbolKind parent_kind = SymbolKind::Unknown;$/;"	m	struct:ccls::TypeDef
parent_kind	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  SymbolKind parent_kind = SymbolKind::Unknown;$/;"	m	struct:ccls::VarDef
parse	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^bool parse(CompilerInstance &clang) {$/;"	f	namespace:clang::ccls::__anon36
parseErrorCode_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    PointerParseErrorCode parseErrorCode_;  \/\/!< Parsing error code.$/;"	m	class:GenericPointer
parseErrorOffset_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    size_t parseErrorOffset_;               \/\/!< Offset in code unit when parsing fail.$/;"	m	class:GenericPointer
parseFlags	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    static const int parseFlags = kParseDefaultFlags | kParseInsituFlag;$/;"	m	class:LookaheadParserHandler	file:
parseResult_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/filterkeydom/filterkeydom.cpp	/^    ParseResult parseResult_;$/;"	m	class:FilterKeyReader	file:
parseResult_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^          parseResult_(rhs.parseResult_)$/;"	f	class:GenericDocument
parseResult_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ParseResult parseResult_;$/;"	m	class:GenericDocument
parseResult_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    ParseResult parseResult_;$/;"	m	class:GenericReader
parseResult_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ParseResult parseResult_;$/;"	m	class:SchemaValidatingReader
parseTestExpectation	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^void parseTestExpectation($/;"	f	namespace:ccls
parseThread_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    std::thread parseThread_;$/;"	m	class:AsyncDocumentParser	file:
parser	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^parser = argparse.ArgumentParser($/;"	v
parser_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        AsyncDocumentParser& parser_;$/;"	m	struct:AsyncDocumentParser::AsyncStringStream	file:
pat	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  std::string pat;$/;"	m	class:ccls::FuzzyMatcher
pat_role	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  int pat_role[kMaxPat], text_role[kMaxText];$/;"	m	class:ccls::FuzzyMatcher
pat_set	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  int pat_set, text_set;$/;"	m	class:ccls::FuzzyMatcher
path	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::string path;$/;"	m	struct:ccls::__anon5::File	file:
path	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::string path;$/;"	m	struct:ccls::IndexFile
path	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string path;$/;"	m	struct:ccls::InsertTextFormat::NotIndexed
path	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  std::string path;$/;"	m	struct:ccls::pipeline::__anon32::IndexRequest	file:
path	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^    std::string path;$/;"	m	struct:ccls::QueryFile::Def
path	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::string path;$/;"	m	class:clang::ccls::__anon36::StoreDiags	file:
path	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    std::string path;$/;"	m	struct:ccls::SemaManager::CompTask
path	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    std::string path;$/;"	m	struct:ccls::SemaManager::DiagTask
path	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    std::string path;$/;"	m	struct:ccls::SemaManager::PreambleTask
path	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::string path;$/;"	m	struct:ccls::CompleteConsumerCache
path	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include_dirs.js	/^var path = require('path');$/;"	v
path2entry_index	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::unordered_map<std::string, int> path2entry_index;$/;"	m	struct:ccls::Project::Folder
pathFromFileEntry	/home/yl/vim/vim/ccls/ccls/src/clang_tu.cc	/^std::string pathFromFileEntry(const FileEntry &file) {$/;"	f	namespace:ccls
pathMappings	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> pathMappings;$/;"	m	struct:ccls::Config::Clang
path_	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  std::vector<const char *> path_;$/;"	m	struct:ccls::JsonReader
path_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* path_;   \/\/ Absolute if starts with \/$/;"	m	class:GenericUri
pattern	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::string pattern;$/;"	m	struct:ccls::__anon20::ParseIncludeLineResult	file:
pattern	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  std::string pattern;$/;"	m	struct:ccls::Matcher
pattern	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        RegexType* pattern;$/;"	m	struct:internal::Schema::PatternProperty
patternPropertiesSchemaCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType patternPropertiesSchemaCount;$/;"	m	struct:internal::SchemaValidationContext
patternPropertiesSchemas	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType** patternPropertiesSchemas;$/;"	m	struct:internal::SchemaValidationContext
patternPropertiesValidatorCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType patternPropertiesValidatorCount;$/;"	m	struct:internal::SchemaValidationContext
patternPropertiesValidators	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ISchemaValidator** patternPropertiesValidators;$/;"	m	struct:internal::SchemaValidationContext
patternProperties_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PatternProperty* patternProperties_;$/;"	m	class:internal::Schema
patternPropertyCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType patternPropertyCount_;$/;"	m	class:internal::Schema
pattern_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    RegexType* pattern_;$/;"	m	class:internal::Schema
payload	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        char payload[sizeof(SizeType) * 2 + 6];     \/\/ 2 x SizeType + lower 48-bit pointer$/;"	m	struct:GenericValue::Flag
pch	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::shared_ptr<clang::PCHContainerOperations> pch;$/;"	m	struct:ccls::SemaManager
pch	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::shared_ptr<clang::PCHContainerOperations> pch;$/;"	m	struct:ccls::Session
peekBuffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    Ch peekBuffer_[4], *buffer_;$/;"	m	class:BasicIStreamWrapper
percentage	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<int> percentage;$/;"	m	struct:ccls::WorkDoneProgress
pipeline	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^namespace pipeline {$/;"	n	namespace:ccls
pipeline	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  } pipeline;$/;"	m	struct:ccls::__anon10::Out_cclsInfo	typeref:struct:ccls::__anon10::Out_cclsInfo::Pipeline	file:
pipeline	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^namespace pipeline {$/;"	n	namespace:ccls	file:
pipeline	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^namespace pipeline {$/;"	n	namespace:ccls
pipeline	/home/yl/vim/vim/ccls/ccls/src/platform_posix.cc	/^namespace pipeline {$/;"	n	namespace:ccls	file:
placeholder	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool placeholder = true;$/;"	m	struct:ccls::Config::Completion
pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename traits_type::pointer           pointer;$/;"	t	class:StdAllocator
pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef ValueType *    pointer;$/;"	t	class:GenericMemberIterator
pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        PointerType pointer;$/;"	m	struct:GenericSchemaDocument::SchemaEntry
pointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    Pointer* pointer;$/;"	m	struct:Foo	file:
pointer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PointerType pointer_;$/;"	m	class:internal::Schema
pos	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  Position pos;$/;"	m	struct:ccls::__anon7::ScanLineEvent	file:
position	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Position position;$/;"	m	struct:ccls::InsertTextFormat::DocumentOnTypeFormattingParam
position	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Position position;$/;"	m	struct:ccls::RenameParam
position	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Position position;$/;"	m	struct:ccls::TextDocumentPositionParam
position	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^  Position position;$/;"	m	struct:ccls::__anon13::Param	file:
position	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    Position position;$/;"	m	struct:ccls::SemaManager::CompTask
position	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  Position position;$/;"	m	struct:ccls::CompleteConsumerCache
position: fixed	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	position: fixed;$/;"	s
pre 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^tt, code, pre {$/;"	s
pre.fragment 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^pre.fragment {$/;"	s
preamble	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  clang::PrecompiledPreamble preamble;$/;"	m	struct:clang::ccls::PreambleData	file:
preamble	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::shared_ptr<PreambleData> preamble;$/;"	m	struct:ccls::Session
preambleMain	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void *preambleMain(void *manager_) {$/;"	f	namespace:clang::ccls::__anon36
preamble_tasks	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  ThreadedQueue<PreambleTask> preamble_tasks;$/;"	m	struct:ccls::SemaManager
prettywriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    PrettyWriter<StringBuffer, UTF8<char>, UTF8<char>, CrtAllocator, 0>* prettywriter;$/;"	m	struct:Foo	file:
prev_lid2path	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  decltype(IndexFile::lid2path) prev_lid2path;$/;"	m	struct:ccls::IndexUpdate
printDiag	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void printDiag(llvm::raw_string_ostream &os, const DiagBase &d) {$/;"	f	namespace:clang::ccls::__anon36
printIt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/sortkeys/sortkeys.cpp	/^static void printIt(const Value &doc) {$/;"	f	file:
print_function	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^from __future__ import print_function$/;"	i
priority_	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  unsigned priority_;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
priority_	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::deque<T> priority_;$/;"	m	struct:ccls::ThreadedQueue
private	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	24;"	d	file:
process	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^  void process(Project::Entry &entry) {$/;"	f	struct:ccls::__anon33::ProjectProcessor
producer	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  producer(IntrusiveRefCntPtr<llvm::vfs::FileSystem> fs) {$/;"	f	struct:clang::ccls::PreambleStatCache
project	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  Project *project = nullptr;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
project	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  } project;$/;"	m	struct:ccls::__anon10::Out_cclsInfo	typeref:struct:ccls::__anon10::Out_cclsInfo::Project	file:
project_	/home/yl/vim/vim/ccls/ccls/src/include_complete.hh	/^  Project *project_;$/;"	m	struct:ccls::IncludeComplete
project_	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  Project *project_;$/;"	m	struct:ccls::SemaManager
properties_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Property* properties_;$/;"	m	class:internal::Schema
propertyCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType propertyCount_;$/;"	m	class:internal::Schema
propertyExist	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool* propertyExist;$/;"	m	struct:internal::SchemaValidationContext
protected	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	22;"	d	file:
ptr_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    Pointer ptr_; \/\/!< raw pointer$/;"	m	class:GenericMemberIterator
publishDiagnostics	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } publishDiagnostics;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::PublishDiagnostics	file:
push	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  template <void (std::deque<T>::*Push)(T &&)> void push(T &&t, bool priority) {$/;"	f	struct:ccls::ThreadedQueue
pushBack	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  void pushBack(T &&t, bool priority = false) {$/;"	f	struct:ccls::ThreadedQueue
putFunc_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    PutFunc putFunc_;$/;"	m	class:AutoUTFOutputStream
qnxnto	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qual_name_offset	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t qual_name_offset = 0;$/;"	m	struct:ccls::FuncDef
qual_name_offset	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t qual_name_offset = 0;$/;"	m	struct:ccls::TypeDef
qual_name_offset	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t qual_name_offset = 0;$/;"	m	struct:ccls::VarDef
qualified	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^    std::string qualified;$/;"	m	struct:ccls::__anon5::IndexParam::DeclInfo	file:
qualified	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  bool qualified = true;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
qualified	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  bool qualified = true;$/;"	m	struct:ccls::__anon11::Param	file:
qualified	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  bool qualified = false;$/;"	m	struct:ccls::__anon12::Param	file:
query	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string query;$/;"	m	struct:ccls::InsertTextFormat::WorkspaceSymbolParam
query_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* query_;  \/\/ Includes the ?$/;"	m	class:GenericUri
queue_	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::deque<T> queue_;$/;"	m	struct:ccls::ThreadedQueue
quit	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void quit(SemaManager &manager) {$/;"	f	namespace:ccls::pipeline::__anon32
quit	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void SemaManager::quit() {$/;"	f	class:clang::ccls::SemaManager
quot	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	/^   intmax_t quot;$/;"	m	struct:__anon47
quote	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^  std::string quote;$/;"	m	struct:ccls::__anon20::ParseIncludeLineResult	file:
quote_kind_	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  int quote_kind_ = 0;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
qux	/home/yl/vim/vim/ccls/ccls/index_tests/namespaces/namespace_alias.cc	/^             int qux = 42;$/;"	m	namespace:foo::bar::baz	file:
r_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    Reader r_;$/;"	m	class:LookaheadParserHandler	file:
r_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        GenericReader& r_;$/;"	m	struct:GenericReader::ClearStackOnExit
radius_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    double radius_;$/;"	m	class:Circle	file:
random	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import random$/;"	i
randval	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static const int randval[] ={$/;"	v	file:
randvalCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static const size_t randvalCount = sizeof(randval) \/ sizeof(randval[0]);$/;"	v	file:
range	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Range range;$/;"	m	struct:ccls::Ref
range	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Range range;$/;"	m	struct:ccls::SymbolRef
range	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  lsRange range;$/;"	m	struct:ccls::Location
range	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  lsRange range;$/;"	m	struct:ccls::MessageType::Diagnostic
range	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  lsRange range;$/;"	m	struct:ccls::TextEdit
range	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<lsRange> range;$/;"	m	struct:ccls::TextDocumentContentChangeEvent
range	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  lsRange range;$/;"	m	struct:ccls::CodeActionParam
range	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  lsRange range;$/;"	m	struct:ccls::InsertTextFormat::DocumentRangeFormattingParam
range	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  lsRange range;$/;"	m	struct:ccls::__anon19::CodeLens	file:
range	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  lsRange range;$/;"	m	struct:ccls::__anon21::DocumentHighlight	file:
range	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  lsRange range;$/;"	m	struct:ccls::__anon22::DocumentLink	file:
range	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  lsRange range;$/;"	m	struct:ccls::__anon23::DocumentSymbol	file:
range	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^  std::optional<lsRange> range;$/;"	m	struct:ccls::__anon26::Hover	file:
range	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  Range range;$/;"	m	struct:ccls::DiagBase
rangeCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SizeType rangeCount_;$/;"	m	class:internal::GenericRegex
rangeLength	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<int> rangeLength;$/;"	m	struct:ccls::TextDocumentContentChangeEvent
rangeStart	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType rangeStart;$/;"	m	struct:internal::GenericRegex::State
ranges	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  std::vector<std::pair<int, int>> ranges;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlightSymbol	file:
ranges_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Stack<Allocator> ranges_;$/;"	m	class:internal::GenericRegex
rapidjson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^namespace rapidjson {$/;"	n	file:
rawCacheLoad	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::unique_ptr<IndexFile> rawCacheLoad(const std::string &path) {$/;"	f	namespace:ccls::pipeline::__anon32
raw_uri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string raw_uri;$/;"	m	struct:ccls::DocumentUri
readCompilerArgumentsFromFile	/home/yl/vim/vim/ccls/ccls/src/project.cc	/^readCompilerArgumentsFromFile(const std::string &path) {$/;"	f	namespace:ccls::__anon33
readContent	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::optional<std::string> readContent(const std::string &filename) {$/;"	f	namespace:ccls
readCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/filereadstream.h	/^    size_t readCount_;$/;"	m	class:FileReadStream
readCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    size_t readCount_;$/;"	m	class:BasicIStreamWrapper
reader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    Reader* reader;$/;"	m	struct:Foo	file:
realPath	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::string realPath(const std::string &path) {$/;"	f	namespace:ccls
rebind	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    struct rebind {$/;"	s	class:StdAllocator
refcount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        size_t refcount;$/;"	m	struct:MemoryPoolAllocator::SharedData
reference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename allocator_type::reference       reference;$/;"	t	class:StdAllocator
reference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename std::add_lvalue_reference<value_type>::type &reference;$/;"	t	class:StdAllocator
reference	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef ValueType &    reference;$/;"	t	class:GenericMemberIterator
referencesProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool referencesProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(BinaryReader &vis, DeclRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(BinaryReader &vis, SymbolRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(BinaryReader &vis, Use &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(BinaryWriter &vis, DeclRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(BinaryWriter &vis, SymbolRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(BinaryWriter &vis, Use &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(JsonReader &vis, DeclRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(JsonReader &vis, SymbolRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(JsonReader &vis, Use &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(JsonWriter &vis, DeclRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(JsonWriter &vis, SymbolRef &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^void reflect(JsonWriter &vis, Use &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^void reflect(JsonReader &vis, RequestId &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^void reflect(JsonWriter &visitor, RequestId &value) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void reflect(JsonReader &, EmptyParam &) {}$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^inline void reflect(JsonReader &vis, DocumentUri &v) {$/;"	f	class:ccls::InsertTextFormat
reflect	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^inline void reflect(JsonReader &vis, VersionedTextDocumentIdentifier &v) {$/;"	f	class:ccls::InsertTextFormat
reflect	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^inline void reflect(JsonWriter &vis, DocumentUri &v) {$/;"	f	class:ccls::InsertTextFormat
reflect	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^inline void reflect(JsonWriter &vis, VersionedTextDocumentIdentifier &v) {$/;"	f	class:ccls::InsertTextFormat
reflect	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void reflect(JsonReader &reader, InitializeParam::Trace &value) {$/;"	f	class:ccls::__anon17::TextDocumentSyncKind	file:
reflect	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^void reflect(JsonWriter &vis, CompletionItem &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^void reflect(JsonWriter &vis, std::unique_ptr<DocumentSymbol> &v) {$/;"	f	namespace:ccls::__anon23
reflect	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^void reflect(JsonWriter &vis, MarkedString &v) {$/;"	f	namespace:ccls::__anon26
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(BinaryReader &visitor, Pos &value) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(BinaryReader &visitor, Range &value) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(BinaryWriter &vis, Pos &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(BinaryWriter &vis, Range &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(JsonReader &vis, Pos &v) { v = Pos::fromString(vis.getString()); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(JsonReader &vis, Range &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(JsonWriter &vis, Pos &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^void reflect(JsonWriter &vis, Range &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename Vis> void reflect(Vis &vis, IndexInclude &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, DenseMap<CachedHashStringRef, int64_t> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, IndexFunc &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, IndexType &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, IndexVar &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, bool &v              ) { v = vis.get<bool>(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, const char *&v       ) { v = intern(vis.getString()); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, double &v            ) { v = vis.get<double>(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, int &v               ) { v = (int)vis.varInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, long &v              ) { v = (long)vis.varInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, long long &v         ) { v = vis.varInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, short &v             ) { v = (short)vis.varInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, std::string &v       ) { v = vis.getString(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, std::unordered_map<Usr, V> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, unsigned &v          ) { v = (unsigned)vis.varUInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, unsigned char &v     ) { v = vis.get<unsigned char>(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, unsigned long &v     ) { v = (unsigned long)vis.varUInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, unsigned long long &v) { v = vis.varUInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryReader &vis, unsigned short &v    ) { v = (unsigned short)vis.varUInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, DenseMap<CachedHashStringRef, int64_t> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, IndexFunc &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, IndexType &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, IndexVar &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, bool &v              ) { vis.pack(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, const char *&v       ) { vis.string(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, double &v            ) { vis.pack(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, int &v               ) { vis.varInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, long &v              ) { vis.varInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, long long &v         ) { vis.varInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, short &v             ) { vis.varInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, std::string &v       ) { vis.string(v.c_str(), v.size()); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, std::unordered_map<Usr, V> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, unsigned &v          ) { vis.varUInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, unsigned char &v     ) { vis.pack(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, unsigned long &v     ) { vis.varUInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, unsigned long long &v) { vis.varUInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(BinaryWriter &vis, unsigned short &v    ) { vis.varUInt(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, DenseMap<CachedHashStringRef, int64_t> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, IndexFunc &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, IndexType &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, IndexVar &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, JsonNull &v) {}$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, SerializeFormat &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, bool &v              ) { if (!vis.m->IsBool())   throw std::invalid_argument("bool");               v = vis.m->GetBool(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, const char *&v       ) { if (!vis.m->IsString()) throw std::invalid_argument("string");             v = intern(vis.getString()); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, double &v            ) { if (!vis.m->IsDouble()) throw std::invalid_argument("double");             v = vis.m->GetDouble(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, int &v               ) { if (!vis.m->IsInt())    throw std::invalid_argument("int");                v = vis.m->GetInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, long &v              ) { if (!vis.m->IsInt64())  throw std::invalid_argument("long");               v = (long)vis.m->GetInt64(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, long long &v         ) { if (!vis.m->IsInt64())  throw std::invalid_argument("long long");          v = vis.m->GetInt64(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, short &v             ) { if (!vis.m->IsInt())    throw std::invalid_argument("short");              v = (short)vis.m->GetInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, std::string &v       ) { if (!vis.m->IsString()) throw std::invalid_argument("string");             v = vis.getString(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, std::unordered_map<Usr, V> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, unsigned &v          ) { if (!vis.m->IsUint64()) throw std::invalid_argument("unsigned");           v = (unsigned)vis.m->GetUint64(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, unsigned char &v     ) { if (!vis.m->IsInt())    throw std::invalid_argument("uint8_t");            v = (uint8_t)vis.m->GetInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, unsigned long &v     ) { if (!vis.m->IsUint64()) throw std::invalid_argument("unsigned long");      v = (unsigned long)vis.m->GetUint64(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, unsigned long long &v) { if (!vis.m->IsUint64()) throw std::invalid_argument("unsigned long long"); v = vis.m->GetUint64(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonReader &vis, unsigned short &v    ) { if (!vis.m->IsInt())    throw std::invalid_argument("unsigned short");     v = (unsigned short)vis.m->GetInt(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, DenseMap<CachedHashStringRef, int64_t> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, IndexFunc &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, IndexInclude &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, IndexType &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, IndexVar &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, JsonNull &v) { vis.m->Null(); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, SerializeFormat &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, bool &v              ) { vis.m->Bool(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, const char *&v       ) { vis.string(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, double &v            ) { vis.m->Double(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, int &v               ) { vis.m->Int(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, long &v              ) { vis.m->Int64(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, long long &v         ) { vis.m->Int64(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, short &v             ) { vis.m->Int(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, std::string &v       ) { vis.string(v.c_str(), v.size()); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, std::string_view &data) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, std::unordered_map<Usr, V> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, unsigned &v          ) { vis.m->Uint64(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, unsigned char &v     ) { vis.m->Int(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, unsigned long &v     ) { vis.m->Uint64(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, unsigned long long &v) { vis.m->Uint64(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflect(JsonWriter &vis, unsigned short &v    ) { vis.m->Int(v); }$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(BinaryReader &vis, Maybe<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(BinaryReader &vis, std::optional<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(BinaryReader &vis, std::vector<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(BinaryWriter &vis, Maybe<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(BinaryWriter &vis, std::optional<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(BinaryWriter &vis, std::vector<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(JsonReader &vis, Maybe<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(JsonReader &vis, std::optional<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(JsonReader &vis, std::vector<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(JsonWriter &vis, Maybe<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(JsonWriter &vis, std::optional<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflect(JsonWriter &vis, std::vector<T> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflect(BinaryReader &vis, std::pair<L, R> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflect(BinaryWriter &vis, std::pair<L, R> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflect(JsonReader &vis, std::pair<L, R> &v) {$/;"	f	namespace:ccls
reflect	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflect(JsonWriter &vis, std::pair<L, R> &v) {$/;"	f	namespace:ccls
reflect1	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename TVisitor> void reflect1(TVisitor &vis, IndexFile &v) {$/;"	f	namespace:ccls
reflect1	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename TVisitor> void reflect1(TVisitor &vis, IndexFunc &v) {$/;"	f	namespace:ccls
reflect1	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename TVisitor> void reflect1(TVisitor &vis, IndexVar &v) {$/;"	f	namespace:ccls
reflect1	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename Vis> void reflect1(Vis &vis, IndexType &v) {$/;"	f	namespace:ccls
reflectFile	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectFile(BinaryReader &vis, IndexFile &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflectFile	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectFile(BinaryWriter &vis, IndexFile &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflectFile	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectFile(JsonReader &vis, IndexFile &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflectFile	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectFile(JsonWriter &vis, IndexFile &v) { reflect1(vis, v); }$/;"	f	namespace:ccls
reflectHoverAndComments	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectHoverAndComments(BinaryReader &vis, Def &def) {$/;"	f	namespace:ccls
reflectHoverAndComments	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectHoverAndComments(BinaryWriter &vis, Def &def) {$/;"	f	namespace:ccls
reflectHoverAndComments	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectHoverAndComments(JsonReader &vis, Def &def) {$/;"	f	namespace:ccls
reflectHoverAndComments	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectHoverAndComments(JsonWriter &vis, Def &def) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(BinaryReader &vis, const char *, T &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(BinaryWriter &vis, const char *, Maybe<T> &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(BinaryWriter &vis, const char *, T &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(BinaryWriter &vis, const char *, std::optional<T> &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(JsonReader &vis, const char *name, T &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(JsonWriter &vis, const char *name, Maybe<T> &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(JsonWriter &vis, const char *name, T &v) {$/;"	f	namespace:ccls
reflectMember	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^void reflectMember(JsonWriter &vis, const char *name, std::optional<T> &v) {$/;"	f	namespace:ccls
reflectMemberEnd	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^inline void reflectMemberEnd(JsonWriter &vis) { vis.endObject(); }$/;"	f	namespace:ccls
reflectMemberEnd	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflectMemberEnd(T &) {}$/;"	f	namespace:ccls
reflectMemberStart	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void reflectMemberStart(JsonReader &vis) {$/;"	f	namespace:ccls
reflectMemberStart	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^inline void reflectMemberStart(JsonWriter &vis) { vis.startObject(); }$/;"	f	namespace:ccls
reflectMemberStart	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^template <typename T> void reflectMemberStart(T &) {}$/;"	f	namespace:ccls
reflectShortName	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename Def> void reflectShortName(BinaryReader &vis, Def &def) {$/;"	f	namespace:ccls
reflectShortName	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename Def> void reflectShortName(BinaryWriter &vis, Def &def) {$/;"	f	namespace:ccls
reflectShortName	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename Def> void reflectShortName(JsonReader &vis, Def &def) {$/;"	f	namespace:ccls
reflectShortName	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^template <typename Def> void reflectShortName(JsonWriter &vis, Def &def) {$/;"	f	namespace:ccls
refresh	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  bool refresh = false;$/;"	m	struct:ccls::IndexUpdate
regex	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^  std::regex regex;$/;"	m	struct:ccls::Matcher::Impl	file:
regex_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    const RegexType& regex_;$/;"	m	class:internal::GenericRegexSearch
registerOptions	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } registerOptions;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::DidChangeWatchedFilesRegistration	typeref:struct:ccls::__anon17::TextDocumentSyncKind::DidChangeWatchedFilesRegistration::Option	file:
registrations	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::vector<DidChangeWatchedFilesRegistration> registrations = {{}};$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::RegistrationParam	file:
relatedInformation	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::vector<DiagnosticRelatedInformation> relatedInformation;$/;"	m	struct:ccls::MessageType::Diagnostic
relatedInformation	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool relatedInformation = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::PublishDiagnostics	file:
rem	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	/^   intmax_t rem;$/;"	m	struct:__anon47
remoteProvider_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    IRemoteSchemaDocumentProviderType* remoteProvider_;$/;"	m	class:GenericSchemaDocument
remotes	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^remotes = subparsers.add_parser($/;"	v
removeCache	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void removeCache(const std::string &path) {$/;"	f	namespace:ccls::pipeline
removeRange	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void removeRange(std::vector<T> &from, const std::vector<T> &to_remove) {$/;"	f	namespace:ccls::__anon34
removeUsrs	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void DB::removeUsrs(Kind kind, int file_id,$/;"	f	class:ccls::DB
removed	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^    std::vector<WorkspaceFolder> added, removed;$/;"	m	struct:ccls::InsertTextFormat::DidChangeWorkspaceFoldersParam::Event
renameProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool renameProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
replacements	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^  std::vector<Replacement> replacements;$/;"	m	struct:ccls::TextReplacer	file:
replacementsToEdits	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^std::vector<TextEdit> replacementsToEdits(std::string_view code,$/;"	f	namespace:ccls::__anon25
reply	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^static void reply(const RequestId &id, const char *key,$/;"	f	namespace:ccls::pipeline
reply	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void reply(const RequestId &id, const std::function<void(JsonWriter &)> &fn) {$/;"	f	namespace:ccls::pipeline
replyError	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void replyError(const RequestId &id,$/;"	f	namespace:ccls::pipeline
replyError	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^template <typename T> void replyError(const RequestId &id, T &result) {$/;"	f	namespace:ccls::pipeline
replyLocationLink	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void ReplyOnce::replyLocationLink(std::vector<LocationLink> &result) {$/;"	f	class:ccls::ReplyOnce
request	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } request;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Request
request	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^template <typename T> void request(const char *method, T &result) {$/;"	f	namespace:ccls::pipeline
required	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        bool required;$/;"	m	struct:internal::Schema::Property
rescan	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^void IncludeComplete::rescan() {$/;"	f	class:ccls::IncludeComplete
resolveIfRelative	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^std::string resolveIfRelative(const std::string &directory,$/;"	f	namespace:ccls
resolveProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool resolveProvider = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CodeLensOptions	file:
resolveProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool resolveProvider = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CompletionOptions	file:
resolveProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool resolveProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::DocumentLinkOptions	file:
resolved_path	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  const char *resolved_path;$/;"	m	struct:ccls::IndexInclude
resourceDir	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::string resourceDir;$/;"	m	struct:ccls::Config::Clang
result	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::vector<CodeLens> *result;$/;"	m	struct:ccls::__anon19::CommonCodeLensParams	file:
result	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  T result;$/;"	m	struct:ccls::CompleteConsumerCache
retainInMemory	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int retainInMemory = 2;$/;"	m	struct:ccls::Config::Cache
return_type	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter.cc	/^unique_ptr<S>* return_type() {$/;"	f
reverseSubseqMatch	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^int reverseSubseqMatch(std::string_view pat, std::string_view text,$/;"	f	namespace:ccls
right: auto	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	right: auto;$/;"	s
role	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Role role;$/;"	m	struct:ccls::Ref
role	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Role role;$/;"	m	struct:ccls::SymbolRef
role	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  Role role = Role::None;$/;"	m	struct:ccls::__anon21::DocumentHighlight	file:
role	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^  Role role = Role::None;$/;"	m	struct:ccls::__anon27::ReferenceParam	file:
root	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::string root;$/;"	m	struct:ccls::Project::Entry
root2folder	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^  std::unordered_map<std::string, Folder> root2folder;$/;"	m	struct:ccls::Project
rootUri	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::optional<DocumentUri> rootUri;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeParam	file:
root_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SizeType root_;$/;"	m	class:internal::GenericRegex
root_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType& root_;$/;"	m	class:GenericSchemaValidator
root_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* root_;                \/\/!< Root schema.$/;"	m	class:GenericSchemaDocument
run	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^void MessageHandler::run(InMessage &msg) {$/;"	f	class:ccls::MessageHandler
runIndexTests	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^bool runIndexTests(const std::string &filter_path, bool enable_update) {$/;"	f	namespace:ccls
s	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  int s = 0;$/;"	m	struct:ccls::Vec
s	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        String s;$/;"	m	union:GenericValue::Data
s	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    const Ch* const s; \/\/!< plain CharType pointer$/;"	m	struct:GenericStringRef
s	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    Stream s;$/;"	m	class:internal::StreamLocalCopy
s	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    Stream& s;$/;"	m	class:internal::StreamLocalCopy
sans-serif	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	font-family: Helvetica, arial, freesans, clean, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';$/;"	s
save	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    SaveOptions save;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::TextDocumentSyncOptions	file:
scheduleDiag	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^void SemaManager::scheduleDiag(const std::string &path, int debounce) {$/;"	f	class:clang::ccls::SemaManager
schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        SchemaType* schema;$/;"	m	struct:GenericSchemaDocument::SchemaEntry
schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        const SchemaType* schema;$/;"	m	struct:internal::Schema::PatternProperty
schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        const SchemaType* schema;$/;"	m	struct:internal::Schema::Property
schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* schema;$/;"	m	struct:internal::SchemaValidationContext
schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^        SchemaDocument* schema;$/;"	m	struct:Schema::TestSuite	file:
schemaAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    typename SchemaDocumentType::AllocatorType schemaAllocator_;$/;"	m	class:RemoteSchemaDocumentProvider	file:
schemaBuffer_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    char schemaBuffer_[128u * 1024];$/;"	m	class:RemoteSchemaDocumentProvider	file:
schemaDocument_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaDocumentType* schemaDocument_;$/;"	m	class:GenericSchemaValidator
schemaMap_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    internal::Stack<Allocator> schemaMap_;  \/\/ Stores created Pointer -> Schemas$/;"	m	class:GenericSchemaDocument
schemaRef_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    internal::Stack<Allocator> schemaRef_;  \/\/ Stores Pointer(s) from $ref(s) until resolved$/;"	m	class:GenericSchemaDocument
schemaStack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    internal::Stack<StateAllocator> schemaStack_;    \/\/!< stack to store the current path of schema (BaseSchemaType *)$/;"	m	class:GenericSchemaValidator
schemadocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    SchemaDocument* schemadocument;$/;"	m	struct:Foo	file:
schemas	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        const SchemaType** schemas;$/;"	m	struct:internal::Schema::SchemaArray
schemavalidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    SchemaValidator* schemavalidator;$/;"	m	struct:Foo	file:
scheme_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* scheme_; \/\/ Includes the :$/;"	m	class:GenericUri
school_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^    std::string school_;$/;"	m	class:Education	file:
score_	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  int score_;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
sd_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaDocumentType& sd_;$/;"	m	class:SchemaValidatingReader
sd_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    SchemaDocumentType* sd_[kCount];$/;"	m	class:RemoteSchemaDocumentProvider	file:
search_dir2kind	/home/yl/vim/vim/ccls/ccls/src/project.hh	/^    std::unordered_map<std::string, int> search_dir2kind;$/;"	m	struct:ccls::Project::Folder
seen	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  DenseSet<const FileEntry *> seen;$/;"	m	class:clang::ccls::__anon36::StoreInclude	file:
seenFile	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  void seenFile(FileID fid) {$/;"	f	struct:ccls::__anon5::IndexParam
selectionRange	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  lsRange selectionRange;$/;"	m	struct:ccls::__anon23::DocumentSymbol	file:
serialize	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^std::string serialize(SerializeFormat format, IndexFile &file) {$/;"	f	namespace:ccls
serve	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^serve = subparsers.add_parser($/;"	v
serve_path	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^        def serve_path(path):$/;"	f	function:main
serverErrorEnd	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  serverErrorEnd = -32000,$/;"	m	class:ccls::ErrorCode
serverErrorStart	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  serverErrorStart = -32099,$/;"	m	class:ccls::ErrorCode
serverInfo	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } serverInfo;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult	typeref:struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult::ServerInfo	file:
session	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } session;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Session
sessions	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  LruCache<std::string, ccls::Session> sessions;$/;"	m	struct:ccls::SemaManager
setCapacity	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  void setCapacity(int cap) { capacity = cap; }$/;"	f	struct:ccls::LruCache
setIndexContent	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^void WorkingFile::setIndexContent(const std::string &index_content) {$/;"	f	class:ccls::WorkingFile
setName	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  void setName(const Decl *d, std::string_view short_name,$/;"	f	class:ccls::__anon5::IndexDataConsumer
setPath	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^void DocumentUri::setPath(const std::string &path) {$/;"	f	class:ccls::DocumentUri
setUpClass	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def setUpClass(cls):$/;"	m	class:SanityTests
setVarName	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  void setVarName(const Decl *d, std::string_view short_name,$/;"	f	class:ccls::__anon5::IndexDataConsumer
severity	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  int severity = 0;$/;"	m	struct:ccls::MessageType::Diagnostic
shapes_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    std::vector<Shape*> shapes_;$/;"	m	class:Canvas	file:
shared_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        shared_(rhs.shared_)$/;"	f	class:MemoryPoolAllocator
shared_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    SharedData *shared_;        \/\/!< The shared data of the allocator$/;"	m	class:MemoryPoolAllocator
short_name	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^    std::string short_name;$/;"	m	struct:ccls::__anon5::IndexParam::DeclInfo	file:
short_name_offset	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t short_name_offset = 0;$/;"	m	struct:ccls::FuncDef
short_name_offset	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t short_name_offset = 0;$/;"	m	struct:ccls::TypeDef
short_name_offset	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t short_name_offset = 0;$/;"	m	struct:ccls::VarDef
short_name_size	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t short_name_size = 0;$/;"	m	struct:ccls::FuncDef
short_name_size	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t short_name_size = 0;$/;"	m	struct:ccls::TypeDef
short_name_size	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  int16_t short_name_size = 0;$/;"	m	struct:ccls::VarDef
shutdown	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void MessageHandler::shutdown(EmptyParam &, ReplyOnce &reply) {$/;"	f	class:ccls::__anon17::MessageHandler
shutil	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import shutil$/;"	i
signatureHelpProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } signatureHelpProvider;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::SignatureHelpOptions	file:
signatures	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^  std::vector<SignatureInformation> signatures;$/;"	m	struct:ccls::__anon29::SignatureHelp	file:
simplifyAnonymous	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  static void simplifyAnonymous(std::string &name) {$/;"	f	class:ccls::__anon5::IndexDataConsumer
siphash	/home/yl/vim/vim/ccls/ccls/third_party/siphash.cc	/^int siphash(const uint8_t *in, const size_t inlen, const uint8_t *k,$/;"	f
size	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  size_t size() const { return total_count_; }$/;"	f	struct:ccls::ThreadedQueue
size	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  int size() const { return s; }$/;"	f	struct:ccls::Vec
size	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^        size_t size;        \/\/!< Current size of allocated memory in bytes.$/;"	m	struct:MemoryPoolAllocator::ChunkHeader
size	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        SizeType size;$/;"	m	struct:GenericValue::ArrayData
size	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        SizeType size;$/;"	m	struct:GenericValue::ObjectData
size_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    size_t size_;       \/\/!< Size of the stream.$/;"	m	struct:MemoryStream
size_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename traits_type::size_type         size_type;$/;"	t	class:StdAllocator
sizeof	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^RAPIDJSON_STATIC_ASSERT(sizeof(long) == sizeof(int));$/;"	m	namespace:internal
sizeof	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^RAPIDJSON_STATIC_ASSERT(sizeof(unsigned long) == sizeof(unsigned));$/;"	m	namespace:internal
skip	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/travis-doxygen.sh	/^skip() {$/;"	f
skippedRanges	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  std::vector<lsRange> skippedRanges;$/;"	m	struct:ccls::__anon7::CclsSetSkippedRanges	file:
skipped_ranges	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Range> skipped_ranges;$/;"	m	struct:ccls::IndexFile
skipped_ranges	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^  bool skipped_ranges = false;$/;"	m	struct:ccls::FileInfoParam	file:
skipped_ranges	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^    std::vector<Range> skipped_ranges;$/;"	m	struct:ccls::QueryFile::Def
sm	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  SourceManager &sm;$/;"	m	class:ccls::__anon5::IndexPPCallbacks	file:
sm	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  SourceManager *sm = nullptr;$/;"	m	class:clang::ccls::__anon36::CclsPreambleCallbacks	file:
sm	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  const SourceManager &sm;$/;"	m	class:clang::ccls::__anon36::StoreInclude	file:
snippetSupport	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool snippetSupport = true;$/;"	m	struct:ccls::Config::ClientCapability
snippetSupport	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^      bool snippetSupport = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::TextDocumentClientCap::Completion::CompletionItem	file:
sort	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool sort = true;$/;"	m	struct:ccls::Config::WorkspaceSymbol
sortText	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::string sortText;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
source	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string source = "ccls";$/;"	m	struct:ccls::MessageType::Diagnostic
spawnThread	/home/yl/vim/vim/ccls/ccls/src/platform_posix.cc	/^void spawnThread(void *(*fn)(void *), void *arg) {$/;"	f	namespace:ccls
spawnThread	/home/yl/vim/vim/ccls/ccls/src/platform_win.cc	/^void spawnThread(void *(*fn)(void *), void *arg) {$/;"	f	namespace:ccls
spell	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Maybe<DeclRef> spell;$/;"	m	struct:ccls::FuncDef
spell	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Maybe<DeclRef> spell;$/;"	m	struct:ccls::TypeDef
spell	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Maybe<DeclRef> spell;$/;"	m	struct:ccls::VarDef
spellChecking	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    bool spellChecking = true;$/;"	m	struct:ccls::Config::Diagnostics
splitString	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^std::vector<std::string> splitString(const std::string &str,$/;"	f	namespace:ccls
src_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^        const char* src_;     \/\/!< Current read position.$/;"	m	struct:AsyncDocumentParser::AsyncStringStream	file:
src_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorystream.h	/^    const Ch* src_;     \/\/!< Current read position.$/;"	m	struct:MemoryStream
src_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        const Ch* src_;     \/\/!< Current read position.$/;"	m	class:GenericPointer::PercentDecodeStream
src_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    Ch* src_;$/;"	m	struct:GenericInsituStringStream
src_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stream.h	/^    const Ch* src_;     \/\/!< Current read position.$/;"	m	struct:GenericStringStream
src_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const Ch* src_;     \/\/!< Current read position.$/;"	m	class:CustomStringStream	file:
ss	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        ShortString ss;$/;"	m	union:GenericValue::Data
ss_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    InsituStringStream ss_;$/;"	m	class:LookaheadParserHandler	file:
ss_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SourceStream& ss_;$/;"	m	class:internal::DecodedStream
st_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    LookaheadParsingState st_;$/;"	m	class:LookaheadParserHandler	file:
stackEnd_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    char *stackEnd_;$/;"	m	class:internal::Stack
stackStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        StackStream<StackCharacter> stackStream;$/;"	m	class:GenericReader::NumberStream
stackTop_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    char *stackTop_;$/;"	m	class:internal::Stack
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    internal::Stack<StackAllocator> stack_;$/;"	m	class:GenericDocument
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    char *stack_;$/;"	m	class:internal::Stack
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/memorybuffer.h	/^    mutable internal::Stack<Allocator> stack_;$/;"	m	struct:GenericMemoryBuffer
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        internal::Stack<StackAllocator>& stack_;$/;"	m	class:GenericReader::StackStream
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    internal::Stack<StackAllocator> stack_;  \/\/!< A stack for storing decoded string temporarily during non-destructive parsing.$/;"	m	class:GenericReader
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    Stack<Allocator> stack_;$/;"	m	class:internal::Hasher
stack_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/stringbuffer.h	/^    mutable internal::Stack<Allocator> stack_;$/;"	m	class:GenericStringBuffer
stamp	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^bool VFS::stamp(const std::string &path, int64_t ts, int step) {$/;"	f	class:ccls::VFS
standalone	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void standalone(const std::string &root) {$/;"	f	namespace:ccls::pipeline
standaloneInitialize	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^void standaloneInitialize(MessageHandler &handler, const std::string &root) {$/;"	f	namespace:ccls::__anon17
start	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Position start;$/;"	m	struct:ccls::lsRange
start	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  Pos start;$/;"	m	struct:ccls::Range
start	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        SizeType start;$/;"	m	struct:internal::GenericRegex::Frag
start	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^        unsigned start; \/\/ $/;"	m	struct:internal::GenericRegex::Range
startArray	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::startArray() { m->StartArray(); }$/;"	f	class:ccls::JsonWriter
startCharacter	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^  int startLine, startCharacter, endLine, endCharacter;$/;"	m	struct:ccls::__anon24::FoldingRange	file:
startLine	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  int startLine = -1;$/;"	m	struct:ccls::__anon23::DocumentSymbolParam	file:
startLine	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^  int startLine, startCharacter, endLine, endCharacter;$/;"	m	struct:ccls::__anon24::FoldingRange	file:
startObject	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::startObject() { m->StartObject(); }$/;"	f	class:ccls::JsonWriter
startObject	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  void startObject() {}$/;"	f	struct:ccls::JsonReader
stat_cache	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::unique_ptr<PreambleStatCache> stat_cache;$/;"	m	struct:clang::ccls::PreambleData	file:
state	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^  std::unordered_map<std::string, State> state;$/;"	m	struct:ccls::VFS
state	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^    State state;$/;"	m	struct:JsonReaderStackItem	file:
state0_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Stack<Allocator> state0_;$/;"	m	class:internal::GenericRegexSearch
state1_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Stack<Allocator> state1_;$/;"	m	class:internal::GenericRegexSearch
stateAllocator_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    StateAllocator* stateAllocator_;$/;"	m	class:GenericSchemaValidator
stateCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    SizeType stateCount_;$/;"	m	class:internal::GenericRegex
stateSet_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    uint32_t* stateSet_;$/;"	m	class:internal::GenericRegexSearch
state_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/messagereader/messagereader.cpp	/^    }state_;$/;"	m	struct:MessageHandler	typeref:enum:MessageHandler::State	file:
state_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    IterativeParsingState state_;$/;"	m	class:GenericReader
states_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    Stack<Allocator> states_;$/;"	m	class:internal::GenericRegex
static_var	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^    static constexpr VarType static_var = (VarType)0x0;$/;"	m	struct:ns::Holder	file:
static_var	/home/yl/vim/vim/ccls/ccls/index_tests/templates/implicit_variable_instantiation.cc	/^  const typename VarType Holder<_>::static_var;$/;"	m	class:ns::Holder	file:
static_var	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call.cc	/^  static int static_var;$/;"	m	struct:Foo	file:
static_var	/home/yl/vim/vim/ccls/ccls/index_tests/usage/usage_inside_of_call.cc	/^int Foo::static_var = 0;$/;"	m	class:Foo	file:
static_var	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_cstyle_cast.cc	/^  static constexpr VarType static_var = (VarType)0x0;$/;"	m	struct:Holder	file:
static_var	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_cstyle_cast.cc	/^const VarType Holder::static_var;$/;"	m	class:Holder	file:
stats	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^IndexStats stats;$/;"	m	namespace:ccls::pipeline	file:
std	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^namespace std {$/;"	n
std	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^namespace std {$/;"	n
std	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^namespace std {$/;"	n
stdout_waiter	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^MultiQueueWaiter *stdout_waiter;$/;"	m	namespace:ccls::pipeline::__anon32	file:
step	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^    int step;$/;"	m	struct:ccls::VFS::State
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseArrayHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseBoolHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseDoubleHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseEmptyObjectHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseInt64Handler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseIntHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseMultipleRootHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseObjectHandler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseUint64Handler	file:
step_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    unsigned step_;$/;"	m	struct:ParseUintHandler	file:
storage	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  uint8_t storage = clang::SC_None;$/;"	m	struct:ccls::FuncDef
storage	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  uint8_t storage = clang::SC_None;$/;"	m	struct:ccls::VarDef
storage	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  uint8_t storage;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlightSymbol	file:
storage	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  T storage;$/;"	m	class:ccls::Maybe
str	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        Ch str[MaxChars];$/;"	m	struct:GenericValue::ShortString
str	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        const Ch* str;$/;"	m	struct:GenericValue::String
str_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    const typename Encoding::Ch* str_;$/;"	m	struct:ParseStringHandler	file:
stream_	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  std::stringstream stream_;$/;"	m	struct:ccls::log::Message
stream_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    AsyncStringStream stream_;$/;"	m	class:AsyncDocumentParser	file:
stream_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/istreamwrapper.h	/^    StreamType &stream_;$/;"	m	class:BasicIStreamWrapper
stream_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/ostreamwrapper.h	/^    StreamType& stream_;$/;"	m	class:BasicOStreamWrapper
string	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::string(const char *s) { m->String(s); }$/;"	f	class:ccls::JsonWriter
string	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^void JsonWriter::string(const char *s, size_t len) { m->String(s, len); }$/;"	f	class:ccls::JsonWriter
string	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  void string(const char *x) { string(x, strlen(x)); }$/;"	f	struct:ccls::BinaryWriter
string	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  void string(const char *x, size_t len) {$/;"	f	struct:ccls::BinaryWriter
stringbuffer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    StringBuffer* stringbuffer;$/;"	m	struct:Foo	file:
stringify	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^template <typename T> std::string stringify(T x) {$/;"	f
strings	/home/yl/vim/vim/ccls/ccls/src/serializer.cc	/^static DenseSet<CachedHashStringRef> strings;$/;"	m	namespace:ccls	file:
stringstream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    StringStream* stringstream;$/;"	m	struct:Foo	file:
strtoimax	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	307;"	d
strtoumax	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	308;"	d
students	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    std::vector<Student> students;$/;"	m	struct:Group	file:
subparsers	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^subparsers = parser.add_subparsers(help="utility commands", dest="command")$/;"	v
suffixWhitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      std::vector<std::string> suffixWhitelist = {".h", ".hpp", ".hh", ".inc"};$/;"	m	struct:ccls::Config::Completion::Include
supportUnicode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    enum { supportUnicode = 0 };$/;"	e	enum:ASCII::__anon43
supportUnicode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:AutoUTF::__anon44
supportUnicode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:UTF16::__anon41
supportUnicode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:UTF32::__anon42
supportUnicode	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodings.h	/^    enum { supportUnicode = 1 };$/;"	e	enum:UTF8::__anon40
supported	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^        bool supported = true;$/;"	m	struct:ccls::Config::ServerCap::Workspace::WorkspaceFolders
suppressUnwrittenScope	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      bool suppressUnwrittenScope = false;$/;"	m	struct:ccls::Config::Index::Name
symbol	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  CclsSemanticHighlightSymbol *symbol;$/;"	m	struct:ccls::__anon7::ScanLineEvent	file:
symbol	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  DynamicReg symbol;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
symbol2refcnt	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::DenseMap<ExtentRef, int> symbol2refcnt;$/;"	m	struct:ccls::QueryFile
symbols	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  std::vector<CclsSemanticHighlightSymbol> symbols;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlight	file:
sys	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import sys$/;"	i
t	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_declare_static.cc	/^static Type t;$/;"	v	file:
tabSize	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  int tabSize;$/;"	m	struct:ccls::InsertTextFormat::FormattingOptions
table	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^body, table, div, p, dl {$/;"	s
table.doxtable td	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^table.doxtable td, table.doxtable th {$/;"	s
table.doxtable th 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^table.doxtable td, table.doxtable th {$/;"	s
table.doxtable th 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^table.doxtable th {$/;"	s
take	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  std::vector<Diag> take() { return std::move(output); }$/;"	f	class:clang::ccls::__anon36::StoreDiags
take	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  std::shared_ptr<V> take(const K &key) {$/;"	f	struct:ccls::LruCache
take	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  std::string take() { return std::move(buf_); }$/;"	f	struct:ccls::BinaryWriter
takeFunc_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    TakeFunc takeFunc_;$/;"	m	class:AutoUTFInputStream
target	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^  DocumentUri target;$/;"	m	struct:ccls::__anon22::DocumentLink	file:
targetRange	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  lsRange targetRange;$/;"	m	struct:ccls::LocationLink
targetSelectionRange	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  lsRange targetSelectionRange;$/;"	m	struct:ccls::LocationLink
targetUri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string targetUri;$/;"	m	struct:ccls::LocationLink
temp_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/platformtest.cpp	/^    char *temp_;$/;"	m	class:Platform	file:
temp_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    char *temp_;$/;"	m	class:RapidJson	file:
test1	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^void test1() {$/;"	f
test2	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^void test2() {$/;"	f
test3	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^void test3() {$/;"	f
testJson	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/cursorstreamwrappertest.cpp	/^bool testJson(const char *json, size_t &line, size_t &col) {$/;"	f
testSuites	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^    TestSuiteList testSuites;$/;"	m	class:Schema	file:
test_all_descriptions_are_unique	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def test_all_descriptions_are_unique(self):$/;"	m	class:SanityTests
test_all_descriptions_have_reasonable_length	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def test_all_descriptions_have_reasonable_length(self):$/;"	m	class:SanityTests
test_all_files_are_valid_json	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def test_all_files_are_valid_json(self):$/;"	m	class:SanityTests
test_all_schemas_are_valid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def test_all_schemas_are_valid(self):$/;"	m	class:SanityTests
test_remote_schemas_are_updated	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def test_remote_schemas_are_updated(self):$/;"	m	class:SanityTests
test_suites_are_valid	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    def test_suites_are_valid(self):$/;"	m	class:SanityTests
tests	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^        DocumentList tests;$/;"	m	struct:Schema::TestSuite	file:
text	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  std::string_view text;$/;"	m	class:ccls::FuzzyMatcher
text	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string text;$/;"	m	struct:ccls::TextDocumentContentChangeEvent
text	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string text;$/;"	m	struct:ccls::TextDocumentItem
textDocument	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  VersionedTextDocumentIdentifier textDocument;$/;"	m	struct:ccls::TextDocumentDidChangeParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::CodeActionParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::InsertTextFormat::DocumentFormattingParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::InsertTextFormat::DocumentOnTypeFormattingParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::InsertTextFormat::DocumentRangeFormattingParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::RenameParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::TextDocumentParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::TextDocumentPositionParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextDocumentItem textDocument;$/;"	m	struct:ccls::DidOpenTextDocumentParam
textDocument	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  VersionedTextDocumentIdentifier textDocument;$/;"	m	struct:ccls::TextDocumentEdit
textDocument	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_navigate.cc	/^  TextDocumentIdentifier textDocument;$/;"	m	struct:ccls::__anon13::Param	file:
textDocument	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  TextDocumentClientCap textDocument;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ClientCap	file:
textDocumentSync	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  } textDocumentSync;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	typeref:struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::TextDocumentSyncOptions	file:
textDocument_codeAction	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^void MessageHandler::textDocument_codeAction(CodeActionParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_codeLens	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^void MessageHandler::textDocument_codeLens(TextDocumentParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_completion	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_completion.cc	/^void MessageHandler::textDocument_completion(CompletionParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_declaration	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_definition.cc	/^void MessageHandler::textDocument_declaration(TextDocumentPositionParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_definition	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_definition.cc	/^void MessageHandler::textDocument_definition(TextDocumentPositionParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_didChange	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_did.cc	/^void MessageHandler::textDocument_didChange(TextDocumentDidChangeParam &param) {$/;"	f	class:ccls::MessageHandler
textDocument_didClose	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_did.cc	/^void MessageHandler::textDocument_didClose(TextDocumentParam &param) {$/;"	f	class:ccls::MessageHandler
textDocument_didOpen	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_did.cc	/^void MessageHandler::textDocument_didOpen(DidOpenTextDocumentParam &param) {$/;"	f	class:ccls::MessageHandler
textDocument_didSave	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_did.cc	/^void MessageHandler::textDocument_didSave(TextDocumentParam &param) {$/;"	f	class:ccls::MessageHandler
textDocument_documentHighlight	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^void MessageHandler::textDocument_documentHighlight($/;"	f	class:ccls::MessageHandler
textDocument_documentLink	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^void MessageHandler::textDocument_documentLink(TextDocumentParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_documentSymbol	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_document.cc	/^void MessageHandler::textDocument_documentSymbol(JsonReader &reader,$/;"	f	class:ccls::MessageHandler
textDocument_foldingRange	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_foldingRange.cc	/^void MessageHandler::textDocument_foldingRange(TextDocumentParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_formatting	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^void MessageHandler::textDocument_formatting(DocumentFormattingParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_hover	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^void MessageHandler::textDocument_hover(TextDocumentPositionParam &param,$/;"	f	class:ccls::MessageHandler
textDocument_implementation	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^void MessageHandler::textDocument_implementation($/;"	f	class:ccls::MessageHandler
textDocument_onTypeFormatting	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^void MessageHandler::textDocument_onTypeFormatting($/;"	f	class:ccls::MessageHandler
textDocument_rangeFormatting	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_formatting.cc	/^void MessageHandler::textDocument_rangeFormatting($/;"	f	class:ccls::MessageHandler
textDocument_references	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_references.cc	/^void MessageHandler::textDocument_references(JsonReader &reader,$/;"	f	class:ccls::MessageHandler
textDocument_rename	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_rename.cc	/^void MessageHandler::textDocument_rename(RenameParam &param, ReplyOnce &reply) {$/;"	f	class:ccls::MessageHandler
textDocument_signatureHelp	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_signatureHelp.cc	/^void MessageHandler::textDocument_signatureHelp($/;"	f	class:ccls::MessageHandler
textDocument_typeDefinition	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_definition.cc	/^void MessageHandler::textDocument_typeDefinition($/;"	f	class:ccls::MessageHandler
textEdit	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  TextEdit textEdit;$/;"	m	struct:ccls::InsertTextFormat::CompletionItem
text_role	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  int pat_role[kMaxPat], text_role[kMaxText];$/;"	m	class:ccls::FuzzyMatcher
text_set	/home/yl/vim/vim/ccls/ccls/src/fuzzy_match.hh	/^  int pat_set, text_set;$/;"	m	class:ccls::FuzzyMatcher
textwrap	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import textwrap$/;"	i
threadEnter	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void threadEnter() {$/;"	f	namespace:ccls::pipeline
threadLeave	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^void threadLeave() {$/;"	f	namespace:ccls::pipeline
thread_mtx	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^std::mutex thread_mtx;$/;"	m	namespace:ccls::pipeline::__anon32	file:
threads	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int threads = 0;$/;"	m	struct:ccls::Config::Index
tick	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^int64_t tick = 0;$/;"	m	namespace:ccls::pipeline	file:
timeout	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int64_t timeout = 5000;$/;"	m	struct:ccls::Config::Request
timestamp	/home/yl/vim/vim/ccls/ccls/src/pipeline.hh	/^    int64_t timestamp;$/;"	m	struct:ccls::VFS::State
timestamp	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  int64_t timestamp = 0;$/;"	m	struct:ccls::WorkingFile
title	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<std::string> title;$/;"	m	struct:ccls::WorkDoneProgress
title	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::string title;$/;"	m	struct:ccls::__anon18::CodeAction	file:
title	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  std::string title;$/;"	m	struct:ccls::__anon19::Command	file:
to	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^    std::string to;$/;"	m	struct:ccls::TextReplacer::Replacement	file:
toFunc	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^IndexFunc &IndexFile::toFunc(Usr usr) {$/;"	f	class:ccls::IndexFile
toLines	/home/yl/vim/vim/ccls/ccls/src/working_files.cc	/^std::vector<std::string> toLines(const std::string &c) {$/;"	f	namespace:ccls::__anon37
toString	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^std::string IndexFile::toString() {$/;"	f	class:ccls::IndexFile
toString	/home/yl/vim/vim/ccls/ccls/src/lsp.cc	/^std::string Position::toString() const {$/;"	f	class:ccls::Position
toString	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^template <typename T> std::string toString(T &v) {$/;"	f	namespace:ccls::__anon19
toString	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^std::string Pos::toString() {$/;"	f	class:ccls::Pos
toString	/home/yl/vim/vim/ccls/ccls/src/position.cc	/^std::string Range::toString() {$/;"	f	class:ccls::Range
toString	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^std::string toString(const rapidjson::Document &document) {$/;"	f	namespace:ccls
toTextEdit	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^TextEdit toTextEdit(const clang::SourceManager &sm, const clang::LangOptions &l,$/;"	f	namespace:clang::ccls
toTuple	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::tuple<Range, Role> toTuple() const {$/;"	f	struct:ccls::Ref
toTuple	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::tuple<Range, Usr, Kind, Role, Range> toTuple() const {$/;"	f	struct:ccls::ExtentRef
toTuple	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::tuple<Range, Usr, Kind, Role> toTuple() const {$/;"	f	struct:ccls::SymbolRef
toType	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^IndexType &IndexFile::toType(Usr usr) {$/;"	f	class:ccls::IndexFile
toVar	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^IndexVar &IndexFile::toVar(Usr usr) {$/;"	f	class:ccls::IndexFile
token	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  const char *token;$/;"	m	struct:ccls::WorkDoneProgressParam
token	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  const char *token = index_progress_token;$/;"	m	struct:ccls::__anon31::WorkDoneProgressCreateParam	file:
tokenCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    size_t tokenCount_;                     \/\/!< Number of tokens in tokens_.$/;"	m	class:GenericPointer
tokens_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    Token* tokens_;                         \/\/!< A list of tokens.$/;"	m	class:GenericPointer
trace	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  Trace trace = Trace::Off;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeParam	file:
traceMe	/home/yl/vim/vim/ccls/ccls/src/platform_posix.cc	/^void traceMe() {$/;"	f	namespace:ccls
traceMe	/home/yl/vim/vim/ccls/ccls/src/platform_win.cc	/^void traceMe() {}$/;"	f	namespace:ccls
trackDependency	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    int trackDependency = 2;$/;"	m	struct:ccls::Config::Index
traits_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef allocator_type traits_type;$/;"	t	class:StdAllocator
traits_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef std::allocator_traits<allocator_type> traits_type;$/;"	t	class:StdAllocator
transcoder	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    Transcoder<UTF8<char>, UTF8<char> >* transcoder;$/;"	m	struct:Foo	file:
traverse	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/traverseaspointer.cpp	/^void traverse(const Value& v, const Pointer& p) {$/;"	f
triggerCharacter	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  std::optional<std::string> triggerCharacter;$/;"	m	struct:ccls::CompletionContext
triggerCharacters	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    std::vector<const char *> triggerCharacters = {"(", ","};$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::SignatureHelpOptions	file:
triggerCharacters	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    std::vector<const char *> triggerCharacters = {".", ":",  ">", "#",$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::CompletionOptions	file:
triggerKind	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  CompletionTriggerKind triggerKind = CompletionTriggerKind::Invoked;$/;"	m	struct:ccls::CompletionContext
trimCommonPathPrefix	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^size_t trimCommonPathPrefix(const std::string &result,$/;"	f	namespace:ccls::__anon4
trimInPlace	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^void trimInPlace(std::string &s) {$/;"	f	namespace:ccls
trimPath	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^int trimPath(Project *project, std::string &path) {$/;"	f	namespace:ccls::__anon4
tryPopFront	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::optional<T> tryPopFront() {$/;"	f	struct:ccls::ThreadedQueue
tryReplaceDef	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^bool tryReplaceDef(llvm::SmallVectorImpl<Q> &def_list, Q &&def) {$/;"	f	namespace:ccls::__anon34
ts	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  int64_t ts = tick++;$/;"	m	struct:ccls::pipeline::__anon32::IndexRequest	file:
tt	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^tt, code, pre {$/;"	s
tuple_	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  std::tuple<Queue...> tuple_;$/;"	m	struct:ccls::MultiQueueLock
type	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Usr type = 0;$/;"	m	struct:ccls::VarDef
type	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  MessageType type = MessageType::Error;$/;"	m	struct:ccls::MessageType::ShowMessageParam
type	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  Type type = kNone;$/;"	m	struct:ccls::RequestId
type	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^    FileChangeType type;$/;"	m	struct:ccls::InsertTextFormat::DidChangeWatchedFilesParam::Event
type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    type=os.path.abspath,$/;"	v
type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/simplepullreader/simplepullreader.cpp	/^    const char* type;$/;"	m	struct:MyHandler	file:
typeDefinitionProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool typeDefinitionProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
type_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    UTFType type_;$/;"	m	class:AutoUTFInputStream
type_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/encodedstream.h	/^    UTFType type_;$/;"	m	class:AutoUTFOutputStream
type_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    unsigned type_; \/\/ bitmask of kSchemaType$/;"	m	class:internal::Schema
type_usr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::DenseMap<Usr, int, DenseMapInfoForUsr> func_usr, type_usr, var_usr;$/;"	m	struct:ccls::DB
typeless_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SchemaType* typeless_;$/;"	m	class:GenericSchemaDocument
typeless_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* typeless_;$/;"	m	class:internal::Schema
types	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<Usr> types;$/;"	m	struct:ccls::TypeDef
types	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int files, funcs, types, vars;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::DB	file:
types	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::SmallVector<QueryType, 0> types;$/;"	m	struct:ccls::DB
typesDoc_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/rapidjsontest.cpp	/^    Document typesDoc_[8];$/;"	m	class:RapidJson	file:
typesLength_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    size_t typesLength_[8];$/;"	m	class:PerfTest
types_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    char *types_[8];$/;"	m	class:PerfTest
types_declarations	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<DeclRef> types_declarations;$/;"	m	struct:ccls::IndexUpdate
types_def_update	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<std::pair<Usr, QueryType::Def>> types_def_update;$/;"	m	struct:ccls::IndexUpdate
types_derived	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<Usr> types_derived;$/;"	m	struct:ccls::IndexUpdate
types_hint	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  int types_hint;$/;"	m	struct:ccls::IndexUpdate
types_instances	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<Usr> types_instances;$/;"	m	struct:ccls::IndexUpdate
types_removed	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<std::pair<Usr, QueryType::Def>> types_removed;$/;"	m	struct:ccls::IndexUpdate
types_uses	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<Use> types_uses;$/;"	m	struct:ccls::IndexUpdate
u	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^            unsigned u;$/;"	m	struct:GenericValue::Number::U
u	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        }u;$/;"	m	union:GenericValue::Number	typeref:struct:GenericValue::Number::U
u	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^            uint64_t u;$/;"	m	union:internal::Hasher::Number::U
u	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        }u;$/;"	m	struct:internal::Hasher::Number	typeref:union:internal::Hasher::Number::U
u32toa	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	/^inline char* u32toa(uint32_t value, char* buffer) {$/;"	f	namespace:internal
u32toa_naive	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^static void u32toa_naive(uint32_t value, char* buffer) {$/;"	f	file:
u64	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        uint64_t u64;$/;"	m	union:GenericValue::Number
u64toa	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/itoa.h	/^inline char* u64toa(uint64_t value, char* buffer) {$/;"	f	namespace:internal
u64toa_naive	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/itoatest.cpp	/^static void u64toa_naive(uint64_t value, char* buffer) {$/;"	f	file:
u_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/ieee754.h	/^        uint64_t u_;$/;"	m	union:internal::Double::__anon45
uid2file	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::unordered_map<FileID, File> uid2file;$/;"	m	struct:ccls::__anon5::IndexParam	file:
uid2lid_and_path	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^      uid2lid_and_path;$/;"	m	struct:ccls::IndexFile
uid2multi	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  std::unordered_map<FileID, bool> uid2multi;$/;"	m	struct:ccls::__anon5::IndexParam	file:
uint16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned short    uint16_t;$/;"	t
uint32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned int      uint32_t;$/;"	t
uint64_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef unsigned __int64     uint64_t;$/;"	t
uint8_t	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_class_decl.cc	/^typedef unsigned char uint8_t;$/;"	t	file:
uint8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned char     uint8_t;$/;"	t
uint_fast16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint16_t  uint_fast16_t;$/;"	t
uint_fast32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint32_t  uint_fast32_t;$/;"	t
uint_fast64_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint64_t  uint_fast64_t;$/;"	t
uint_fast8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint8_t   uint_fast8_t;$/;"	t
uint_least16_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint16_t  uint_least16_t;$/;"	t
uint_least32_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint32_t  uint_least32_t;$/;"	t
uint_least64_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint64_t  uint_least64_t;$/;"	t
uint_least8_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint8_t   uint_least8_t;$/;"	t
uintmax_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^typedef uint64_t  uintmax_t;$/;"	t
uintptr_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef _W64 unsigned int uintptr_t;$/;"	t
uintptr_t	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/stdint.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t
uniqueItems_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool uniqueItems_;$/;"	m	class:internal::Schema
unique_ptr	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter.cc	/^class unique_ptr {};$/;"	c	file:
unique_ptr	/home/yl/vim/vim/ccls/ccls/index_tests/usage/type_usage_as_template_parameter_simple.cc	/^class unique_ptr {};$/;"	c	file:
uniquify	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^template <typename T> void uniquify(std::vector<T> &a) {$/;"	f	namespace:ccls
unittest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import unittest$/;"	i
unlock	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  void unlock() { unlock_impl(typename std::index_sequence_for<Queue...>{}); }$/;"	f	struct:ccls::MultiQueueLock
unlock_impl	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  template <size_t... Is> void unlock_impl(std::index_sequence<Is...>) {$/;"	f	struct:ccls::MultiQueueLock
update	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^int DB::update(QueryFile::DefUpdate &&u) {$/;"	f	class:ccls::DB
update	/home/yl/vim/vim/ccls/ccls/src/query.cc	/^void DB::update(const Lid2file_id &lid2file_id, int file_id,$/;"	f	class:ccls::DB
update	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^  void update(Twine path, ErrorOr<llvm::vfs::Status> s) {$/;"	f	struct:clang::ccls::PreambleStatCache
updateTestExpectation	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^void updateTestExpectation(const std::string &filename,$/;"	f	namespace:ccls
uri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  DocumentUri uri;$/;"	m	struct:ccls::Location
uri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  DocumentUri uri;$/;"	m	struct:ccls::TextDocumentIdentifier
uri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  DocumentUri uri;$/;"	m	struct:ccls::TextDocumentItem
uri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  DocumentUri uri;$/;"	m	struct:ccls::VersionedTextDocumentIdentifier
uri	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  DocumentUri uri;$/;"	m	struct:ccls::WorkspaceFolder
uri	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  DocumentUri uri;$/;"	m	struct:ccls::__anon7::CclsSemanticHighlight	file:
uri	/home/yl/vim/vim/ccls/ccls/src/message_handler.cc	/^  DocumentUri uri;$/;"	m	struct:ccls::__anon7::CclsSetSkippedRanges	file:
uri	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^    DocumentUri uri;$/;"	m	struct:ccls::InsertTextFormat::DidChangeWatchedFilesParam::Event
uri	/home/yl/vim/vim/ccls/ccls/src/pipeline.cc	/^  DocumentUri uri;$/;"	m	struct:ccls::__anon31::PublishDiagnosticParam	file:
uri_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SValue uri_;                            \/\/ Schema document URI$/;"	m	class:GenericSchemaDocument
uri_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SValue uri_;$/;"	m	class:internal::Schema
uri_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    Ch* uri_;    \/\/ Everything$/;"	m	class:GenericUri
usage	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_forward_decl_func.cc	/^void usage() {$/;"	f
usage	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_forward_decl_method.cc	/^void usage() {$/;"	f
useMultiVersion	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  bool useMultiVersion(FileID fid) {$/;"	f	struct:ccls::__anon5::IndexParam
used	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_addr_func.cc	/^void used() {}$/;"	f
user	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_addr_func.cc	/^void user() {$/;"	f
user	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_addr_method.cc	/^void user() {$/;"	f
user	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_call_method.cc	/^void user() {$/;"	f
uses	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Use> uses;$/;"	m	struct:ccls::IndexFunc
uses	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Use> uses;$/;"	m	struct:ccls::IndexType
uses	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::vector<Use> uses;$/;"	m	struct:ccls::IndexVar
uses	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<Use> uses;$/;"	m	struct:ccls::QueryFunc
uses	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<Use> uses;$/;"	m	struct:ccls::QueryType
uses	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<Use> uses;$/;"	m	struct:ccls::QueryVar
usr	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^    Usr usr;$/;"	m	struct:ccls::__anon5::IndexParam::DeclInfo	file:
usr	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Usr usr;$/;"	m	struct:ccls::SymbolIdx
usr	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  Usr usr;$/;"	m	struct:ccls::SymbolRef
usr	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon9::CallType::Out_cclsCall	file:
usr	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_call.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon9::CallType::Param	file:
usr	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon11::Out_cclsInheritance	file:
usr	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_inheritance.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon11::Param	file:
usr	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon12::Out_cclsMember	file:
usr	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_member.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon12::Param	file:
usr	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  Usr usr;$/;"	m	struct:ccls::__anon19::Cmd_xref	file:
usr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Usr usr;$/;"	m	struct:ccls::QueryFunc
usr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Usr usr;$/;"	m	struct:ccls::QueryType
usr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Usr usr;$/;"	m	struct:ccls::QueryVar
usr2func	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::unordered_map<Usr, IndexFunc> usr2func;$/;"	m	struct:ccls::IndexFile
usr2type	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::unordered_map<Usr, IndexType> usr2type;$/;"	m	struct:ccls::IndexFile
usr2var	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  std::unordered_map<Usr, IndexVar> usr2var;$/;"	m	struct:ccls::IndexFile
utf16	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF16<wchar_t>* utf16;$/;"	m	struct:Foo	file:
utf16be	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF16BE<wchar_t>* utf16be;$/;"	m	struct:Foo	file:
utf16le	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF16LE<wchar_t>* utf16le;$/;"	m	struct:Foo	file:
utf32	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF32<unsigned>* utf32;$/;"	m	struct:Foo	file:
utf32be	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF32BE<unsigned>* utf32be;$/;"	m	struct:Foo	file:
utf32le	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF32LE<unsigned>* utf32le;$/;"	m	struct:Foo	file:
utf8	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    UTF8<char>* utf8;$/;"	m	struct:Foo	file:
utf8d	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/misctest.cpp	/^static const unsigned char utf8d[] = {$/;"	v	file:
utf8d	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodingstest.cpp	/^static const unsigned char utf8d[] = {$/;"	v	file:
v	/home/yl/vim/vim/ccls/ccls/index_tests/types/anonymous_struct.cc	/^  float v[3];$/;"	m	union:vector3	file:
v_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/lookaheadparser/lookaheadparser.cpp	/^    Value v_;$/;"	m	class:LookaheadParserHandler	file:
valid	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool valid() const { return range.valid(); }$/;"	f	struct:ccls::Ref
valid	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  bool valid() const { return range.valid(); }$/;"	f	struct:ccls::SymbolRef
valid	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  bool valid() const { return type != kNone; }$/;"	f	struct:ccls::RequestId
valid	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool valid() const { return column >= 0; }$/;"	f	struct:ccls::Pos
valid	/home/yl/vim/vim/ccls/ccls/src/position.hh	/^  bool valid() const { return start.valid(); }$/;"	f	struct:ccls::Range
valid	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  bool valid() const { return storage.valid(); }$/;"	f	class:ccls::Maybe
valid_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^        bool valid_;        \/\/!< Whether the parsing is valid.$/;"	m	class:GenericPointer::PercentDecodeStream
valid_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool valid_;$/;"	m	class:GenericSchemaValidator
validateRecord	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^bool validateRecord(const RecordDecl *rd) {$/;"	f	namespace:ccls::__anon5
validatorCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType validatorCount;$/;"	m	struct:internal::SchemaValidationContext
validatorCount_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    SizeType validatorCount_;$/;"	m	class:internal::Schema
validators	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^    validators = getattr($/;"	v
validators	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ISchemaValidator** validators;$/;"	m	struct:internal::SchemaValidationContext
value	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  WorkDoneProgress value;$/;"	m	struct:ccls::WorkDoneProgressParam
value	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::string value;$/;"	m	struct:ccls::RequestId
value	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_hover.cc	/^  std::string value;$/;"	m	struct:ccls::__anon26::MarkedString	file:
value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^    const Value* value;$/;"	m	struct:JsonReaderStackItem	file:
value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    GenericValue<Encoding, Allocator> value;    \/\/!< value of member.$/;"	m	class:GenericMember
value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/rapidjson.h	/^template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };$/;"	e	enum:STATIC_ASSERTION_FAILURE::__anon48
value	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    Value* value;$/;"	m	struct:Foo	file:
valueCount	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/writer.h	/^        size_t valueCount;  \/\/!< number of values in this level$/;"	m	struct:Writer::Level
valuePatternValidatorType	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    PatternValidatorType valuePatternValidatorType;$/;"	m	struct:internal::SchemaValidationContext
valueSchema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    const SchemaType* valueSchema;$/;"	m	struct:internal::SchemaValidationContext
valueUniqueness	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    bool valueUniqueness;$/;"	m	struct:internal::SchemaValidationContext
value_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueType& value_;$/;"	m	class:GenericArray
value_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ValueType& value_;$/;"	m	class:GenericObject
value_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename allocator_type::value_type value_type;$/;"	t	class:StdAllocator
value_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/allocators.h	/^    typedef typename traits_type::value_type        value_type;$/;"	t	class:StdAllocator
value_type	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    typedef ValueType      value_type;$/;"	t	class:GenericMemberIterator
var	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_class_var_usage_folded_into_one.cc	/^  static constexpr int var = 3;$/;"	m	struct:Foo	file:
var	/home/yl/vim/vim/ccls/ccls/index_tests/templates/template_var_usage_folded_into_one.cc	/^T var = T();$/;"	v
varInt	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  int64_t varInt() {$/;"	f	struct:ccls::BinaryReader
varInt	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  void varInt(int64_t n) { varUInt(uint64_t(n) << 1 ^ n >> 63); }$/;"	f	struct:ccls::BinaryWriter
varUInt	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  uint64_t varUInt() {$/;"	f	struct:ccls::BinaryReader
varUInt	/home/yl/vim/vim/ccls/ccls/src/serializer.hh	/^  void varUInt(uint64_t n) {$/;"	f	struct:ccls::BinaryWriter
var_usr	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::DenseMap<Usr, int, DenseMapInfoForUsr> func_usr, type_usr, var_usr;$/;"	m	struct:ccls::DB
vars	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<Usr> vars;$/;"	m	struct:ccls::FuncDef
vars	/home/yl/vim/vim/ccls/ccls/src/indexer.hh	/^  V<std::pair<Usr, int64_t>> vars;$/;"	m	struct:ccls::TypeDef
vars	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_info.cc	/^    int files, funcs, types, vars;$/;"	m	struct:ccls::__anon10::Out_cclsInfo::DB	file:
vars	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  llvm::SmallVector<QueryVar, 0> vars;$/;"	m	struct:ccls::DB
vars_declarations	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<DeclRef> vars_declarations;$/;"	m	struct:ccls::IndexUpdate
vars_def_update	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<std::pair<Usr, QueryVar::Def>> vars_def_update;$/;"	m	struct:ccls::IndexUpdate
vars_hint	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  int vars_hint;$/;"	m	struct:ccls::IndexUpdate
vars_removed	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  std::vector<std::pair<Usr, QueryVar::Def>> vars_removed;$/;"	m	struct:ccls::IndexUpdate
vars_uses	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^  Update<Use> vars_uses;$/;"	m	struct:ccls::IndexUpdate
vc	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^vector<char> vc;$/;"	v
vector	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^class vector {$/;"	c	file:
vector	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^class vector<T*> {};$/;"	c	file:
vector	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^class vector<Z2> {$/;"	c	file:
vector3	/home/yl/vim/vim/ccls/ccls/index_tests/types/anonymous_struct.cc	/^union vector3 {$/;"	u	file:
verbosity	/home/yl/vim/vim/ccls/ccls/src/log.cc	/^Verbosity verbosity;$/;"	m	namespace:ccls::log	file:
verbosity_	/home/yl/vim/vim/ccls/ccls/src/log.hh	/^  int verbosity_;$/;"	m	struct:ccls::log::Message
verifySerializeToFrom	/home/yl/vim/vim/ccls/ccls/src/test.cc	/^void verifySerializeToFrom(IndexFile *file) {$/;"	f	namespace:ccls
version	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  int version;$/;"	m	struct:ccls::TextDocumentItem
version	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^  std::optional<int> version;$/;"	m	struct:ccls::VersionedTextDocumentIdentifier
version	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    const char *version = CCLS_VERSION;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeResult::ServerInfo	file:
version	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  int version = 0;$/;"	m	struct:ccls::WorkingFile
vfs	/home/yl/vim/vim/ccls/ccls/src/indexer.cc	/^  VFS &vfs;$/;"	m	struct:ccls::__anon5::IndexParam	file:
vfs	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  VFS *vfs = nullptr;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
vfs	/home/yl/vim/vim/ccls/ccls/src/sema_manager.cc	/^namespace clang::vfs {$/;"	n	class:clang	file:
vip	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^vector<int*> vip;$/;"	v
volatile	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.15.5/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
volatile	/home/yl/vim/vim/ccls/ccls/Release/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
vz1	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^vector<Z1> vz1;$/;"	v
vz2	/home/yl/vim/vim/ccls/ccls/index_tests/templates/specialization.cc	/^vector<Z2> vz2;$/;"	v
wait	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  bool wait(std::atomic<bool> &quit, BaseThreadQueue... queues) {$/;"	f	struct:ccls::MultiQueueWaiter
waitUntil	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  void waitUntil(std::chrono::steady_clock::time_point t,$/;"	f	struct:ccls::MultiQueueWaiter
wait_until	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^    int64_t wait_until;$/;"	m	struct:ccls::SemaManager::DiagTask
waiter_	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  MultiQueueWaiter *waiter_;$/;"	m	struct:ccls::ThreadedQueue
warnings	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/bin/jsonschema/bin/jsonschema_suite	/^import warnings$/;"	i
watchers	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    std::vector<FileSystemWatcher> watchers = {{}};$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::DidChangeWatchedFilesRegistration::Option	file:
wcstoimax	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	311;"	d
wcstoumax	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/msinttypes/inttypes.h	312;"	d
wfile	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^  WorkingFile *wfile;$/;"	m	struct:ccls::__anon19::CommonCodeLensParams	file:
wfiles	/home/yl/vim/vim/ccls/ccls/src/message_handler.hh	/^  WorkingFiles *wfiles = nullptr;$/;"	m	struct:ccls::InsertTextFormat::MessageHandler
wfiles	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  WorkingFiles *wfiles;$/;"	m	struct:ccls::SemaManager
wfiles	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  WorkingFiles *wfiles;$/;"	m	struct:ccls::Session
whitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      std::vector<std::string> whitelist;$/;"	m	struct:ccls::Config::Completion::Include
whitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> whitelist;$/;"	m	struct:ccls::Config::Diagnostics
whitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> whitelist;$/;"	m	struct:ccls::Config::Highlight
whitelist	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    std::vector<std::string> whitelist;$/;"	m	struct:ccls::Config::Index
whitelist	/home/yl/vim/vim/ccls/ccls/src/messages/ccls_reload.cc	/^  std::vector<std::string> whitelist;$/;"	m	struct:ccls::__anon14::Param	file:
whitelist	/home/yl/vim/vim/ccls/ccls/src/utils.hh	/^  std::vector<Matcher> whitelist, blacklist;$/;"	m	struct:ccls::GroupMatch
whitespace_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    char *whitespace_;$/;"	m	class:PerfTest
whitespace_length_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/perftest.h	/^    size_t whitespace_length_;$/;"	m	class:PerfTest
width: 180px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	width: 180px;$/;"	s
width: 250px	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	width: 250px;$/;"	s
width: 250px 	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/doc/misc/doxygenextra.css	/^	width: 250px !important;$/;"	s
width_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    double width_, height_;$/;"	m	class:Box	file:
willSave	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool willSave = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::TextDocumentSyncOptions	file:
willSaveWaitUntil	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^    bool willSaveWaitUntil = false;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap::TextDocumentSyncOptions	file:
window_showMessage	/home/yl/vim/vim/ccls/ccls/src/lsp.hh	/^constexpr char window_showMessage[] = "window\/showMessage";$/;"	m	namespace:ccls
withEntity	/home/yl/vim/vim/ccls/ccls/src/query.hh	/^template <typename Fn> void withEntity(DB *db, SymbolIdx sym, Fn &&fn) {$/;"	f	namespace:ccls
withLock	/home/yl/vim/vim/ccls/ccls/src/sema_manager.hh	/^  template <typename Fn> void withLock(Fn &&fn) {$/;"	f	struct:ccls::CompleteConsumerCache
withLock	/home/yl/vim/vim/ccls/ccls/src/working_files.hh	/^  template <typename Fn> void withLock(Fn &&fn) {$/;"	f	struct:ccls::WorkingFiles
workspace	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^    } workspace;$/;"	m	struct:ccls::Config::ServerCap	typeref:struct:ccls::Config::ServerCap::Workspace
workspace	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  Config::ServerCap::Workspace workspace;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
workspace	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  WorkspaceClientCap workspace;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ClientCap	file:
workspaceEdit	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::optional<WorkspaceEdit> workspaceEdit;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::WorkspaceClientCap	file:
workspaceFolders	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^      } workspaceFolders;$/;"	m	struct:ccls::Config::ServerCap::Workspace	typeref:struct:ccls::Config::ServerCap::Workspace::WorkspaceFolders
workspaceFolders	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  std::vector<std::pair<std::string, std::string>> workspaceFolders;$/;"	m	struct:ccls::Config
workspaceFolders	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  std::vector<WorkspaceFolder> workspaceFolders;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::InitializeParam	file:
workspaceSymbol	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } workspaceSymbol;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::WorkspaceSymbol
workspaceSymbolProvider	/home/yl/vim/vim/ccls/ccls/src/messages/initialize.cc	/^  bool workspaceSymbolProvider = true;$/;"	m	struct:ccls::__anon17::TextDocumentSyncKind::ServerCap	file:
workspace_didChangeConfiguration	/home/yl/vim/vim/ccls/ccls/src/messages/workspace.cc	/^void MessageHandler::workspace_didChangeConfiguration(EmptyParam &) {$/;"	f	class:ccls::MessageHandler
workspace_didChangeWatchedFiles	/home/yl/vim/vim/ccls/ccls/src/messages/workspace.cc	/^void MessageHandler::workspace_didChangeWatchedFiles($/;"	f	class:ccls::MessageHandler
workspace_didChangeWorkspaceFolders	/home/yl/vim/vim/ccls/ccls/src/messages/workspace.cc	/^void MessageHandler::workspace_didChangeWorkspaceFolders($/;"	f	class:ccls::MessageHandler
workspace_executeCommand	/home/yl/vim/vim/ccls/ccls/src/messages/textDocument_code.cc	/^void MessageHandler::workspace_executeCommand(JsonReader &reader,$/;"	f	class:ccls::MessageHandler
workspace_symbol	/home/yl/vim/vim/ccls/ccls/src/messages/workspace.cc	/^void MessageHandler::workspace_symbol(WorkspaceSymbolParam &param,$/;"	f	class:ccls::MessageHandler
writeToFile	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^void writeToFile(const std::string &filename, const std::string &content) {$/;"	f	namespace:ccls
writer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^    Writer<StringBuffer, UTF8<char>, UTF8<char>, CrtAllocator, 0>* writer;$/;"	m	struct:Foo	file:
x	/home/yl/vim/vim/ccls/ccls/index_tests/enums/enum_usage.cc	/^Foo x = Foo::A;$/;"	m	class:Foo	file:
x	/home/yl/vim/vim/ccls/ccls/index_tests/macros/foo.cc	/^int x = A;$/;"	v
x	/home/yl/vim/vim/ccls/ccls/index_tests/templates/member_ref_in_template.cc	/^  T x;$/;"	m	struct:C	file:
x	/home/yl/vim/vim/ccls/ccls/index_tests/types/anonymous_struct.cc	/^  struct { float x, y, z; };$/;"	m	struct:vector3::__anon2	file:
x	/home/yl/vim/vim/ccls/ccls/index_tests/usage/func_usage_class_inline_var_def.cc	/^  int x = helper();$/;"	m	class:Foo	file:
x	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member.cc	/^  int x;$/;"	m	class:Foo	file:
x	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member_static.cc	/^  static int x;$/;"	m	struct:Foo	file:
x_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    double x_, y_;$/;"	m	class:Shape	file:
xref	/home/yl/vim/vim/ccls/ccls/src/config.hh	/^  } xref;$/;"	m	struct:ccls::Config	typeref:struct:ccls::Config::Xref
y	/home/yl/vim/vim/ccls/ccls/index_tests/types/anonymous_struct.cc	/^  struct { float x, y, z; };$/;"	m	struct:vector3::__anon2	file:
y	/home/yl/vim/vim/ccls/ccls/index_tests/usage/var_usage_class_member.cc	/^  int y;$/;"	m	class:Foo	file:
y_	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    double x_, y_;$/;"	m	class:Shape	file:
z	/home/yl/vim/vim/ccls/ccls/index_tests/types/anonymous_struct.cc	/^  struct { float x, y, z; };$/;"	m	struct:vector3::__anon2	file:
~AssertException	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/unittest.cpp	/^AssertException::~AssertException() throw() {}$/;"	f	class:AssertException
~AsyncDocumentParser	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/parsebyparts/parsebyparts.cpp	/^    ~AsyncDocumentParser() {$/;"	f	class:AsyncDocumentParser
~Base0	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/multiple_base_functions.cc	/^  virtual ~Base0() { }$/;"	f	struct:Base0
~Base1	/home/yl/vim/vim/ccls/ccls/index_tests/inheritance/multiple_base_functions.cc	/^  virtual ~Base1() { }$/;"	f	struct:Base1
~Box	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    ~Box() {}$/;"	f	class:Box
~Canvas	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    ~Canvas() { Clear(); }$/;"	f	class:Canvas
~Circle	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    ~Circle() {}$/;"	f	class:Circle
~ClearStackOnExit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^        ~ClearStackOnExit() { d_.ClearStack(); }$/;"	f	struct:GenericDocument::ClearStackOnExit
~ClearStackOnExit	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^        ~ClearStackOnExit() { r_.ClearStack(); }$/;"	f	struct:GenericReader::ClearStackOnExit
~Dependent	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^Dependent::~Dependent() {$/;"	f	class:Dependent
~Employee	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^Employee::~Employee() {$/;"	f	class:Employee
~EncodedStreamTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/encodedstreamtest.cpp	/^EncodedStreamTest::~EncodedStreamTest() {}$/;"	f	class:EncodedStreamTest
~FileStreamTest	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/filestreamtest.cpp	/^FileStreamTest::~FileStreamTest() {}$/;"	f	class:FileStreamTest
~Foo	/home/yl/vim/vim/ccls/ccls/index_tests/constructors/destructor.cc	/^  ~Foo() {};$/;"	f	class:Foo
~Foo	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/fwdtest.cpp	/^Foo::~Foo() {$/;"	f	class:Foo
~GenericArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ~GenericArray() {}$/;"	f	class:GenericArray
~GenericDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ~GenericDocument() {$/;"	f	class:GenericDocument
~GenericObject	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ~GenericObject() {}$/;"	f	class:GenericObject
~GenericPointer	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/pointer.h	/^    ~GenericPointer() {$/;"	f	class:GenericPointer
~GenericRegex	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    ~GenericRegex()$/;"	f	class:internal::GenericRegex
~GenericRegexSearch	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/regex.h	/^    ~GenericRegexSearch() {$/;"	f	class:internal::GenericRegexSearch
~GenericSchemaDocument	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ~GenericSchemaDocument() {$/;"	f	class:GenericSchemaDocument
~GenericSchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ~GenericSchemaValidator() {$/;"	f	class:GenericSchemaValidator
~GenericUri	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/uri.h	/^    ~GenericUri() {$/;"	f	class:GenericUri
~GenericValue	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/document.h	/^    ~GenericValue() {$/;"	f	class:GenericValue
~IGenericRemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual ~IGenericRemoteSchemaDocumentProvider() {}$/;"	f	class:IGenericRemoteSchemaDocumentProvider
~ISchemaStateFactory	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual ~ISchemaStateFactory() {}$/;"	f	class:internal::ISchemaStateFactory
~ISchemaValidator	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual ~ISchemaValidator() {}$/;"	f	class:internal::ISchemaValidator
~IValidationErrorHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    virtual ~IValidationErrorHandler() {}$/;"	f	class:internal::IValidationErrorHandler
~IncludeComplete	/home/yl/vim/vim/ccls/ccls/src/include_complete.cc	/^IncludeComplete::~IncludeComplete() {$/;"	f	class:ccls::IncludeComplete
~JsonReader	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonReader::~JsonReader() {$/;"	f	class:JsonReader
~JsonWriter	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archiver.cpp	/^JsonWriter::~JsonWriter() { $/;"	f	class:JsonWriter
~Matcher	/home/yl/vim/vim/ccls/ccls/src/utils.cc	/^Matcher::~Matcher() {}$/;"	f	class:ccls::Matcher
~Message	/home/yl/vim/vim/ccls/ccls/src/log.cc	/^Message::~Message() {$/;"	f	class:ccls::log::Message
~MultiQueueLock	/home/yl/vim/vim/ccls/ccls/src/threaded_queue.hh	/^  ~MultiQueueLock() { unlock(); }$/;"	f	struct:ccls::MultiQueueLock
~OutputStringStream	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/documenttest.cpp	/^OutputStringStream::~OutputStringStream() {}$/;"	f	class:OutputStringStream
~ParseStringHandler	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/readertest.cpp	/^    ~ParseStringHandler() { EXPECT_TRUE(str_ != 0); if (copy_) free(const_cast<typename Encoding::Ch*>(str_)); }$/;"	f	struct:ParseStringHandler
~PatternProperty	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        ~PatternProperty() {$/;"	f	struct:internal::Schema::PatternProperty
~Person	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/serialize/serialize.cpp	/^Person::~Person() {$/;"	f	class:Person
~Property	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        ~Property() { AllocatorType::Free(dependencies); }$/;"	f	struct:internal::Schema::Property
~RemoteSchemaDocumentProvider	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/schematest.cpp	/^    ~RemoteSchemaDocumentProvider() {$/;"	f	class:RemoteSchemaDocumentProvider
~Schema	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ~Schema() {$/;"	f	class:internal::Schema
~SchemaArray	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        ~SchemaArray() { AllocatorType::Free(schemas); }$/;"	f	struct:internal::Schema::SchemaArray
~SchemaEntry	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^        ~SchemaEntry() {$/;"	f	struct:GenericSchemaDocument::SchemaEntry
~SchemaValidationContext	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/schema.h	/^    ~SchemaValidationContext() {$/;"	f	struct:internal::SchemaValidationContext
~Shape	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/example/archiver/archivertest.cpp	/^    virtual ~Shape() {}$/;"	f	class:Shape
~Stack	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/internal/stack.h	/^    ~Stack() {$/;"	f	class:internal::Stack
~StreamLocalCopy	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/include/rapidjson/reader.h	/^    ~StreamLocalCopy() { original_ = s; }$/;"	f	class:internal::StreamLocalCopy
~TestStdAllocatorData	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/unittest/allocatorstest.cpp	/^    ~TestStdAllocatorData()$/;"	f	struct:TestStdAllocatorData
~TestSuite	/home/yl/vim/vim/ccls/ccls/third_party/rapidjson/test/perftest/schematest.cpp	/^        ~TestSuite() {$/;"	f	struct:Schema::TestSuite
