#include <stddef.h>
#include <stdlib.h>
int findLength(int* nums1, int nums1Size, int* nums2, int nums2Size){
    int maxsize;
    int *temp=NULL;
    int rec=0;
    int zeros=0;    //全局连续子串最大长度

    if(nums1Size>=nums2Size){
        maxsize=nums1Size;
        rec=1;
        temp=(int*)malloc(sizeof(int)*maxsize);
        for(int i=0;i<maxsize;i++){
            if(i<=nums2Size-1){
                *(temp+i)=*(nums2+i);
            }else{
                *(temp+i)=0;
            };
        }
    }else{
        maxsize=nums2Size;
        rec=2;
        temp=(int*)malloc(sizeof(int)*maxsize);
        for(int i=0;i<maxsize;i++){
            if(i<=nums1Size-1){
                *(temp+i)=*(nums1+i);
            }else{
                *(temp+i)=0;
            };
        }
    }   //换为等长


    int len=0;
    int *res=(int *)malloc(sizeof(int)*maxsize);
    for(int j=0;j<maxsize;j++){  //循环的趟数
        for(int i=0;i<maxsize;i++){
            printf("_%d_", *(temp+i));
        };
        printf("-\n");
        for(int n=0;n<maxsize;n++){
            if(rec==1){
                printf("_%d_",*(nums1+n));
            }else{
                printf("_%d_",*(nums2+n));
            };                                      //这一趟的结果
        }

        int thismaxlen=0;  //这一趟最大长度
        for(int n=0;n<maxsize;n++){
            if(rec==1){
                *(res+n)=*(temp+n)-*(nums1+n);
            }else{
                *(res+n)=*(temp+n)-*(nums2+n);
            };                                      //这一趟的结果
        }
        printf("\n");
        for(int i=0;i<maxsize;i++){
            printf("_%d_", *(res+i));
        };

        for(int k=0;k<maxsize;k++){
            int resthisroll=0;        //当前排序的结果最大连续0数
            /*for(int m=0;m<maxsize;m++){   //遍历结果序列，找到0
                int nowzero=0;          //当前0对应的最长0 的数
                if(*(res+m)==0){
                    int jj=0;
                    while(*(res+m+jj)==0&&m+jj<maxsize){
                        nowzero++;
                        jj++;
                    };
                    if(resthisroll<nowzero){
                        resthisroll=nowzero;
                    };
                    continue;
                }else{
                    continue;
                }
            }
            if(zeros<resthisroll){
                zeros=resthisroll;
            }
            for(int q=0;q<maxsize-1;q++){
                int temppp=*(res+q);
                *(res+q)=*(res+q+1);
                *(res+q+1)=temppp;
            };*/
           // printf("no=0\n");
            if(*(res+k)==0){
                printf("=0\n");
                int continuezeros=0;
                int rolelen=maxsize;
                int jj=0;
                while(*(res+jj+k)==0&&rolelen>0){
                    if(jj+k==maxsize-1){
                        jj=-k;
                        printf("out");
                    }else{
                        jj++;
                        printf("in");
                    }
                    printf("+");
                    continuezeros++;
                    rolelen--;
                }
                printf("C0%d\n", continuezeros);
                /*int jj=0;
                while(*(res+k)==0){
                    if(k==maxsize-1){
                        printf("jj=0\n");
                        jj=0;
                        resthisroll++;
                    }else{
                        printf("jj++\n");
                        jj++;
                        resthisroll++;
                    }
                }*/
                if(resthisroll<continuezeros){
                    resthisroll=continuezeros;
                }
            }else{
                printf("no=0\n");
                continue;
            }
            //printf("this zeros:%d\n", resthisroll);
            if(zeros<resthisroll){
                zeros=resthisroll;
            }
        }




//换值
        for(int p=0;p<maxsize-1;p++){
            int tempp=*(temp+p);
            *(temp+p)=*(temp+p+1);
            *(temp+p+1)=tempp;
        };
        printf("\n");


    }
    return zeros;

}


int main(){
    int a[]={0, 0, 0, 0, 1};
    int b[]={1, 0, 0, 0, 0};
printf("\n\n\n%d", findLength(&a[0], 5, &b[0], 5));
    return 0;
}
