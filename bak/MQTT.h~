#include <string>
#include <map>
#include <sstream>
#include <iostream>
using namespace std;
extern void get_byte(char onebyte, char* sav_addr);
void get_2byte_asc(const char* onebyte, char* sav_addr, int* length);
extern unsigned int get_2bytes(unsigned char* addr);//huo qu addr qi liang ge byte de zhi 
extern unsigned int get_int(unsigned char* addr);//4
extern unsigned int get_int_rev(unsigned char* addr);//4
extern void val_u_deal_tool(unsigned int val, char* c, int* buf_nr_p);
extern void val_deal_tool(int val, char* c, int* buf_nr_p);
/*
void get_2byte_asc(const char* start_addr, char* sav_addr, int* length) {
    char a[10];
    *length = 4;
    get_byte(*start_addr, a);
    get_byte(*(start_addr+1), a+2);
    if (a[0] == '0') (*length)--;
    if (a[0] == '0' && a[1] == '0') (*length)--;
    if (a[0] == '0' && a[1] == '0' && a[2] == '0') (*length)--;
    int j = 4 - (*length);
    for (int i = 0;i < (*length);i++) {
        *(sav_addr + i) = a[j];
        j++;
    }
}*/

enum MQTT_parts {
    fixedHead,
    variableHead,
    payload
};


class MQTT {
private:
    ofstream* of;
    ofstream* cus;
public:
    void writemesg(const char *, int length);
    MQTT(unsigned char* buf, ofstream* of,ofstream *cus, int *version);
    ~MQTT();
    int writeType(unsigned int val);
};
void MQTT::writemesg(const char *msg, int length){
    if(strcmp(msg, "\n")==0){
        cus->write(" ", 1);
        of->write("\n", 1);
    }else{
        of->write(msg, length);
        cus->write(msg, length);
    }
}
int MQTT::writeType(unsigned int val) {
    switch (val)
    {
    case 0: {
        //of->write("Reserved", 8);
        writemesg("Reserved", 8);
        return 0;
        break;
    }
    case 1: {
        writemesg("Connect Command", 15);
        return 1;
        break;
    }
    case 2: {
        writemesg("Connect Ack", 11);
        return 2;
        break;
    }
    case 3: {
        writemesg("Publish Message", 15);
        return 3;
        break;
    }
    case 4: {
        writemesg("Publish Ack", 11);
        return 4;
        break;
    }
    case 5: {
        writemesg("Publish received", 16);
        return 5;
        break;
    }
    case 6: {
        writemesg("Publish release", 15);
        return 6;
        break;
    }
    case 7: {
        writemesg("Publish complete", 16);
        return 7;
        break;
    }
    case 8: {
        writemesg("Subscribe Request", 17);
        return 8;
        break;
    }
    case 9: {
        writemesg("Subscribe Ack", 13);
        return 9;
        break;
    }
    case 10: {
        writemesg("Unsubscribe Request", 19);
        return 10;
        break;
    }
    case 11: {
        writemesg("Unsubscribe Ack", 15);
        return 11;
        break;
    }
    case 12: {
        writemesg("PING Request", 12);
        return 12;
        break;
    }
    case 13: {
        writemesg("PING Response", 13);
        return 13;
        break;
    }
    case 14: {
        writemesg("Disconnect Request", 18);
        return 14;
        break;
    }
    case 15: {
        writemesg("Authentication Exchange", 23);
        return 15;
        break;
    }
    default: {
        writemesg("OPT(", 4);
        char a[10];
        int len = 0;
        val_deal_tool(val, a, &len);
        writemesg(a, len);
        writemesg(")", 1);
        return 0;
        //cout << "this queries name is going to include" << endl;
    }
    }
    //return 0;
}


MQTT::MQTT(unsigned char* msg, ofstream* of, ofstream *cus,int* version) {
    
    //cout << " *(msg)" << int(*(msg)) << endl;
    this->of = of;
    this->cus=cus;
    MQTT_parts part = fixedHead;
    int turn = 0;
    string tmp = {};
    int end = 0;
    //int dlen = 0;
    char a[20] = {0};
    int npart = 0;
    unsigned int val = 0;
    //int version = 0;
    int alen = 0;
    int pktlen = 0;
    int QosLevel = 0;
    writemesg("\n", 1);
    for (int c = 0;; c++) {
        if (end == 1) break;
        switch (part)
        {
        case fixedHead:
        {
            tmp.push_back(*(msg + c));
            const char* tempp = tmp.c_str();
            writemesg("MQTT Header Flag:", 17);
            writemesg("\n", 1);
            
            val = ((int)((*tempp) >> 4)) & 0x0f;
            writemesg("  Message Type:", 15);
            npart = writeType(val);
            writemesg("\n", 1);
            if (npart == 3) {
                int record = (int)(((*tempp) & 0x08) >> 3);
                writemesg("  DUP Flag:", 11);
                if(record == 1) writemesg("Set", 3);
                else if(record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                record = (int)(((*tempp) & 0x06) >> 1);
                QosLevel = record;
                writemesg("  QoS Level:", 12);
                if(record == 0) writemesg("At most once delivery(", 22);
                else if(record == 1) writemesg("At least once delivery(", 23);
                else if (record == 2) writemesg("Exactly once delivery(", 22);
                int len = 0;
                val_deal_tool(record, a, &len);
                writemesg(a, len);
                writemesg(")", 1);
                writemesg("\n", 1);
                
                record = (int)((*tempp) & 0x01);
                writemesg("  Retain:", 9);
                if (record == 1) writemesg("Set", 3);
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);
            }
            else {
                writemesg("  Reserved:", 11);
                val = (int)((*tempp) & 0x0f);
                int len = 0;
                val_deal_tool(val, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);
            }
            writemesg("MQTT Message Length:", 20);
            c += 1;
            tmp = {};
            tmp.push_back(*(msg + c));
            const char* tempp1 = tmp.c_str();
            int record = (int)(*tempp1);
            pktlen = record;
            int len = 0;
            val_deal_tool(record, a, &len);
            writemesg(a, len);
            writemesg("\n", 1);
            //part = variableHead;
            if(record == 0) end = 1;
            else part = variableHead;
            tmp = {};
            turn = 0;
            //dlen = 0;
            val = 0;
            break;
        }
        case variableHead:
        {
            if (npart == 1) {
                val = get_2bytes(msg + c);
                c += 2;
                writemesg("Protocol Name Length:", 21);
                int len = 0;
                val_deal_tool(val, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);

                tmp = {};
                for (int i = 0; i < val; i++) {
                    tmp.push_back(*(msg+c));
                    c++;
                }
                writemesg("Protocol Name:", 14);
                const char* tempp = tmp.c_str();
                writemesg(tempp, val);
                writemesg("\n", 1);
                *version = (int)(*(msg+c));
                c += 1;
                writemesg("Version:", 8);
                switch (*version) {
                case 3: {
                    writemesg("MQTT v3.1", 9);
                    writemesg("\n", 1);
                    break;
                }
                case 4: {
                    writemesg("MQTT v3.1.1", 11);
                    writemesg("\n", 1);
                    break;
                }
                case 5: {
                    writemesg("MQTT v5", 7);
                    writemesg("\n", 1);
                    break;
                }
                default: {
                    writemesg("ELSE", 4);
                    writemesg("\n", 1);
                }
                }
                writemesg("Connect Flags:", 14);
                writemesg("\n", 1);
                unsigned char* temp = msg + c;
                c += 1;
                int fg1=0;
                int fg2 = 0;
                int fg3 = 0;
                int fg4 = 0;
                int fg5 = 0;
                int fg6 = 0;
                int record = (int)(((*temp) & 0x80) >> 7);
                writemesg("  User Name Flag:", 17);
                if (record == 1) {
                    writemesg("Set", 3);
                    fg1 = 1;
                }
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                record = (int)(((*temp) & 0x40) >> 6);
                writemesg("  Password Flag:", 16);
                if (record == 1) {
                    writemesg("Set", 3);
                    fg2 = 1;
                }
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                record = (int)(((*temp) & 0x20) >> 5);
                writemesg("  Will Retain:", 14);
                if (record == 1) {
                    writemesg("Set", 3);
                    fg3 = 1;
                }
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                record = (int)(((*temp) & 0x18) >> 3);
                writemesg("  QoS Level:", 12);
                if (record == 0) writemesg("At most once delivery(", 22);
                else if (record == 1) writemesg("At least once delivery(", 23);
                else if (record == 2) writemesg("Exactly once delivery(", 22);
                len = 0;
                val_deal_tool(record, a, &len);
                writemesg(a, len);
                writemesg(")", 1);
                writemesg("\n", 1);

                record = (int)(((*temp) & 0x04) >> 2);
                writemesg("  Will Flag:", 12);
                if (record == 1) {
                    writemesg("Set", 3);
                    fg4 = 1;
                }
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                record = (int)(((*temp) & 0x02) >> 1);
                writemesg("  Clean Session Flag:", 21);
                if (record == 1) {
                    writemesg("Set", 3);
                    fg5 = 1;
                }
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                record = (int)((*temp) & 0x01);
                writemesg("  Reserved:", 11);
                if (record == 1) {
                    writemesg("Set", 3);
                    fg6 = 1;
                }
                else if (record == 0) writemesg("Not set", 7);
                writemesg("\n", 1);

                writemesg("Keep Alive:", 11);
                val = get_2bytes(msg + c);
                c += 2;
                len = 0;
                val_deal_tool(val, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);

                if (*version == 5) {
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    writemesg("  Total Length:", 15);
                    alen = int(*(msg + c));
                    c += 1;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) break;
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;
                        switch (ID) {
                        case 0x11: {
                            writemesg("Session Expiry Interval", 23);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = get_int(msg + c);
                            c += 4;
                            turn += 4;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x21: {
                            writemesg("Receive Maximum", 15);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = get_2bytes(msg + c);
                            c += 2;
                            turn += 2;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x27: {
                            writemesg("Maximum Packet Size", 19);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = get_int(msg + c);
                            c += 4;
                            turn += 4;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x22: {
                            writemesg("Topic Alias Maximum", 19);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = get_2bytes(msg + c);
                            c += 2;
                            turn += 2;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x19: {
                            writemesg("Request Response Information", 28);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = (int)(*(msg + c));
                            c += 1;
                            turn += 1;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x17: {
                            writemesg("Request Problem Information", 27);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = (int)(*(msg + c));
                            c += 1;
                            turn += 1;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        default: {
                            fl = 1;
                            break;
                        }
                        }
                    }
                    //cout << "alen - turn" <<alen-turn<< endl;
                    c += (alen - turn);
                }

                writemesg("Client ID Length:", 17);
                alen = get_2bytes(msg + c);
                //cout << "alen:" << alen << endl;
                c += 2;
                len = 0;
                val_deal_tool(alen, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);

                turn = 0;
                tmp = {};
                while (turn < alen)
                {
                    tmp += *(msg + c);
                    c += 1;
                    turn++;
                }
                writemesg("Client ID:", 10);
                tempp = tmp.c_str();
                writemesg(tempp,tmp.size());
                writemesg("\n", 1);

                if (*version == 5) {
                    writemesg("Will Properties:", 16);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 1;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;

                        //cout << "turn:" << turn << "alen:" << alen << endl;
                        switch (ID) {
                        case 0x03: {
                            writemesg("Content Type", 12);
                            writemesg("\n", 1);
                            writemesg("  Content Type:", 15);
                            val = get_2bytes(msg + c);
                            c += 2;
                            turn += 2;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x08: {
                            writemesg("Response Topic", 14);
                            writemesg("\n", 1);
                            writemesg("  Length:", 9);
                            val = get_2bytes(msg + c);
                            c += 2;
                            turn += 2;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);

                            int aturn = 0;
                            tmp = {};
                            while (aturn < val)
                            {
                                
                                tmp += *(msg + c);
                                c += 1;
                                aturn++;
                            }
                            writemesg("  Value:", 8);
                            tempp = tmp.c_str();
                            if (val != 0)  writemesg(tempp, tmp.size());
                            writemesg("\n", 1);
                            break;
                        }
                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "alen - turn" << alen - turn << endl;
                    c += (alen - turn);
                }

                if (fg4 == 1) {
                    writemesg("Will Topic Length:", 18);
                    alen = get_2bytes(msg+c);
                    
                    c += 2;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    tmp = {};
                    while (turn < alen)
                    {
                        tmp += *(msg + c);
                        c += 1;
                        turn++;
                    }
                    writemesg("Will Topic:", 11);
                    tempp = tmp.c_str();
                    writemesg(tempp, tmp.size());
                    writemesg("\n", 1);

                    writemesg("Will Message Length:", 20);
                    alen = get_2bytes(msg + c);
                    c += 2;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    tmp = {};
                    while (turn < alen)
                    {
                        tmp += *(msg + c);
                        c += 1;
                        turn++;
                    }
                    writemesg("Will Message:", 13);
                    tempp = tmp.c_str();
                    writemesg(tempp, tmp.size());
                    writemesg("\n", 1);
                }

                if (fg1 == 1) {
                    writemesg("User Name Length:", 17);
                    alen = get_2bytes(msg + c);
                    c += 2;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    tmp = {};
                    while (turn < alen)
                    {
                        tmp += *(msg + c);
                        c += 1;
                        turn++;
                    }
                    writemesg("User Name:", 10);
                    tempp = tmp.c_str();
                    writemesg(tempp, tmp.size());
                    writemesg("\n", 1);
                }
                if (fg2 == 1) {
                    writemesg("Password Length:", 16);
                    alen = get_2bytes(msg + c);
                    c += 2;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    tmp = {};
                    while (turn < alen)
                    {
                        tmp += *(msg + c);
                        c += 1;
                        turn++;
                    }
                    writemesg("Password:", 9);
                    tempp = tmp.c_str();
                    writemesg(tempp, tmp.size());
                    writemesg("\n", 1);
                }


            }
            if (npart == 2) {
                //cout >> "version"
                if (*version == 4 || *version == 5) {
                    int record = (int)(((*(msg+c)) & 0xFE) >> 1);
                    writemesg("Reserved:", 9);
                    if (record == 1)  writemesg("Set", 3);
                    else if (record == 0) writemesg("Not set", 7);
                    writemesg("\n", 1);

                    record = (int)((*(msg + c)) & 0x01);
                    c += 1;
                    writemesg("Session Present:", 16);
                    if (record == 1)  writemesg("Set", 3);
                    else if (record == 0) writemesg("Not set", 7);
                    writemesg("\n", 1);
                }
                else if (*version == 3) {
                    int record = (int)(*(msg + c));
                    c += 1;
                    writemesg("Reserved:", 9);
                    if (record == 1)  writemesg("Set", 3);
                    else if (record == 0) writemesg("Not set", 7);
                    writemesg("\n", 1);
                }

                val = (unsigned int)(*(msg + c));
                c += 1;
                if(*version == 5) writemesg("Reason Code:", 12);
                else if(*version == 3 || *version == 4) writemesg("Return Code:", 12);
                if (val == 0) {
                    if (*version == 5) writemesg("Success", 7);
                    else if (*version == 3 || *version == 4) writemesg("Connection Accepted", 19);
                }
                else if (val == 1) {
                    if (*version == 5) writemesg("NOT Success", 11);
                    else if (*version == 3 || *version == 4) writemesg("Connection Refused", 18);
                }
                writemesg("\n", 1);

                if (*version == 5) {
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 1;
                    int len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;

                        //cout << "turn:" << turn << "alen:" << alen << endl;
                        switch (ID) {
                        case 0x27: {
                            writemesg("Maximum Packet Size", 19);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = get_int(msg + c);
                            c += 4;
                            turn += 4;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x25: {
                            writemesg("Retain Available", 16);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = (unsigned int)(*(msg + c));
                            c += 1;
                            turn += 1;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x2a: {
                            writemesg("Shared Subscription Available", 29);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = (unsigned int)(*(msg + c));
                            c += 1;
                            turn += 1;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x29: {
                            writemesg("Subscription Identifier Available", 33);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = (unsigned int)(*(msg + c));
                            c += 1;
                            turn += 1;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);
                            writemesg("\n", 1);
                            break;
                        }
                        case 0x22: {
                            writemesg("Topic Alias Maximum", 19);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = get_2bytes(msg + c);
                            c += 2;
                            turn += 2;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);

                            //cout << "val1" << val << "len1" << len << endl;

                            writemesg("\n", 1);
                            break;
                        }
                        case 0x28: {
                            writemesg("Wildcard Subscription Available", 31);
                            writemesg("\n", 1);
                            writemesg("  Value:", 8);
                            val = (unsigned int)(*(msg + c));
                            c += 1;
                            turn += 1;
                            len = 0;
                            val_deal_tool(val, a, &len);
                            writemesg(a, len);

                            //cout << "val" << val << "len" << len << "a:" << a[0] <<endl;

                            writemesg("\n", 1);
                            break;
                        }

                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "alen - turn" << alen - turn << endl;
                    c += (alen - turn);
                }
            }
            if (npart == 3) {
                writemesg("Topic Length:", 13);
                alen = get_2bytes(msg + c);
                int topiclen = alen;
                c += 2;
                int len = 0;
                val_deal_tool(alen, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);

                turn = 0;
                tmp = {};
                while (turn < alen)
                {
                    tmp += *(msg + c);
                    c += 1;
                    turn++;
                }
                writemesg("Topic:", 6);
                const char*tempp = tmp.c_str();
                writemesg(tempp, tmp.size());
                writemesg("\n", 1);

                if (QosLevel == 1 || QosLevel == 2) {
                    writemesg("Message Identifier:", 19);
                    alen = get_2bytes(msg + c);
                    c += 2;
                    len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);
                }


                if (*version == 5) {
                    
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 1;
                    int len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;
                        switch (ID) {
                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "publish alen - turn" << alen - turn << endl;
                    c += (alen - turn);
                }

                writemesg("Message:", 8);
                int count = 0;
                for (int i = 0; i < (pktlen - topiclen);i++) {
                    if (count == 2) {
                        //c += 1;
                        writemesg((char*)(msg + c), 1);
                        break;
                    }
                    //if (*(msg + c) < 0x0a) continue;
                    if (*(msg+c) == 0x0a) count++;
                    else if((*(msg + c)) > 0x0a) writemesg((char *)(msg+c), 1);
                    c++;
                }
            }

            if (npart >= 4 && npart <= 11 ) {
                writemesg("Message Identifier:", 19);
                alen = get_2bytes(msg + c);
                c += 2;
                int len = 0;
                val_deal_tool(alen, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);
            }
            
            if (npart == 8) {
                if (*version == 5) {
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 1;
                    int len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;
                        switch (ID) {
                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "publish alen - turn" << alen - turn << endl;
                    c += (alen - turn);
                }

                alen = get_2bytes(msg + c);
                writemesg("Topic Length:", 13);
                c += 2;
                int len = 0;
                val_deal_tool(alen, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);
                
                writemesg("Topic:", 6);
                for (int i = 0; i < alen; i++) {
                    writemesg((char*)(msg + c), 1);
                    c++;
                }
                writemesg("\n", 1);

                if (*version == 3 || *version == 4) {
                    writemesg("Requested QoS:", 14);
                    int record = int(*(msg + c));
                    c += 2;
                    if (record == 0) writemesg("At most once delivery(", 22);
                    else if (record == 1) writemesg("At least once delivery(", 23);
                    else if (record == 2) writemesg("Exactly once delivery(", 22);
                    len = 0;
                    val_deal_tool(record, a, &len);
                    writemesg(a, len);
                    writemesg(")", 1);
                    writemesg("\n", 1);
                }

                if (*version == 5) {
                    writemesg("Subscription Options:", 21);
                    writemesg("\n", 1);
                    int record = (int)(((*(msg + c)) & 0xC0) >> 6);
                    writemesg("  Reserved:", 11);
                    len = 0;
                    val_deal_tool(record, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    record = (int)(((*(msg + c)) & 0x30) >> 4);
                    writemesg("  Retain Handling:", 18);
                    if (record == 0) {
                        writemesg("Send msgs at subscription time(", 31);
                        len = 0;
                        val_deal_tool(record, a, &len);
                        writemesg(a, len);
                        writemesg(")", 1);
                        writemesg("\n", 1);
                    }
                    else {
                        writemesg("Unknown(", 31);
                        len = 0;
                        val_deal_tool(record, a, &len);
                        writemesg(a, len);
                        writemesg(")", 1);
                        writemesg("\n", 1);
                    }

                    writemesg("  Retain As Published:", 22);
                    record = (int)(((*(msg+c)) & 0x08) >> 3);
                    //c += 1;
                    if (record == 1) writemesg("Set", 3);
                    else if (record == 0) writemesg("Not set", 7);
                    writemesg("\n", 1);

                    writemesg("  No Local:", 11);
                    record = (int)(((*(msg + c)) & 0x04) >> 2);
                    if (record == 1) writemesg("Set", 3);
                    else if (record == 0) writemesg("Not set", 7);
                    writemesg("\n", 1);

                    writemesg("  QoS:", 6);
                    record = (int)((*(msg + c)) & 0x03);
                    if (record == 0) writemesg("At most once delivery(", 22);
                    else if (record == 1) writemesg("At least once delivery(", 23);
                    else if (record == 2) writemesg("Exactly once delivery(", 22);
                    len = 0;
                    val_deal_tool(record, a, &len);
                    writemesg(a, len);
                    writemesg(")", 1);
                    writemesg("\n", 1);
                    c += 1;
                }


            }

            if (npart == 9) {
                if (*version == 5) {
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 1;
                    int len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;
                        switch (ID) {
                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "publish alen - turn" << alen - turn << endl;
                    c += (alen - turn);

                    writemesg("Reason Code:", 12);
                    writemesg("Granted QoS", 11);
                    int record = (int)(*(msg + c));
                    if (record == 0) writemesg("(At most once delivery)(", 24);
                    else if (record == 1) writemesg("(At least once delivery)(", 25);
                    else if (record == 2) writemesg("(Exactly once delivery)(", 24);
                    len = 0;
                    val_deal_tool(record, a, &len);
                    writemesg(a, len);
                    writemesg(")", 1);
                    writemesg("\n", 1);
                    c += 1;
                }
                if (*version == 3 || *version == 4) {
                    writemesg("Granted QoS:", 12);
                    int record = (int)(*(msg + c));
                    if (record == 0) writemesg("At most once delivery(", 22);
                    else if (record == 1) writemesg("At least once delivery(", 23);
                    else if (record == 2) writemesg("Exactly once delivery(", 22);
                    int len = 0;
                    val_deal_tool(record, a, &len);
                    writemesg(a, len);
                    writemesg(")", 1);
                    writemesg("\n", 1);
                    c += 1;
                }
            }
                
            if (npart == 10) {
                if (*version == 5) {
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 2;
                    int len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;
                        switch (ID) {
                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "publish alen - turn" << alen - turn << endl;
                    c += (alen - turn);
                }
                alen = get_2bytes(msg + c);
                writemesg("Topic Length:", 13);
                c += 2;
                int len = 0;
                val_deal_tool(alen, a, &len);
                writemesg(a, len);
                writemesg("\n", 1);
                
                writemesg("Topic:", 6);
                for (int i = 0; i < alen; i++) {
                    writemesg((char*)(msg + c), 1);
                    c++;
                }
                writemesg("\n", 1);
            }

            if (npart == 14) {
                writemesg("Reason Code:", 12);
                int record = (int)(*(msg + c));
                c += 1;
                if (record == 0) {
                    writemesg("Normal disconnection(", 21);
                    int len = 0;
                    val_deal_tool(record, a, &len);
                    writemesg(a, len);
                    writemesg(")", 1);
                }
                else {
                    writemesg("Unknown", 7);
                }
                writemesg("\n", 1);

                if (*version == 5) {
                    writemesg("Properties:", 11);
                    writemesg("\n", 1);
                    alen = (int)(*(msg + c));
                    writemesg("  Total Length:", 15);
                    c += 1;
                    int len = 0;
                    val_deal_tool(alen, a, &len);
                    writemesg(a, len);
                    writemesg("\n", 1);

                    turn = 0;
                    int fl = 0;
                    while (turn < alen) {
                        if (fl == 1) {
                            c -= 1;
                            break;
                        }
                        writemesg("  ID:", 5);
                        int ID = int(*(msg + c));
                        //cout << "ID" << ID << endl;
                        turn += 1;
                        c += 1;
                        switch (ID) {
                        default: {
                            fl = 1;
                            break;
                        }
                        }

                    }
                    //cout << "publish alen - turn" << alen - turn << endl;
                    c += (alen - turn);
                }
            }
            end = 1;
            break;
        }
        default:
            break;
        }
    }
}

MQTT::~MQTT() {}



